var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var SceneSprite_1 = require("./game/SceneSprite");
var MainView_1 = require("./game/views/MainView");
var MenuView_1 = require("./game/views/MenuView");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("game/SceneSprite.ts", SceneSprite_1.default);
        reg("game/views/MainView.ts", MainView_1.default);
        reg("game/views/MenuView.ts", MenuView_1.default);
    };
    GameConfig.width = 560;
    GameConfig.height = 960;
    GameConfig.scaleMode = "showall";
    GameConfig.screenMode = "horizontal";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "center";
    GameConfig.startScene = "scene/s_1.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
<<<<<<< HEAD
},{"./game/SceneSprite":8,"./game/views/MainView":34,"./game/views/MenuView":35}],2:[function(require,module,exports){
=======

},{"./game/SceneSprite":8,"./game/views/MainView":36,"./game/views/menu/InstallationInfo":37,"./game/views/menu/InstallationItem":38,"./game/views/menu/InstallationListItem":39,"./game/views/menu/MenuView":40}],2:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var CommandChannel_1 = require("./game/controller/CommandChannel");
var Comp_scene_layer_1 = require("./component/Comp_scene_layer");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.bgColor = "0x44444";
        Laya.stage.alignH = "center"; //设置水平居中对齐
        //设置垂直居中对齐，Stage.ALIGN_MIDDLE 常量等价于 middle 字符串
        Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        Laya.ClassUtils.regClass("component.Comp_scene_layer", Comp_scene_layer_1.default);
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    } /*  */
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        CommandChannel_1.default.instance.init();
    };
    return Main;
}());
//激活启动类
new Main();

},{"./GameConfig":1,"./component/Comp_scene_layer":3,"./game/controller/CommandChannel":10}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**场景分层组件，主要用于设置
 * 场景每个层级的以下属性
 * 1.速度
 */
var Comp_scene_layer = /** @class */ (function (_super) {
    __extends(Comp_scene_layer, _super);
    function Comp_scene_layer() {
        var _this = _super.call(this) || this;
        //缩放时间100毫秒
        _this.speed = 0;
        return _this;
    }
    return Comp_scene_layer;
}(Laya.Box));
exports.default = Comp_scene_layer;

},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConstName = /** @class */ (function () {
    function ConstName() {
    }
    /**全局信息中心 */
    ConstName.GAME_CONTROLLER = 1001;
    /**创建角色 */
    ConstName.CREATE_HERO = 1002;
    ConstName.TEST_COMMANDCHANNEL = 1003;
    /**加载控制中心*/
    ConstName.LOAD_CONTROLLER = 2001;
    ConstName.ADD_TO_LOAD_LIST = 2002;
    ConstName.START_LOAD = 2003;
    /**人物相关控制中心 */
    ConstName.ROLE_CONTROLLER = 3001;
    /**根据角色id获取角色 */
    ConstName.ROLE_GET_ROLE_BY_ID = 3002;
    /**创建角色到舞台上 */
    ConstName.ROLE_ADD_HERO = 3003;
    /**设置角色的场景移动速度 */
    ConstName.ROLE_SCENE_SPEED = 3004;
    /**获取角色列表 */
    ConstName.ROLE_GET_HERO_LIST = 3005;
    /**获取敌人列表 */
    ConstName.ROLE_GET_ENEMY_LIST = 3006;
    /**创建敌人到舞台上
     * params:Array= [roleName:string,roleId:number,pos:Ponumber]
     */
    ConstName.ROLE_ADD_ENEMY = 3007;
    /**ui界面控制中心 */
    ConstName.UI_CONTROLLER = 4001;
    /**根据id显示界面 */
    ConstName.SHOW_VIEW_BY_NAME = 4002;
    /**UI界面枚举*/
    ConstName.MAIN_VIEW = "MAIN_VIEW"; //主界面
    ConstName.MENU_VIEW = "MENU_VIEW"; //菜单界面
    /**游戏层级控制中心*/
    ConstName.LAYER_CONTROLLER = 6001;
    /**创建场景*/
    ConstName.CREATE_SCENE = 6002;
    /**获取场景层 */
    ConstName.GET_SCENE_LAYER = 6003;
    /**获取ui层 */
    ConstName.GET_UI_LAYER = 6004;
    /**根据名字获取ui层子层级 */
    ConstName.GET_UI_LAYER_BY_NAME = 6005;
    /**根据名字获取场景层子层级 */
    ConstName.GET_SCENE_LAYER_BY_NAME = 6006;
    /**战斗控制中心 */
    ConstName.BATTLE_CONTROLLER = 7001;
    /**创建子弹组 */
    ConstName.BATTLE_CREATE_BULLET_GROUP = 7002;
    /**角色动作名称 */
    ConstName.ATTACK = "attack";
    ConstName.MOVE = "move";
    /**游戏层级名称，用来获取对应层级时的id */
    ConstName.WORLD_LAYER = "WORLD_LAYER"; //世界总容器，除ui层
    ConstName.UI_LAYER = "UI_LAYER"; //ui总容器
    /**UI层级索引 */
    ConstName.MAIN_UI_LAYER = "MAIN_UI_LAYER";
    ConstName.ALERT_UI_LAYER = "ALERT_UI_LAYER";
    ConstName.TIP_UI_LAYER = "TIP_UI_LAYER";
    /**角色层级索引 */
    ConstName.ROLE_LAYER = "ROLE_LAYER";
    ConstName.BULLET_LAYER = "BULLET_LAYER";
    ConstName.EFFECT_LAYER = "EFFECT_LAYER";
    /**事件名称 */
    ConstName.FIRST_LOAD_COMPLETE = "first_load_complete";
    ConstName.KEY_DOWN = "key_down";
    ConstName.KEY_UP = "key_up";
    ConstName.SHOW_VIEW = "OPEN_VIEW";
    ConstName.CLOSE_VIEW = "CLOSE_VIEW";
    return ConstName;
}());
exports.default = ConstName;

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameEvent = /** @class */ (function (_super) {
    __extends(GameEvent, _super);
    function GameEvent() {
        return _super.call(this) || this;
    }
    Object.defineProperty(GameEvent, "ins", {
        get: function () {
            !GameEvent._ins && (GameEvent._ins = new GameEvent());
            return GameEvent._ins;
        },
        enumerable: true,
        configurable: true
    });
    return GameEvent;
}(Laya.EventDispatcher));
exports.default = GameEvent;

},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameGlobal = /** @class */ (function () {
    function GameGlobal() {
    }
    /* 帧率 */
    GameGlobal.GAME_FRATE = 30;
    /**角色类文件 */
    GameGlobal.ROLE = 0;
    /**背景音乐类文件 */
    GameGlobal.MUSIC = 1;
    /**音效类文件 */
    GameGlobal.SOUND = 2;
    /**子弹类文件 */
    GameGlobal.BULLET = 3;
    /**ui类文件 */
    GameGlobal.UI = 4;
    /**scene类文件 */
    GameGlobal.SCENE = 5;
    /**法宝类文件 */
    GameGlobal.FABAO = 6;
    /*统一资源根路径 */
    GameGlobal.RESOURCE_BASE_PATH = "./resource/";
    /**角色文件根路径 */
    GameGlobal.RESOURCE_ROLE_PATH = "./resource/dynamics/role/";
    /**音效文件根路径 */
    GameGlobal.RESOURCE_SOUND_PATH = "./resource/dynamics/sound/";
    /**子弹文件根路径 */
    GameGlobal.RESOURCE_BULLET_PATH = "./resource/dynamics/bullet/";
    /**UI文件根路径 */
    GameGlobal.RESOURCE_UI_PATH = "./resource/ui/";
    /**scene文件根路径 */
    GameGlobal.RESOURCE_SCENE_PATH = "./resource/scene/";
    /**法宝文件根路径 */
    GameGlobal.RESOURCE_FABAO_PATH = "./resource/dynamics/faBao/";
    return GameGlobal;
}());
exports.default = GameGlobal;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameEvent_1 = require("./GameEvent");
var ConstName_1 = require("./ConstName");
var ViewConfigVo_1 = require("./vo/ViewConfigVo");
var JsonConfig = /** @class */ (function () {
    function JsonConfig() {
    }
    Object.defineProperty(JsonConfig, "ins", {
        get: function () {
            !JsonConfig._ins && (JsonConfig._ins = new JsonConfig());
            return JsonConfig._ins;
        },
        enumerable: true,
        configurable: true
    });
    JsonConfig.prototype.initJson = function () {
        // GameEvent.ins.event(ConstName.FIRST_LOAD_COMPLETE);
        var configJson = window["configJson"];
        // JsonConfig.bulletPosJson = this.createJsonById(configJson["bulletPos"],BulletPosVo);
        // JsonConfig.roleSettingJson = this.createJsonById(configJson["roleSetting"],RoleSettingVo);
        // JsonConfig.bulletConfigJson = this.createJsonById(configJson["bulletConfig"],BulletConfigVo);
        // JsonConfig.fbConfigVoJson = this.createJsonById(configJson["fbConfig"],FbConfigVo);
        JsonConfig.viewConfigVoJson = this.createJsonById(configJson["viewConfig"], ViewConfigVo_1.default);
        GameEvent_1.default.ins.event(ConstName_1.default.FIRST_LOAD_COMPLETE);
    };
    JsonConfig.prototype.createJsonById = function (jsonObjArray, clzVo) {
        var obj = new Object();
        for (var jsonObjStr in jsonObjArray) {
            (new clzVo()).init(jsonObjArray[jsonObjStr], obj);
        }
        return obj;
    };
    return JsonConfig;
}());
exports.default = JsonConfig;
<<<<<<< HEAD
},{"./ConstName":4,"./GameEvent":5,"./vo/ViewConfigVo":37}],8:[function(require,module,exports){
=======

},{"./ConstName":4,"./GameEvent":5,"./vo/MenuVo":44,"./vo/ViewConfigVo":45}],8:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*anyany
 any ...
 any @author jwd
 any*/
var SceneSprite = /** @class */ (function (_super) {
    __extends(SceneSprite, _super);
    function SceneSprite() {
        var _this = _super.call(this) || this;
        _this.mouseEnabled = true;
        //默认关闭时候全部销毁
        _this.autoDestroyAtClosed = true;
        _this.frontList = [];
        _this.middleList = [];
        _this.rearList = [];
        return _this;
    }
    SceneSprite.prototype.createView = function (view) {
        _super.prototype.createView.call(this, view);
        // Laya.stage.on(Laya.Event.CLICK,this,this.transformScene,[1,0]);
        // var i:number = 0;
        // while(this["front_"+i]) {
        // 	this.frontList.push(this["front_"+i]);
        // 	this.frontEnd = this["front_"+i];
        // 	i++;
        // }
        // i = 0;
        // while(this["middle_"+i]) {
        // 	this.middleList.push(this["middle_"+i]);
        // 	this.middleEnd = this["middle_"+i];
        // 	i++;
        // }
        // i = 0;
        // while(this["rear_"+i]) {
        // 	this.rearList.push(this["rear_"+i]);
        // 	this.rearEnd = this["rear_"+i];
        // 	i++;
        // }
    };
    SceneSprite.prototype.destroy = function (destroyChild) {
        _super.prototype.destroy.call(this, destroyChild);
    };
    return SceneSprite;
}(Laya.Scene));
exports.default = SceneSprite;

},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("./Controller");
var BattleController = /** @class */ (function (_super) {
    __extends(BattleController, _super);
    // private  _bulletManager:BulletManager;
    function BattleController(channel) {
        return _super.call(this, channel) || this;
        // _bulletManager = new BulletManager(channel);
        // this.managerList.push(_bulletManager);
        // this.addCommand(ConstName.BATTLE_CREATE_BULLET_GROUP,_bulletManager,_bulletManager.createBulletGroup);
    }
    return BattleController;
}(Controller_1.default));
exports.default = BattleController;

},{"./Controller":11}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConstName_1 = require("../ConstName");
var GameController_1 = require("./GameController");
var UIController_1 = require("./UIController");
var LoadController_1 = require("./LoadController");
var LayerController_1 = require("./LayerController");
var RoleController_1 = require("./RoleController");
var BattleController_1 = require("./BattleController");
var CommandChannel = /** @class */ (function () {
    function CommandChannel() {
        this._controllerList = new Object();
        this._dataProxyList = new Object();
        this.registerController(ConstName_1.default.GAME_CONTROLLER, new GameController_1.default(this));
        this.registerController(ConstName_1.default.UI_CONTROLLER, new UIController_1.default(this));
        this.registerController(ConstName_1.default.LOAD_CONTROLLER, new LoadController_1.default(this));
        this.registerController(ConstName_1.default.LAYER_CONTROLLER, new LayerController_1.default(this));
        this.registerController(ConstName_1.default.ROLE_CONTROLLER, new RoleController_1.default(this));
        this.registerController(ConstName_1.default.BATTLE_CONTROLLER, new BattleController_1.default(this));
        // this.registerController(ConstData.SOUND_CONTROLLER,new SoundController(this));
        // this.registerController(ConstData.APP_CONTROLLER,new AppController(this));
        // this.registerDataProxy(ConstData.PLAYER_PROXY,new PlayerProxy(this));
        this.init();
    }
    CommandChannel.prototype.init = function () {
        for (var controllerName in this._controllerList) {
            this._controllerList[controllerName].init();
        }
        for (var dataProxyName in this._dataProxyList) {
            this._dataProxyList[dataProxyName].init();
        }
    };
    Object.defineProperty(CommandChannel, "instance", {
        //单例模式获取命令管线，全局唯一
        get: function () {
            !CommandChannel._instance && (CommandChannel._instance = new CommandChannel());
            return CommandChannel._instance;
            //return CommandChannel._instance!=null?CommandChannel._instance:(CommandChannel._instance=new CommandChannel(),CommandChannel._instance);
        },
        enumerable: true,
        configurable: true
    });
    //注册控制器，通过commmandName和具体的控制器关联
    CommandChannel.prototype.registerController = function (controllerName, controller) {
        if (!this._controllerList.hasOwnProperty(controllerName)) {
            this._controllerList[controllerName] = controller;
        }
    };
    //根据commandName获取控制器
    CommandChannel.prototype.getController = function (controllerName) {
        if (this._controllerList[controllerName]) {
            return this._controllerList[controllerName];
        }
        return null;
    };
    //执行命令
    CommandChannel.prototype.postCommand = function (controllerName, commandName, params) {
        if (params === void 0) { params = null; }
        var getController = this.getController(controllerName);
        return getController != null ? getController.executeCommand(commandName, params) : null;
    };
    /**
     * 注册数据处理中心
    */
    CommandChannel.prototype.registerDataProxy = function (dataProxyName, dataProxy) {
        if (!this._dataProxyList.hasOwnProperty(dataProxyName)) {
            this._dataProxyList[dataProxyName] = dataProxy;
        }
    };
    /**
     * 注册具体数据到数据中心
    */
    CommandChannel.prototype.addFuncToDataProxy = function (dataProxyName, dataName, func, thisObj) {
        var dataProxy = this.getDataProxy(dataProxyName);
        dataProxy && dataProxy.addDataFunc(dataName, func, thisObj);
    };
    //根据dataProxyName获取控制器
    CommandChannel.prototype.getDataProxy = function (dataProxyName) {
        if (this._dataProxyList[dataProxyName]) {
            return this._dataProxyList[dataProxyName];
        }
        return null;
    };
    /**
     * 数据改变，广播消息
    */
    CommandChannel.prototype.broadCastData = function (dataProxyName, dataName, params) {
        if (params === void 0) { params = null; }
        var dataProxy = this.getDataProxy(dataProxyName);
        return dataProxy != null ? dataProxy.executeCommand(dataName, params) : null;
    };
    return CommandChannel;
}());
exports.default = CommandChannel;
<<<<<<< HEAD
},{"../ConstName":4,"./BattleController":9,"./GameController":12,"./LayerController":13,"./LoadController":14,"./RoleController":15,"./UIController":16}],11:[function(require,module,exports){
=======

},{"../ConstName":4,"../proxy/InstallationProxy":28,"./BattleController":9,"./GameController":12,"./LayerController":13,"./LoadController":14,"./RoleController":15,"./UIController":16}],11:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller = /** @class */ (function () {
    function Controller(channel) {
        this.commandList = new Object();
        this.managerList = [];
        this.channel = channel;
    }
    Controller.prototype.init = function () {
        for (var baseManagerName in this.managerList) {
            this.managerList[baseManagerName].init();
        }
    };
    //添加命令
    Controller.prototype.addCommand = function (commandName, caller, func) {
        if (!this.commandList.hasOwnProperty(commandName)) {
            this.commandList[commandName] = [caller, func];
        }
    };
    //执行命令
    Controller.prototype.executeCommand = function (commandName, params) {
        return this.commandList[commandName] != null ? this.commandList[commandName][1].call(this.commandList[commandName][0], params) : null;
    };
    return Controller;
}());
exports.default = Controller;

},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("./Controller");
var GameManager_1 = require("../manager/GameManager");
var ConstName_1 = require("../ConstName");
var GameController = /** @class */ (function (_super) {
    __extends(GameController, _super);
    function GameController(channel) {
        var _this = _super.call(this, channel) || this;
        _this._gameManager = new GameManager_1.default(_this.channel);
        _this.managerList.push(_this._gameManager);
        _this.addCommand(ConstName_1.default.TEST_COMMANDCHANNEL, _this._gameManager, _this._gameManager.testCommandChannel);
        return _this;
    }
    return GameController;
}(Controller_1.default));
exports.default = GameController;

},{"../ConstName":4,"../manager/GameManager":18,"./Controller":11}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("./Controller");
var ConstName_1 = require("../ConstName");
var LayerManager_1 = require("../manager/LayerManager");
/**
 * ...
 * @author ...
 */
var LayerController = /** @class */ (function (_super) {
    __extends(LayerController, _super);
    function LayerController(channel) {
        var _this = _super.call(this, channel) || this;
        _this._layerManager = new LayerManager_1.default(channel);
        _this.managerList.push(_this._layerManager);
        _this.addCommand(ConstName_1.default.CREATE_SCENE, _this._layerManager, _this._layerManager.createScene);
        _this.addCommand(ConstName_1.default.GET_SCENE_LAYER, _this._layerManager, _this._layerManager.getSceneLayer);
        _this.addCommand(ConstName_1.default.GET_SCENE_LAYER_BY_NAME, _this._layerManager, _this._layerManager.getSceneLayerByName);
        _this.addCommand(ConstName_1.default.GET_UI_LAYER, _this._layerManager, _this._layerManager.getUILayer);
        _this.addCommand(ConstName_1.default.GET_UI_LAYER_BY_NAME, _this._layerManager, _this._layerManager.getUILayerByName);
        return _this;
    }
    return LayerController;
}(Controller_1.default));
exports.default = LayerController;

},{"../ConstName":4,"../manager/LayerManager":21,"./Controller":11}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("./Controller");
var ConstName_1 = require("../ConstName");
var LoadManager_1 = require("../manager/LoadManager");
var JsonConfig_1 = require("../JsonConfig");
var LoadController = /** @class */ (function (_super) {
    __extends(LoadController, _super);
    function LoadController(channel) {
        var _this = _super.call(this, channel) || this;
        _this._firstLoadList = [];
        _this.addCommand(ConstName_1.default.ADD_TO_LOAD_LIST, _this, _this.addToLoadList);
        _this.addCommand(ConstName_1.default.START_LOAD, _this, _this.startLoad);
        _this.startLoad();
        return _this;
    }
    /**初始加载的资源都放在这里 */
    LoadController.prototype.startLoad = function () {
        this._firstLoadList.push({ url: LoadManager_1.default.getUrl("configJson.json"), type: Laya.Loader.JSON });
        Laya.loader.load(this._firstLoadList, new Laya.Handler(this, this.loadComplete));
        // if(Laya.Browser.onWeiXin) {
        //     this._firstLoadList.push({ url: LoadManager.getUrl("./configJson.json"), type: Laya.Loader.JSON });
        //     Laya.loader.load(this._firstLoadList,new Laya.Handler(this,this.loadComplete));   
        // } else {
        //     var script:any = Laya.Browser.document.createElement("script");
        //     script.src = LoadManager.getUrl("./newFightJson.js");
        //     script.onload = function():void {
        //         JsonConfig.ins.initJson();
        //     }
        //     script.onerror = function():void
        //     {
        //         alert("配置文件加载错误，请刷新重试");
        //     }
        //     Laya.Browser.document.body.appendChild(script);
        // }
    };
    /**加入资源到加载列表 */
    LoadController.prototype.addToLoadList = function (data) {
        if (data.length > 0) {
            for (var dataStr in data) {
                this._firstLoadList.push(data[dataStr]);
            }
        }
        else
            this._firstLoadList.push(data);
    };
    LoadController.prototype.loadComplete = function () {
        window["configJson"] = LoadManager_1.default.getRes("configJson.json");
        JsonConfig_1.default.ins.initJson();
        // GameEvent.ins.event(ConstName.FIRST_LOAD_COMPLETE);
    };
    return LoadController;
}(Controller_1.default));
exports.default = LoadController;
<<<<<<< HEAD
},{"../ConstName":4,"../JsonConfig":7,"../manager/LoadManager":22,"./Controller":11}],15:[function(require,module,exports){
=======

},{"../ConstName":4,"../GameGlobal":6,"../JsonConfig":7,"../manager/LoadManager":22,"./Controller":11}],15:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("./Controller");
var RoleManager_1 = require("../manager/RoleManager");
var ConstName_1 = require("../ConstName");
/**
 * ...
 * @author jwd
 */
var RoleController = /** @class */ (function (_super) {
    __extends(RoleController, _super);
    function RoleController(channel) {
        var _this = _super.call(this, channel) || this;
        _this._roleManager = new RoleManager_1.default(_this.channel);
        _this.managerList.push(_this._roleManager);
        _this.addCommand(ConstName_1.default.ROLE_GET_ROLE_BY_ID, _this._roleManager, _this._roleManager.getHero);
        _this.addCommand(ConstName_1.default.ROLE_ADD_HERO, _this._roleManager, _this._roleManager.addHero);
        _this.addCommand(ConstName_1.default.ROLE_ADD_ENEMY, _this._roleManager, _this._roleManager.addEnemy);
        _this.addCommand(ConstName_1.default.ROLE_SCENE_SPEED, _this._roleManager, _this._roleManager.setSceneSpeed);
        _this.addCommand(ConstName_1.default.ROLE_GET_HERO_LIST, _this._roleManager, _this._roleManager.getHeroList);
        _this.addCommand(ConstName_1.default.ROLE_GET_ENEMY_LIST, _this._roleManager, _this._roleManager.getEnemyList);
        return _this;
    }
    return RoleController;
}(Controller_1.default));
exports.default = RoleController;

},{"../ConstName":4,"../manager/RoleManager":23,"./Controller":11}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Controller_1 = require("./Controller");
var UIManager_1 = require("../manager/UIManager");
var ConstName_1 = require("../ConstName");
var UIController = /** @class */ (function (_super) {
    __extends(UIController, _super);
    function UIController(channel) {
        var _this = _super.call(this, channel) || this;
        _this._uiManager = new UIManager_1.default(channel);
        _this.managerList.push(_this._uiManager);
        _this.addCommand(ConstName_1.default.SHOW_VIEW_BY_NAME, _this._uiManager, _this._uiManager.showView);
        return _this;
    }
    return UIController;
}(Controller_1.default));
exports.default = UIController;

},{"../ConstName":4,"../manager/UIManager":26,"./Controller":11}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 管理器的基类，主要实现管理器的初始化，
 * 销毁等基本操作
 * @author jwd
 */
var BaseManager = /** @class */ (function () {
    function BaseManager(channel) {
        if (channel === void 0) { channel = null; }
        this.channel = channel;
    }
    BaseManager.prototype.init = function () {
    };
    BaseManager.prototype.destroy = function () {
    };
    return BaseManager;
}());
exports.default = BaseManager;

},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var InputManager_1 = require("./InputManager");
var HitManager_1 = require("./HitManager");
var GameEvent_1 = require("../GameEvent");
var ConstName_1 = require("../ConstName");
/**
 * ...
 * @author jwd
 */
var GameManager = /** @class */ (function (_super) {
    __extends(GameManager, _super);
    function GameManager(channel) {
        var _this = _super.call(this, channel) || this;
        _this.roleId = 2;
        _this.enemyNameArr = ["m_1", "m_2", "m_3", "m_4"];
        _this._inputManager = new InputManager_1.default(channel);
        _this._hitManager = new HitManager_1.default(channel);
        return _this;
    }
    GameManager.prototype.init = function () {
        GameEvent_1.default.ins.on(ConstName_1.default.FIRST_LOAD_COMPLETE, this, this.initGame);
    };
    GameManager.prototype.initGame = function () {
        // this.channel.postCommand(ConstName.ROLE_CONTROLLER,ConstName.ROLE_ADD_HERO,["female",0,new Laya.Point(400,100)]);
        //临时写段生成enmey的逻辑，之后处理
        for (var i = 0; i < 10; i++) {
            this.createEnemy();
        }
        // Laya.timer.loop(600,this,this.createEnemy);
        this.channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.CREATE_SCENE, ['s_1']);
        // this._inputManager.setInputStyle();
        this.channel.postCommand(ConstName_1.default.UI_CONTROLLER, ConstName_1.default.SHOW_VIEW_BY_NAME, [ConstName_1.default.MAIN_VIEW]);
        // this._hitManager.init();
        // Laya.SoundManager.playMusic(LoadManager.getUrl("bgm.mp3",GameGlobal.MUSIC));
    };
    GameManager.prototype.createEnemy = function () {
        var random = Math.random() * 100;
        if (random > 20) {
            this.roleId++;
            var randomName = this.enemyNameArr[parseInt(Math.random() * this.enemyNameArr.length + "")];
            this.channel.postCommand(ConstName_1.default.ROLE_CONTROLLER, ConstName_1.default.ROLE_ADD_ENEMY, [randomName, this.roleId, new Laya.Point(-560 + Math.random() * 2240, Math.random() * (Laya.stage.height - 100))]);
        }
    };
    GameManager.prototype.testCommandChannel = function () {
        alert("命令管线调试成功，可以开工了");
    };
    return GameManager;
}(BaseManager_1.default));
exports.default = GameManager;
<<<<<<< HEAD
},{"../ConstName":4,"../GameEvent":5,"./BaseManager":17,"./HitManager":19,"./InputManager":20}],19:[function(require,module,exports){
=======

},{"../ConstName":4,"../GameEvent":5,"./BaseManager":17,"./HitManager":19,"./InputManager":20,"./LoadManager":22}],19:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var HitManager = /** @class */ (function (_super) {
    __extends(HitManager, _super);
    // private  _heroList:Array<any>;
    // private  _bulletGroupList:Array.<BaseBulletGroup>;
    // private  _enemyList:Array.<Enemy>
    function HitManager(channel) {
        return _super.call(this, channel) || this;
        // _bulletGroupList = new Array.<BaseBulletGroup>;
    }
    HitManager.prototype.init = function () {
        // Laya.timer.loop(30,this,this.update);
        // _heroList = this.channel.postCommand(ConstName.ROLE_CONTROLLER,ConstName.ROLE_GET_HERO_LIST) as Array.<Hero>;
        // _enemyList = this.channel.postCommand(ConstName.ROLE_CONTROLLER,ConstName.ROLE_GET_ENEMY_LIST) as Array.<Enemy>;
        // for each(var hero:Role in _heroList) {
        //     _bulletGroupList.push(hero.bulletGroup);
        // }
    };
    /**
     *检测碰撞主循环
     *需要特别注意，性能
     *随时进行优化
     */
    HitManager.prototype.update = function () {
        // var attackRect:Rectangle;
        // var hitRect:Rectangle;
        // for each(var bulletGroup:BaseBulletGroup in _bulletGroupList) {
        //     var bulletList:Array.<BulletAnimation> = bulletGroup.bulletList;
        //     for each(var bullet:BulletAnimation in bulletList) {
        //         attackRect = bullet.getGraphicBounds(true);
        //         attackRect.x = bullet.x;
        //         attackRect.y = bullet.y;
        //         for each(var enemy:Enemy in _enemyList) {
        //             if(!enemy.isDie){
        //                 hitRect = enemy.gameAni.getGraphicBounds(true);
        //                 hitRect.x = enemy.gameAni.x;
        //                 hitRect.y = enemy.gameAni.y;
        //                 if(attackRect.intersection(hitRect)) {
        //                     enemy.beHurted();
        //                 }                        
        //             }
        //         }
        //     }
        // }
    };
    return HitManager;
}(BaseManager_1.default));
exports.default = HitManager;

},{"./BaseManager":17}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
/**
 * ...
 * @author jwd
 */
var InputManager = /** @class */ (function (_super) {
    __extends(InputManager, _super);
    function InputManager(channel) {
        return _super.call(this, channel) || this;
    }
    /**根据平台设置对应的控制方式,
     * pc按键控制，
     * 移动，虚拟按键
     */
    InputManager.prototype.setInputStyle = function () {
        // var hero:Role = this.channel.postCommand(ConstName.ROLE_CONTROLLER,ConstName.ROLE_GET_ROLE_BY_ID,["female",0]) as Role;
        // this._roleControll = hero.roleControll;
        // if(Browser.onAndroid || !Browser.onPC) {
        // 	//如果是移动平台，则显示移动控制ui
        // 	this.channel.postCommand(ConstName.UI_CONTROLLER,ConstName.SHOW_VIEW_BY_NAME,[ConstName.MOVE_VIEW]);
        // }
        // else if (Browser.onPC)
        // {
        // 	Laya.stage.on(Event.KEY_DOWN, this, this.heroControll);
        // 	Laya.stage.on(Event.KEY_UP, this, this.heroControll);
        // 	Stat.show(0,0);
        // }
    };
    InputManager.prototype.heroControll = function (evt) {
        if (evt.keyCode == Laya.Keyboard.D || evt.keyCode == Laya.Keyboard.A) {
            if (evt.type == Laya.Event.KEY_DOWN) {
                this._roleControll.isMove = true;
                this._roleControll.rx = evt.keyCode == Laya.Keyboard.D ? 1 : -1;
            }
            else {
                this._roleControll.isMove = false;
                this._roleControll.rx = 0;
            }
        }
        if (evt.keyCode == Laya.Keyboard.W || evt.keyCode == Laya.Keyboard.S) {
            if (evt.type == Laya.Event.KEY_DOWN) {
                this._roleControll.isMove = true;
                this._roleControll.ry = evt.keyCode == Laya.Keyboard.S ? 1 : -1;
            }
            else {
                this._roleControll.isMove = false;
                this._roleControll.ry = 0;
            }
        }
    };
    return InputManager;
}(BaseManager_1.default));
exports.default = InputManager;

},{"./BaseManager":17}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var SceneLayerManager_1 = require("./SceneLayerManager");
var UILayerManager_1 = require("./UILayerManager");
var ConstName_1 = require("../ConstName");
/**
 * 游戏资源层次管理
 * 场景层，人物层，UI层
 * 每个层管理自己的层次
 * @author jwd
 */
var LayerManager = /** @class */ (function (_super) {
    __extends(LayerManager, _super);
    function LayerManager(channel) {
        var _this = _super.call(this, channel) || this;
        _this._sceneManager = new SceneLayerManager_1.default(channel);
        // this._roleLayerManager = new RoleLayerManager(channel);
        _this._uiLayerManager = new UILayerManager_1.default(channel);
        return _this;
    }
    LayerManager.prototype.init = function () {
        //最后层背景
        this._sceneManager.setRearLayerIndex(0);
        //中层背景
        this._sceneManager.setMiddleLayerIndex(1);
        //角色层
        this._sceneManager.setRoleLayerIndex(2);
        //子弹层
        this._sceneManager.setBulletLayerIndex(3);
        //特效子弹层
        this._sceneManager.setEffectLayerIndex(4);
        //角色预留层4
        //角色预留层5
        //角色预留层6
        //近层背景
        this._sceneManager.setFrontLayerIndex(7);
        //模块UI层
        this._uiLayerManager.setMainUILayerIndex(8);
        //弹出ui层
        this._uiLayerManager.setAlertUILayerIndex(9);
        //文字提示层
        this._uiLayerManager.setTipUILayerIndex(10);
    };
    LayerManager.prototype.getUILayer = function () {
        return this._uiLayerManager.uiLayer;
    };
    LayerManager.prototype.getSceneLayer = function () {
        return this._sceneManager.sceneLayer;
    };
    LayerManager.prototype.getSceneLayerByName = function (params) {
        var roleLayerType = params[0];
        switch (roleLayerType) {
            case ConstName_1.default.ROLE_LAYER:
                return this._sceneManager.roleLayer;
                break;
            case ConstName_1.default.BULLET_LAYER:
                return this._sceneManager.bulletLayer;
                break;
            case ConstName_1.default.EFFECT_LAYER:
                return this._sceneManager.effectLayer;
                break;
        }
        return new Laya.Sprite();
    };
    LayerManager.prototype.getUILayerByName = function (params) {
        var uiLayerType = params[0];
        switch (uiLayerType) {
            case ConstName_1.default.MAIN_UI_LAYER:
                return this._uiLayerManager.mainUILayer;
                break;
            case ConstName_1.default.ALERT_UI_LAYER:
                return this._uiLayerManager.alertUILayer;
                break;
            case ConstName_1.default.TIP_UI_LAYER:
                return this._uiLayerManager.tipUILayer;
                break;
        }
        return new Laya.Sprite();
    };
    LayerManager.prototype.createScene = function (params) {
        var sceneId = params[0];
        this._sceneManager.createScene(sceneId);
    };
    return LayerManager;
}(BaseManager_1.default));
exports.default = LayerManager;

},{"../ConstName":4,"./BaseManager":17,"./SceneLayerManager":24,"./UILayerManager":25}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var GameGlobal_1 = require("../GameGlobal");
var LoadManager = /** @class */ (function (_super) {
    __extends(LoadManager, _super);
    function LoadManager(channel) {
        return _super.call(this, channel) || this;
    }
    LoadManager.getUrl = function (url, type) {
        if (type === void 0) { type = -1; }
        if (type == GameGlobal_1.default.ROLE)
            return GameGlobal_1.default.RESOURCE_ROLE_PATH + url;
        else if (type == GameGlobal_1.default.MUSIC)
            return GameGlobal_1.default.RESOURCE_SOUND_PATH + url;
        else if (type == GameGlobal_1.default.SOUND) {
            if (Laya.Browser.onAndroid || Laya.Browser.onIOS) {
                return GameGlobal_1.default.RESOURCE_SOUND_PATH + url + ".wav";
            }
            else {
                return GameGlobal_1.default.RESOURCE_SOUND_PATH + url + ".mp3";
            }
        }
        else if (type == GameGlobal_1.default.BULLET)
            return GameGlobal_1.default.RESOURCE_BULLET_PATH + url;
        else if (type == GameGlobal_1.default.UI)
            return GameGlobal_1.default.RESOURCE_UI_PATH + url;
        else if (type == GameGlobal_1.default.SCENE)
            return GameGlobal_1.default.RESOURCE_SCENE_PATH + url;
        else if (type == GameGlobal_1.default.FABAO)
            return GameGlobal_1.default.RESOURCE_FABAO_PATH + url;
        return GameGlobal_1.default.RESOURCE_BASE_PATH + url;
    };
    LoadManager.getRes = function (url, type) {
        if (type === void 0) { type = -1; }
        var resUrl = LoadManager.getUrl(url, type);
        return Laya.loader.getRes(resUrl);
    };
    return LoadManager;
}(BaseManager_1.default));
exports.default = LoadManager;

},{"../GameGlobal":6,"./BaseManager":17}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var Hero_1 = require("../role/Hero");
var Enemy_1 = require("../role/Enemy");
var ConstName_1 = require("../ConstName");
var RoleManager = /** @class */ (function (_super) {
    __extends(RoleManager, _super);
    function RoleManager(channel) {
        var _this = _super.call(this, channel) || this;
        _this._heroList = new Array();
        _this._enemyList = new Array();
        _this._roleControllHash = new Object();
        //敌人缓冲池，避免重复创建
        _this._roleCacheList = new Array();
        /**避免重复创建 */
        _this.recycleList = new Array();
        return _this;
    }
    RoleManager.prototype.init = function () {
        Laya.timer.loop(30, this, this.update);
    };
    /** 根据角色id获取角色，无论在什么
     * 阶段都能获取到角色对象，除了角色的
     * 显示资源（采用异步加载填充），数据都会存在，
     * */
    RoleManager.prototype.getHero = function (params) {
        var roleName = params[0];
        var roleId = params[1];
        var hero;
        for (var heroID in this._heroList) {
            hero = this._heroList[heroID];
            if (hero.roleId == roleId)
                return hero;
        }
        hero = new Hero_1.default(roleName, roleId);
        // hero.bulletGroup = this.channel.postCommand(ConstName.BATTLE_CONTROLLER,ConstName.BATTLE_CREATE_BULLET_GROUP,[roleId]) as BaseBulletGroup;
        // hero.setBulletSkin();
        hero.setSkin("female.atlas");
        hero.setAnimation("move");
        this._heroList.push(hero);
        return hero;
    };
    RoleManager.prototype.getHeroList = function () {
        return this._heroList;
    };
    RoleManager.prototype.addHero = function (params) {
        var roleName = params[0];
        var roleId = params[1];
        var pos = params[2];
        var hero = this.getHero([roleName, roleId]);
        if (hero) {
            hero.setSkin(roleName + ".atlas");
            hero.setAnimation("move");
            hero.addStage(pos);
        }
    };
    /** 根据角色id获取敌人，如果缓冲池中有
     * 该类型的敌人，那就取出，如果没有，则
     * 创建
     * */
    RoleManager.prototype.getEnemy = function (params) {
        var roleName = params[0];
        var roleId = params[1];
        var enemy;
        for (var i = 0, len = this._roleCacheList.length; i < len; i--) {
            enemy = this._roleCacheList[i];
            console.log("从回收池中创建敌人");
            this._roleCacheList.splice(i, 1);
            return enemy;
        }
        enemy = new Enemy_1.default(roleName, roleId);
        enemy.setSkin("monster/" + roleName + ".atlas");
        // if(enemy.hasBullet){
        // 	enemy.bulletGroup = this.channel.postCommand(ConstName.BATTLE_CONTROLLER,ConstName.BATTLE_CREATE_BULLET_GROUP,[roleId]) as BaseBulletGroup;
        // 	enemy.setBulletSkin();
        // }
        return enemy;
    };
    RoleManager.prototype.addEnemy = function (params) {
        if (this._enemyList.length > 8)
            return;
        var roleName = params[0];
        var roleId = params[1];
        var pos = params[2];
        var enemy = this.getEnemy([roleName, roleId]);
        if (enemy) {
            enemy.init();
            enemy.setAnimation("move");
            enemy.gameAni.x = Math.ceil(pos.x);
            enemy.gameAni.y = Math.ceil(pos.y);
            var roleLayer = this.channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.GET_SCENE_LAYER_BY_NAME, [ConstName_1.default.ROLE_LAYER]);
            roleLayer.addChild(enemy.gameAni);
            var effectLayer = this.channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.GET_SCENE_LAYER_BY_NAME, [ConstName_1.default.EFFECT_LAYER]);
            effectLayer.addChild(enemy.bulletGroup);
            this._enemyList.push(enemy);
        }
    };
    RoleManager.prototype.getEnemyList = function () {
        return this._enemyList;
    };
    RoleManager.prototype.setSceneSpeed = function (params) {
        // var sceneSpeed:Number = params[0];
        // for each (var hero:Hero in _heroList)
        // {
        // 	hero.sceneSpeed = sceneSpeed;
        // }
    };
    RoleManager.prototype.update = function () {
        // for each (var hero:Hero in _heroList)
        // {
        // 	hero.update();
        // }
        // for each (var enemy:Enemy in _enemyList)
        // {
        // 	enemy.update();
        // 	if(enemy.isRecycle){
        // 		recycleList.push(enemy);
        // 	}
        // }
        // if(recycleList.length>0) {
        // 	for each(var recycle:Enemy in recycleList) {
        // 		recycleBulletFunc(recycle);
        // 	}
        // 	recycleList.splice(0,recycleList.length);
        // }
    };
    /**回收敌人机制 */
    RoleManager.prototype.recycleBulletFunc = function (enemy) {
        // enemy.recycle();
        // var enemyIndex:Number = _enemyList.indexOf(enemy);
        // _enemyList.splice(enemyIndex,1);
        // _roleCacheList.push(enemy);
    };
    return RoleManager;
}(BaseManager_1.default));
exports.default = RoleManager;
<<<<<<< HEAD
},{"../ConstName":4,"../role/Enemy":29,"../role/Hero":31,"./BaseManager":17}],24:[function(require,module,exports){
=======

},{"../ConstName":4,"../role/Enemy":31,"../role/Hero":33,"./BaseManager":17}],24:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
/**
 * ...
 * @author jwd
 */
var SceneLayerManager = /** @class */ (function (_super) {
    __extends(SceneLayerManager, _super);
    function SceneLayerManager(channel) {
        var _this = _super.call(this, channel) || this;
        _this.rearSpeed = 0;
        _this.middleSpeed = 0;
        _this.frontSpeed = 0;
        _this.sceneLayer = new Laya.Sprite();
        _this.frontLayer = new Laya.Sprite();
        _this.middleLayer = new Laya.Sprite();
        _this.rearLayer = new Laya.Sprite();
        _this.roleLayer = new Laya.Sprite();
        _this.bulletLayer = new Laya.Sprite();
        _this.effectLayer = new Laya.Sprite();
        Laya.stage.addChild(_this.sceneLayer);
        return _this;
    }
    SceneLayerManager.prototype.getWorldLayer = function () {
        return this.sceneLayer;
    };
    SceneLayerManager.prototype.setFrontLayerIndex = function (index) {
        this.sceneLayer.addChild(this.frontLayer);
        this.frontLayer.zOrder = index;
    };
    SceneLayerManager.prototype.setMiddleLayerIndex = function (index) {
        this.sceneLayer.addChild(this.middleLayer);
        this.middleLayer.zOrder = index;
    };
    SceneLayerManager.prototype.setRearLayerIndex = function (index) {
        this.sceneLayer.addChild(this.rearLayer);
        this.rearLayer.zOrder = index;
    };
    SceneLayerManager.prototype.setRoleLayerIndex = function (index) {
        this.sceneLayer.addChild(this.roleLayer);
        this.roleLayer.zOrder = index;
    };
    SceneLayerManager.prototype.setBulletLayerIndex = function (index) {
        this.sceneLayer.addChild(this.bulletLayer);
        this.bulletLayer.zOrder = index;
    };
    SceneLayerManager.prototype.setEffectLayerIndex = function (index) {
        this.sceneLayer.addChild(this.effectLayer);
        this.effectLayer.zOrder = index;
    };
    /** 生成场景*/
    SceneLayerManager.prototype.createScene = function (sceneId) {
        Laya.Scene.open("scene/" + sceneId + ".scene", true, Laya.Handler.create(this, this.addScene));
    };
    /**对场景显示对象进行分层处理 */
    SceneLayerManager.prototype.addScene = function (scene) {
        this.sceneSprite = scene;
        if (this.sceneSprite.rearLayer != null) {
            this.rearLayer.addChild(scene.rearLayer);
            this.rearSpeed = this.sceneSprite.rearLayer.speed;
        }
        if (this.sceneSprite.roleLayer != null) {
            this.middleSpeed = this.sceneSprite.roleLayer.speed;
            this.middleLayer.addChild(scene.roleLayer);
        }
        if (this.sceneSprite.frontLayer != null) {
            this.frontLayer.addChild(scene.frontLayer);
            this.frontSpeed = this.sceneSprite.frontLayer.speed;
        }
        // this.channel.postCommand(ConstName.ROLE_CONTROLLER,ConstName.ROLE_SCENE_SPEED,[-_middleSpeed]);
        // Laya.timer.loop(30,this,this.update);
    };
    /**更新场景移动 */
    SceneLayerManager.prototype.update = function () {
        if (this.sceneSprite) {
            var layerSpriteName;
            var layerSprite;
            //逐渐优化中，先写死
            //中景层
            if (this.middleSpeed) {
                for (layerSpriteName in this.sceneSprite.middleList) {
                    layerSprite = this.sceneSprite.middleList[layerSpriteName];
                    layerSprite.x -= this.sceneSprite.roleLayer.speed;
                    //6666真坑，displayWidth 尽然可以为负数（当scaleX 为-数的时候）
                    if (layerSprite.x < -Math.abs(layerSprite.displayWidth)) {
                        layerSprite.x = this.sceneSprite.middleEnd.x + Math.abs(this.sceneSprite.middleEnd.displayWidth) - this.sceneSprite.roleLayer.speed;
                        this.sceneSprite.middleEnd = layerSprite;
                    }
                }
            }
            //前景层
            if (this.frontSpeed) {
                for (layerSpriteName in this.sceneSprite.frontList) {
                    layerSprite = this.sceneSprite.frontList[layerSpriteName];
                    layerSprite.x -= this.sceneSprite.frontLayer.speed;
                    //6666真坑，displayWidth 尽然可以为负数（当scaleX 为-数的时候）
                    if (layerSprite.x < -Math.abs(layerSprite.displayWidth)) {
                        layerSprite.x = this.sceneSprite.frontEnd.x + Math.abs(this.sceneSprite.frontEnd.displayWidth) - this.sceneSprite.frontLayer.speed;
                        this.sceneSprite.frontEnd = layerSprite;
                    }
                }
            }
            //远景层
            if (this.rearSpeed) {
                for (layerSpriteName in this.sceneSprite.rearList) {
                    layerSprite = this.sceneSprite.rearList[layerSpriteName];
                    layerSprite.x -= this.sceneSprite.rearLayer.speed;
                    //6666真坑，displayWidth 尽然可以为负数（当scaleX 为-数的时候）
                    if (layerSprite.x < -Math.abs(layerSprite.displayWidth)) {
                        layerSprite.x = this.sceneSprite.rearEnd.x + Math.abs(this.sceneSprite.rearEnd.displayWidth) - this.sceneSprite.rearLayer.speed;
                        this.sceneSprite.rearEnd = layerSprite;
                    }
                }
            }
        }
    };
    /**释放场景资源*/
    SceneLayerManager.prototype.clear = function () {
        this.frontLayer.removeChildren();
        this.middleLayer.removeChildren();
        this.rearLayer.removeChildren();
    };
    SceneLayerManager.prototype.destroy = function () {
        this.frontLayer.destroy(true);
        this.frontLayer = null;
        this.middleLayer.destroy(true);
        this.middleLayer = null;
        this.rearLayer.destroy(true);
        this.rearLayer = null;
    };
    return SceneLayerManager;
}(BaseManager_1.default));
exports.default = SceneLayerManager;

},{"./BaseManager":17}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
/**
 * ...
 * @author jwd
 */
var UILayerManager = /** @class */ (function (_super) {
    __extends(UILayerManager, _super);
    function UILayerManager(channel) {
        var _this = _super.call(this, channel) || this;
        _this.uiLayer = new Laya.Sprite();
        _this.mainUILayer = new Laya.Sprite();
        _this.alertUILayer = new Laya.Sprite();
        _this.tipUILayer = new Laya.Sprite();
        Laya.stage.addChild(_this.uiLayer);
        return _this;
    }
    UILayerManager.prototype.setMainUILayerIndex = function (index) {
        this.uiLayer.addChild(this.mainUILayer);
        this.mainUILayer.zOrder = index;
    };
    UILayerManager.prototype.setAlertUILayerIndex = function (index) {
        this.uiLayer.addChild(this.alertUILayer);
        this.alertUILayer.zOrder = index;
    };
    UILayerManager.prototype.setTipUILayerIndex = function (index) {
        this.uiLayer.addChild(this.tipUILayer);
        this.tipUILayer.zOrder = index;
    };
    return UILayerManager;
}(BaseManager_1.default));
exports.default = UILayerManager;

},{"./BaseManager":17}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var GameEvent_1 = require("../GameEvent");
var ConstName_1 = require("../ConstName");
var MainView_1 = require("../views/MainView");
var MenuView_1 = require("../views/MenuView");
var JsonConfig_1 = require("../JsonConfig");
/**
 * ...
 * @author jwd
 */
var UIManager = /** @class */ (function (_super) {
    __extends(UIManager, _super);
    function UIManager(channel) {
        var _this = _super.call(this, channel) || this;
        _this._viewClassHash = new Object();
        _this._viewInsHash = new Object();
        GameEvent_1.default.ins.on(ConstName_1.default.SHOW_VIEW, _this, _this.showView);
        return _this;
    }
    //注册各种界面
    UIManager.prototype.init = function () {
        this._viewClassHash[ConstName_1.default.MAIN_VIEW] = MainView_1.default;
        this._viewClassHash[ConstName_1.default.MENU_VIEW] = MenuView_1.default;
        // Laya.View.regComponent()
        // Laya.View.regViewRuntime("MainUI",MainView);
        // Laya.View.regViewRuntime("MenuUI",MenuView);
    };
    /**加入控制器*/
    UIManager.prototype.addControl = function (viewName, baseControl) {
        if (!this._viewInsHash[viewName])
            this._viewInsHash[viewName] = baseControl;
        else
            throw new Error("重复添加控制器" + viewName);
    };
    //获取界面,如果没有界面实例则创建
    UIManager.prototype.getView = function (viewName) {
        var view = this._viewInsHash[viewName] || this.createView(viewName);
        return view;
    };
    /** 生成界面*/
    UIManager.prototype.createView = function (viewName) {
        var viewVo = JsonConfig_1.default.viewConfigVoJson[viewName];
        Laya.View.load("views/" + viewVo.resourceUrl, Laya.Handler.create(this, this.addView, [viewName]));
        // Laya.Scene.open("views/" + viewVo.resourceUrl, true, Laya.Handler.create(this, this.addScene));
    };
    /**对场景显示对象进行分层处理 */
    UIManager.prototype.addView = function (viewName, view) {
        if (view) {
            this._viewInsHash[viewName] = view;
            var viewVo = JsonConfig_1.default.viewConfigVoJson[viewName];
            var uiLayer = this.channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.GET_UI_LAYER_BY_NAME, [ConstName_1.default.MAIN_UI_LAYER]);
            view.showSelf(viewVo.closeOther, viewVo.isModel, uiLayer);
        }
    };
    //显示界面
    UIManager.prototype.showView = function (params) {
        var viewName = params[0];
        //判断是否开启当前模块 ,预留
        var view = this.getView(viewName);
        if (view) {
            var viewVo = JsonConfig_1.default.viewConfigVoJson[viewName];
            var uiLayer = this.channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.GET_UI_LAYER_BY_NAME, [ConstName_1.default.MAIN_UI_LAYER]);
            view.showSelf(viewVo.closeOther, viewVo.isModel, uiLayer);
        }
    };
    UIManager.prototype.destroy = function () {
        for (var controlName in this._viewInsHash) {
            var view = this._viewInsHash[controlName];
            view.destroy(true);
            delete this._viewInsHash[controlName];
        }
        this._viewInsHash = null;
    };
    return UIManager;
}(BaseManager_1.default));
exports.default = UIManager;
<<<<<<< HEAD
},{"../ConstName":4,"../GameEvent":5,"../JsonConfig":7,"../views/MainView":34,"../views/MenuView":35,"./BaseManager":17}],27:[function(require,module,exports){
=======

},{"../ConstName":4,"../GameEvent":5,"../GameGlobal":6,"../JsonConfig":7,"./BaseManager":17,"./LoadManager":22}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**玩家数据代理,处理玩家各种数据,主要有通知，存档，获取存档等数据操作*/
var DataProxy = /** @class */ (function () {
    function DataProxy(channel) {
        this.funcListObj = new Object();
        this.channel = channel;
    }
    DataProxy.prototype.init = function () {
    };
    /**
     * 注册数据改变处理
    */
    DataProxy.prototype.addDataFunc = function (dataName, func, thisObj) {
        if (!this.funcListObj.hasOwnProperty(dataName)) {
            this.funcListObj[dataName] = [];
        }
        this.funcListObj[dataName].push(new Array(func, thisObj));
    };
    /**
     * 广播并执行命令
    */
    DataProxy.prototype.executeCommand = function (commandName, params) {
        var funcArr = this.funcListObj[commandName];
        for (var funcName in funcArr) {
            var funcListArr = funcArr[funcName];
            for (var i = 0; i < funcListArr.length; i++) {
                var func = funcListArr[0];
                var thisObj = funcListArr[1];
                func && func.call(thisObj, params);
            }
        }
    };
    return DataProxy;
}());
exports.default = DataProxy;

},{}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataProxy_1 = require("./DataProxy");
var InstallationProxy = /** @class */ (function (_super) {
    __extends(InstallationProxy, _super);
    function InstallationProxy(channel) {
        return _super.call(this, channel) || this;
    }
    return InstallationProxy;
}(DataProxy_1.default));
exports.default = InstallationProxy;

},{"./DataProxy":27}],29:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ActionControll = /** @class */ (function () {
    function ActionControll(roleId) {
        //每个角色都有一个唯一的roleId
        this._roleId = 1;
        //x移动系数
        this._rx = 0;
        //y移动系数
        this._ry = 0;
        this._roleId = roleId;
    }
    Object.defineProperty(ActionControll.prototype, "roleId", {
        get: function () {
            return this._roleId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionControll.prototype, "rx", {
        get: function () {
            return this._rx;
        },
        set: function (value) {
            this._rx = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionControll.prototype, "ry", {
        get: function () {
            return this._ry;
        },
        set: function (value) {
            this._ry = value;
        },
        enumerable: true,
        configurable: true
    });
    return ActionControll;
}());
exports.default = ActionControll;
<<<<<<< HEAD
},{}],28:[function(require,module,exports){
=======

},{}],30:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseAnimation = /** @class */ (function (_super) {
    __extends(BaseAnimation, _super);
    function BaseAnimation() {
        return _super.call(this) || this;
    }
    /**
     * 创建一组动画的url数组（美术资源地址数组）
     * @param aniName  动作的名称，用于生成url
     * @param length   动画最后一帧的索引值，
     */
    BaseAnimation.prototype.aniUrls = function (aniName, length) {
        var urls = [];
        for (var i = 0; i < length; i++) {
            //动画资源路径要和动画图集打包前的资源命名对应起来
            urls.push(this._prefix + aniName + "_" + i + ".png");
        }
        return urls;
    };
    return BaseAnimation;
}(Laya.Animation));
exports.default = BaseAnimation;
<<<<<<< HEAD
},{}],29:[function(require,module,exports){
=======

},{}],31:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Role_1 = require("./Role");
/**
 * ...
 * @author jwd
 */
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    function Enemy(roleName, roleId) {
        return _super.call(this, roleName, roleId) || this;
    }
    Enemy.prototype.init = function () {
        _super.prototype.init.call(this);
        this.isRecycle = false;
        this.isDie = false;
        this._roleControll.isMove = true;
        this._roleControll.rx = -1;
        this._hurt = 6;
    };
    Enemy.prototype.update = function () {
        // if(this._roleControll.isMove) {
        //     // if(!lastTime)lastTime = (new Date()).getTime();
        //     // deltTime = ((new Date()).getTime() - lastTime);
        //     // var posX:number = this._gameAni.x + ((this._roleControll.rx*speed + sceneSpeed) * deltTime)/20 ;
        //     var posX:number = this._gameAni.x + this._roleControll.rx*speed ;
        //     var posY:number = this._gameAni.y + this._roleControll.ry*speed;
        //     var moveBounds:Array = this._gameAni.moveBoundsArr;
        //     this._gameAni.x = posX;
        //     this._gameAni.y = posY;
        // 	if(posX < -50) {
        // 		this.isRecycle = true;
        // 	}
        //     // lastTime = (new Date()).getTime();
        // 	if(this.hasBullet){
        // 		deltTime++;
        // 		if(deltTime ==  bulletConfigVo.deltTime){
        // 			this.deltTime = 0;
        // 			transformPoint.x = localPoint.x;
        // 			transformPoint.y = localPoint.y;
        // 			this._gameAni.localToGlobal(transformPoint);
        // 			this.bulletGroup.addBullet(transformPoint);
        // 		}
        // 	}
        // }
        // this.isMove = this._roleControll.isMove;
    };
    Object.defineProperty(Enemy.prototype, "isMove", {
        set: function (value) {
            // if(_isDie||_isHurt) return;
            // if(_isMove != value) {
            //     _isMove = value;
            //     if(value) {
            //         setAnimation("move");
            //     }else {
            //         setAnimation("move");
            //     }
            // }
        },
        enumerable: true,
        configurable: true
    });
    Enemy.prototype.dieComplete = function () {
        _super.prototype.dieComplete.call(this);
        this.isRecycle = true;
    };
    Enemy.prototype.beHurted = function () {
        this._hurt--;
        if (this._hurt <= 0) {
            this.isDie = true;
            return;
        }
        this.isHurt = true;
    };
    return Enemy;
}(Role_1.default));
exports.default = Enemy;
<<<<<<< HEAD
},{"./Role":32}],30:[function(require,module,exports){
=======

},{"./Role":34}],32:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseAnimation_1 = require("./BaseAnimation");
var LoadManager_1 = require("../manager/LoadManager");
var GameGlobal_1 = require("../GameGlobal");
var GameAnimation = /** @class */ (function (_super) {
    __extends(GameAnimation, _super);
    function GameAnimation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._actionNameList = [];
        _this._actionFrame = new Object();
        _this._isLoaded = false;
        //角色移动边界，上，下，左，右
        _this.moveBoundsArr = [0, 0, 0, 0];
        return _this;
    }
    GameAnimation.prototype.loadAtlas = function (url, loaded, cacheName) {
        if (loaded === void 0) { loaded = null; }
        if (cacheName === void 0) { cacheName = ""; }
        this._loadUrl = LoadManager_1.default.getUrl(url, GameGlobal_1.default.ROLE);
        return _super.prototype.loadAtlas.call(this, this._loadUrl, Laya.Handler.create(this, this.onLoaded));
    };
    GameAnimation.prototype.startLoad = function () {
        Laya.loader.load(this._loadUrl, Laya.Handler.create(this, this.onLoaded));
    };
    GameAnimation.prototype.onLoaded = function () {
        this._isLoaded = true;
        var _e = Laya.loader.getRes(this._loadUrl);
        this._prefix = _e.meta.prefix;
        var frames = _e.frames;
        //生成动作列表
        for (var fullName in frames) {
            var actionName = fullName.split("_")[0];
            if (this._actionNameList.indexOf(actionName) < 0) {
                this._actionNameList.push(actionName);
                this._actionFrame[actionName] = 1;
            }
            else
                this._actionFrame[actionName]++;
        }
        this.playAction("move");
    };
    GameAnimation.prototype.hasAction = function (actionName) {
        return this._actionNameList.indexOf(actionName) > -1;
    };
    GameAnimation.prototype.playAction = function (actionName, start, loop, name) {
        if (start === void 0) { start = 0; }
        if (loop === void 0) { loop = true; }
        if (name === void 0) { name = GameAnimation.MODUL; }
        if (!this._isLoaded || this._actionNameList.indexOf(actionName) == -1)
            return;
        if (this._currentActionName == actionName)
            return;
        this._currentActionName = actionName;
        Laya.Animation.createFrames(this.aniUrls(actionName, this._actionFrame[actionName]), GameAnimation.MODUL);
        this.play(start, loop, actionName);
        if (!this.graphics._one) {
            debugger;
        }
        this.pivot(this.graphics._one.width / 2, 0);
        var moveBoundsRect = this.getGraphicBounds();
        this.moveBoundsArr[1] = Laya.stage.height - moveBoundsRect.height;
        this.moveBoundsArr[3] = Laya.stage.width - moveBoundsRect.width / 2;
        // debugger;
    };
    GameAnimation.prototype.recycle = function () {
        // this.stop();
        // this.parent && (this.parent.removeChild(this));
    };
    GameAnimation.MODUL = "modul";
    return GameAnimation;
}(BaseAnimation_1.default));
exports.default = GameAnimation;
<<<<<<< HEAD
},{"../GameGlobal":6,"../manager/LoadManager":22,"./BaseAnimation":28}],31:[function(require,module,exports){
=======

},{"../GameGlobal":6,"../manager/LoadManager":22,"./BaseAnimation":30}],33:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Role_1 = require("./Role");
var CommandChannel_1 = require("../controller/CommandChannel");
var ConstName_1 = require("../ConstName");
/**
 * ...
 * @author jwd
 */
var Hero = /** @class */ (function (_super) {
    __extends(Hero, _super);
    function Hero(roleName, roleId) {
        var _this = _super.call(this, roleName, roleId) || this;
        _this._faBaoArr = [];
        //记录角色位置列表
        _this._posArr = [];
        return _this;
        // for(var i:number =0;i<this.roleSettingVo.fbArr.length;i++){
        //     var faBao:FaBao = new FaBao();
        //     faBao.setFaBaoSkin(roleSettingVo.fbArr[i]);
        //     _faBaoArr.push(faBao);
        // }
    }
    Hero.prototype.addStage = function (pos) {
        var channel = CommandChannel_1.default.instance;
        this.gameAni.x = Math.ceil(pos.x);
        this.gameAni.y = Math.ceil(pos.y);
        var roleLayer = channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.GET_SCENE_LAYER_BY_NAME, [ConstName_1.default.ROLE_LAYER]);
        roleLayer.addChild(this.gameAni);
        // for each(var faBao:FaBao in this._faBaoArr){
        //     roleLayer.addChild(faBao);
        //     var faBaoX:number = pos.x + parsenumber(faBao.fbConfigVo.startPosX);
        //     var faBaoY:number;
        //     var startPosY:string = faBao.fbConfigVo.startPosY;
        //     if(startPosY.indexOf("-") ==startPosY.length -1){
        //         //相对角色头顶偏移距离定位置
        //         faBaoY = pos.y - roleSettingVo.roleHeight + parsenumber(startPosY.substr(0,startPosY.length -1));
        //     }else if(parseFloat(startPosY) <1){
        //         //按照角色身高定位置
        //         faBaoY = pos.y - roleSettingVo.roleHeight * parsenumber(startPosY.substr(0,startPosY.length -1));
        //     }else {
        //         //按照角色位置偏移
        //         faBaoY = pos.y + parsenumber(startPosY);
        //     }
        //     var faBaoPos :Ponumber = new Ponumber(faBaoX,faBaoY);
        //     faBao.addFaBao(faBaoPos);
        // }
        // var bulletLayer:Sprite = channel.postCommand(ConstName.LAYER_CONTROLLER, ConstName.GET_ROLE_LAYER,[ConstName.BULLET_LAYER]) as Sprite;
        // bulletLayer.addChild(this.bulletGroup);
    };
    Hero.prototype.update = function () {
        // var rect:Rectangle = this._gameAni.getGraphicBounds();
        // this._gameAni.graphics.drawRect(rect.x,rect.y,rect.width,rect.height,"#000000");
        // if(this._roleControll.isMove) {
        //     // if(!lastTime)lastTime = (new Date()).getTime();
        //     // deltTime = ((new Date()).getTime() - lastTime);
        //     // var posX:number = this._gameAni.x + ((this._roleControll.rx*speed + sceneSpeed) * deltTime)/20 ;
        //     var posX:number = this._gameAni.x + this._roleControll.rx*speed ;
        //     var posY:number = this._gameAni.y + this._roleControll.ry*speed;
        //     var moveBounds:Array = this._gameAni.moveBoundsArr;
        //     if(posX > moveBounds[2]  && posX  < moveBounds[3])
        //         this._gameAni.x = posX;
        //     if(posY  > moveBounds[0] && posY  < moveBounds[1])
        //         this._gameAni.y = posY;
        //     // lastTime = (new Date()).getTime();
        //     if(_posArr.length < 150)
        //     {
        //         _posArr.unshift(new Ponumber(this._gameAni.x,this._gameAni.y));
        //     }else {
        //         _posArr.pop();
        //         _posArr.unshift(new Ponumber(this._gameAni.x,this._gameAni.y));
        //     }
        //     for each(var faBao:FaBao in this._faBaoArr){
        //     var pos:Ponumber = _posArr[faBao.fbConfigVo.posNo];
        //         if(pos){
        //             faBao.pos(pos.x,pos.y);
        //         }
        //         faBao.update();
        //     }
        // }
        // if(hasBullet){
        //     deltTime++;
        //     if(deltTime == bulletConfigVo.deltTime){
        //         this.deltTime = 0;
        //         transformPonumber.x = localPonumber.x;
        //         transformPonumber.y = localPonumber.y;
        //         this._gameAni.localToGlobal(transformPonumber);
        //         this.bulletGroup.addBullet(transformPonumber);
        //         SoundManager.playSound(LoadManager.getUrl(bulletConfigVo.bulletSnd,GameGlobal.SOUND));
        //     }
        // }
        // this.isMove = this._roleControll.isMove;
    };
    Object.defineProperty(Hero.prototype, "isMove", {
        set: function (value) {
            //     if(_isDie) return;
            //     if(_isMove != value) {
            //         _isMove = value;
            //         if(value) {
            //             setAnimation("attack");
            //         }else {
            //             setAnimation("attack");
            //         }
            //     }
            // }
        },
        enumerable: true,
        configurable: true
    });
    return Hero;
}(Role_1.default));
exports.default = Hero;
<<<<<<< HEAD
},{"../ConstName":4,"../controller/CommandChannel":10,"./Role":32}],32:[function(require,module,exports){
=======

},{"../ConstName":4,"../controller/CommandChannel":10,"./Role":34}],34:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameAnimation_1 = require("./GameAnimation");
var ActionControll_1 = require("./ActionControll");
var LoadManager_1 = require("../manager/LoadManager");
var GameGlobal_1 = require("../GameGlobal");
var Role = /** @class */ (function () {
    function Role(roleName, roleId) {
        this.speed = 8;
        //场景移动速度，根据此速度修正角色的显示速度
        this.sceneSpeed = 0;
        this._roleId = -1;
        this.transformPoint = new Laya.Point();
        this.localPoint = new Laya.Point();
        this.hasBullet = false;
        this._hurt = 6;
        this._isMove = false;
        this.deltTime = 0;
        this.lastTime = 0;
        this._roleName = roleName;
        this._roleId = roleId;
        this._gameAni = new GameAnimation_1.default();
        this._roleControll = new ActionControll_1.default(roleId);
        // roleSettingVo = JsonConfig.roleSettingJson[roleName];
        // this._gameAni.interval = roleSettingVo.interval;
        // this.speed = roleSettingVo.speed;
        // hasBullet = roleSettingVo.hasBullet;
        // if(hasBullet) {
        //     var bulletPosVo:BulletPosVo = JsonConfig.bulletPosJson[roleName];
        //     localPoint.x = bulletPosVo.posXArr[0];
        //     localPoint.y = bulletPosVo.posYArr[0];
        // }
    }
    Role.prototype.init = function () {
        this._gameAni.play();
    };
    Role.prototype.addStage = function (pos) {
    };
    Role.prototype.setSkin = function (skin) {
        this._gameAni.loadAtlas(skin);
    };
    Role.prototype.setAnimation = function (actionName) {
        this._gameAni.playAction(actionName);
    };
    Role.prototype.setBulletSkin = function () {
        // var roleSettingVo:RoleSettingVo = JsonConfig.roleSettingJson[roleName];
        // this.bulletGroup.setBulletSkin(roleSettingVo.bulletName,roleSettingVo.bulletDir);
        // bulletConfigVo = JsonConfig.bulletConfigJson[roleSettingVo.bulletName];
    };
    Object.defineProperty(Role.prototype, "roleId", {
        get: function () {
            return this._roleId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Role.prototype, "roleName", {
        get: function () {
            return this._roleName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Role.prototype, "gameAni", {
        get: function () {
            return this._gameAni;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Role.prototype, "roleControll", {
        get: function () {
            return this._roleControll;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Role.prototype, "bulletGroup", {
        get: function () {
            return this._bulletGroup;
        },
        set: function (value) {
            this._bulletGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Role.prototype, "isDie", {
        get: function () {
            return this._isDie;
        },
        set: function (value) {
            if (this._isDie == value)
                return;
            if (value) {
                this.setAnimation("die");
                // this._gameAni.once(Event.COMPLETE,this,this.dieComplete)
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Role.prototype, "isHurt", {
        set: function (value) {
            if (this._isHurt == value)
                return;
            if (value) {
                if (this._gameAni.hasAction("hurt")) {
                    this.setAnimation("hurt");
                    // this._gameAni.once(Laya.Event.COMPLETE,this,this.hurtComplete)
                }
                Laya.SoundManager.playSound(LoadManager_1.default.getUrl("beHited_snd", GameGlobal_1.default.SOUND));
            }
        },
        enumerable: true,
        configurable: true
    });
    Role.prototype.hurtComplete = function () {
        this._isHurt = false;
        this._gameAni.playAction("move");
    };
    Role.prototype.dieComplete = function () {
    };
    Object.defineProperty(Role.prototype, "isRecycle", {
        get: function () {
            return this._isRecycle;
        },
        set: function (value) {
            this._isRecycle = value;
        },
        enumerable: true,
        configurable: true
    });
    Role.prototype.update = function () {
    };
    Role.prototype.recycle = function () {
        this._gameAni.recycle();
    };
    Role.prototype.beHurted = function () {
    };
    return Role;
}());
exports.default = Role;
<<<<<<< HEAD
},{"../GameGlobal":6,"../manager/LoadManager":22,"./ActionControll":27,"./GameAnimation":30}],33:[function(require,module,exports){
=======

},{"../GameGlobal":6,"../manager/LoadManager":22,"./ActionControll":29,"./GameAnimation":32}],35:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseView = /** @class */ (function (_super) {
    __extends(BaseView, _super);
    function BaseView() {
        return _super.call(this) || this;
        // this.channel = CommandChannel.instance;
    }
    BaseView.prototype.createView = function (view) {
        _super.prototype.createView.call(this, view);
    };
    BaseView.prototype.showSelf = function (closeOther, isModel, uiLayer) {
        if (isModel) {
            //以模式窗口弹出界面
            this.popup(closeOther);
        }
        else if (this.parent != uiLayer) {
            uiLayer.addChild(this);
        }
    };
    // public remove():void{
    //     if(this.parent){
    //         this.parent.removeChild(this);
    //     }
    // }
    BaseView.prototype.destroy = function (destroyChild) {
        _super.prototype.destroy.call(this, destroyChild);
    };
    return BaseView;
}(Laya.Dialog));
exports.default = BaseView;
<<<<<<< HEAD
},{}],34:[function(require,module,exports){
=======

},{}],36:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseView_1 = require("./BaseView");
var ConstName_1 = require("../ConstName");
var CommandChannel_1 = require("../controller/CommandChannel");
var MainView = /** @class */ (function (_super) {
    __extends(MainView, _super);
    function MainView() {
        var _this = _super.call(this) || this;
        _this._channel = CommandChannel_1.default.instance;
        return _this;
    }
    MainView.prototype.createView = function (view) {
        _super.prototype.createView.call(this, view);
        this.menu_btn.on(Laya.Event.CLICK, this, this.showMenuView);
        this.left_btn.on(Laya.Event.CLICK, this, this.moveScene, [1, 0]);
        this.right_btn.on(Laya.Event.CLICK, this, this.moveScene, [-1, 0]);
        this.down_btn.on(Laya.Event.CLICK, this, this.moveScene, [0, -1]);
        this.up_btn.on(Laya.Event.CLICK, this, this.moveScene, [0, 1]);
        this.moveSceneComplete();
    };
    MainView.prototype.showMenuView = function () {
        CommandChannel_1.default.instance.postCommand(ConstName_1.default.UI_CONTROLLER, ConstName_1.default.SHOW_VIEW_BY_NAME, [ConstName_1.default.MENU_VIEW]);
    };
    MainView.prototype.moveScene = function (toX, toY, evt) {
        this.left_btn.mouseEnabled = false;
        this.right_btn.mouseEnabled = false;
        this.up_btn.mouseEnabled = false;
        this.down_btn.mouseEnabled = false;
        var sceneLayer = this._channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.GET_SCENE_LAYER);
        var toDirX = sceneLayer.x;
        var toDirY = sceneLayer.y;
        /**具体场景数据需要表格配置，先写死 */
        if (toX > 0) {
            if (sceneLayer.x < 2 /**左边的场景数量 */ * Laya.stage.width) {
                toDirX = sceneLayer.x + Laya.stage.width;
            }
        }
        else if (toX < 0) {
            if (sceneLayer.x > -1 /**右边的场景数量 */ * Laya.stage.width) {
                toDirX = sceneLayer.x - Laya.stage.width;
            }
        }
        if (toY < 0) {
            if (sceneLayer.y > -1 /**下边的场景数量 */ * Laya.stage.height) {
                toDirY = sceneLayer.y - Laya.stage.height;
            }
        }
        else if (toY > 0) {
            if (sceneLayer.y < 0 /**上边的场景数量 */ * Laya.stage.height) {
                toDirY = sceneLayer.y + Laya.stage.height;
            }
        }
        Laya.Tween.to(sceneLayer, { x: toDirX, y: toDirY }, 200, null, Laya.Handler.create(this, this.moveSceneComplete));
    };
    //场景移动完毕后，根据场景id（其实就是坐标）来设置箭头的可见性
    MainView.prototype.moveSceneComplete = function () {
        var sceneLayer = this._channel.postCommand(ConstName_1.default.LAYER_CONTROLLER, ConstName_1.default.GET_SCENE_LAYER);
        //左右箭头
        if (sceneLayer.y == 0) {
            this.left_btn.visible = true;
            this.right_btn.visible = true;
            this.left_btn.mouseEnabled = true;
            this.right_btn.mouseEnabled = true;
            if (sceneLayer.x >= 2 /**左边的场景数量 */ * Laya.stage.width) {
                this.left_btn.visible = false;
            }
            if (sceneLayer.x <= -1 /**右边的场景数量 */ * Laya.stage.width) {
                this.right_btn.visible = false;
            }
        }
        else {
            this.left_btn.visible = false;
            this.right_btn.visible = false;
        }
        //上下箭头
        if (sceneLayer.x == 0) {
            this.up_btn.visible = true;
            this.down_btn.visible = true;
            this.up_btn.mouseEnabled = true;
            this.down_btn.mouseEnabled = true;
            if (sceneLayer.y <= -1 /**下边的场景数量 */ * Laya.stage.height) {
                this.down_btn.visible = false;
            }
            if (sceneLayer.y >= 0 /**上边的场景数量 */ * Laya.stage.height) {
                this.up_btn.visible = false;
            }
        }
        else {
            this.up_btn.visible = false;
            this.down_btn.visible = false;
        }
    };
    MainView.prototype.destroy = function (destroyChild) {
        _super.prototype.destroy.call(this, destroyChild);
        this.left_btn.off(Laya.Event.CLICK, this, this.moveScene);
        this.right_btn.off(Laya.Event.CLICK, this, this.moveScene);
        this.down_btn.off(Laya.Event.CLICK, this, this.moveScene);
        this.up_btn.off(Laya.Event.CLICK, this, this.moveScene);
        this.left_btn = null;
        this.right_btn = null;
        this.down_btn = null;
        this.up_btn = null;
    };
    return MainView;
}(BaseView_1.default));
exports.default = MainView;
<<<<<<< HEAD
},{"../ConstName":4,"../controller/CommandChannel":10,"./BaseView":33}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseView_1 = require("./BaseView");
=======

},{"../ConstName":4,"../controller/CommandChannel":10,"./BaseView":35}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseView_1 = require("../BaseView");
var JsonConfig_1 = require("../../JsonConfig");
var ConstName_1 = require("../../ConstName");
var CommandChannel_1 = require("../../controller/CommandChannel");
var LoadManager_1 = require("../../manager/LoadManager");
var InstallationInfo = /** @class */ (function (_super) {
    __extends(InstallationInfo, _super);
    function InstallationInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InstallationInfo.prototype.createView = function (viewObj) {
        _super.prototype.createView.call(this, viewObj);
        this.use_btn.on(Laya.Event.CLICK, this, this.use);
        // Laya.stage.on(Laya.Event.CLICK,this,(e:Laya.Event)=>{
        //     alert(e.target.name);
        // });
    };
    InstallationInfo.prototype.use = function () {
        if (this.viewData) {
            CommandChannel_1.default.instance.postCommand(ConstName_1.default.GAME_CONTROLLER, ConstName_1.default.GAME_ADD_INSTALLATION, this.viewData);
        }
    };
    InstallationInfo.prototype.showSelf = function (closeOther, isModel, uiLayer) {
        _super.prototype.showSelf.call(this, closeOther, isModel, uiLayer);
        var viewData = this.viewData;
        if (viewData) {
            this.icon.skin = LoadManager_1.default.getIconUrl(viewData.type, viewData.id);
            this.title_txt.text = viewData.installationItemName;
            this.des_txt.text = viewData.descript;
            var menuVo = JsonConfig_1.default.ins.getVo(ConstName_1.default.MENU_VIEW);
            var propertyList = viewData.propertyList;
            for (var i = 1, len = propertyList.length; i <= len; i++) {
                var propertyArr = propertyList[i - 1].split("_");
                this["item_txt_" + i].text = menuVo.propertype[propertyArr[0]] + "   +" + propertyArr[1];
            }
        }
    };
    InstallationInfo.prototype.close = function () {
        _super.prototype.close.call(this);
        Laya.Dialog.manager.maskLayer.removeSelf();
    };
    return InstallationInfo;
}(BaseView_1.default));
exports.default = InstallationInfo;

},{"../../ConstName":4,"../../JsonConfig":7,"../../controller/CommandChannel":10,"../../manager/LoadManager":22,"../BaseView":35}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CommandChannel_1 = require("../../controller/CommandChannel");
var ConstName_1 = require("../../ConstName");
var LoadManager_1 = require("../../manager/LoadManager");
var InstallationItem = /** @class */ (function (_super) {
    __extends(InstallationItem, _super);
    function InstallationItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InstallationItem.prototype.renderView = function () {
        this.owned = this.getChildByName("owned");
        this.owned.visible = false;
        this.icon = this.getChildByName("icon");
        var data = this.dataSource;
        this.icon.skin = LoadManager_1.default.getIconUrl(data.type, data.id);
        this.on(Laya.Event.CLICK, this, this.showInfo);
    };
    InstallationItem.prototype.showInfo = function () {
        var data = this.dataSource;
        if (data != null) {
            CommandChannel_1.default.instance.postCommand(ConstName_1.default.UI_CONTROLLER, ConstName_1.default.UI_SHOW_VIEW_BY_NAME, [ConstName_1.default.INSTALLATION_INFO, data]);
        }
    };
    InstallationItem.prototype.destroy = function (destroyChild) {
        _super.prototype.destroy.call(this, destroyChild);
        this.off(Laya.Event.CLICK, this, this.showInfo);
        this.owned = null;
        this.icon = null;
    };
    return InstallationItem;
}(Laya.Box));
exports.default = InstallationItem;

},{"../../ConstName":4,"../../controller/CommandChannel":10,"../../manager/LoadManager":22}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var InstallationListItem = /** @class */ (function (_super) {
    __extends(InstallationListItem, _super);
    function InstallationListItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InstallationListItem.prototype.renderList = function (cellItem, index) {
        cellItem.renderView();
    };
    InstallationListItem.prototype.renderView = function () {
        var dataSource = this.dataSource;
        this.title_txt = this.getChildByName("title_txt");
        this.installationList = this.getChildByName("installationList");
        this.installationList.renderHandler = new Laya.Handler(this, this.renderList);
        this.installationList.repeatY = Math.ceil(dataSource.installationItemList.length / this.installationList.repeatX);
        this.height = (this.height) * this.installationList.repeatY;
        this.title_txt.text = dataSource.installationName;
        this.installationList.array = dataSource.installationItemList;
    };
    InstallationListItem.prototype.destroy = function (destroyChild) {
        _super.prototype.destroy.call(this, destroyChild);
        this.title_txt = null;
        this.installationList = null;
    };
    return InstallationListItem;
}(Laya.Box));
exports.default = InstallationListItem;

},{}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseView_1 = require("../BaseView");
var JsonConfig_1 = require("../../JsonConfig");
var CommandChannel_1 = require("../../controller/CommandChannel");
var ConstName_1 = require("../../ConstName");
>>>>>>> origin/master
var MenuView = /** @class */ (function (_super) {
    __extends(MenuView, _super);
    function MenuView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MenuView;
}(BaseView_1.default));
exports.default = MenuView;
<<<<<<< HEAD
},{"./BaseView":33}],36:[function(require,module,exports){
=======

},{"../../ConstName":4,"../../JsonConfig":7,"../../controller/CommandChannel":10,"../BaseView":35}],41:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseVo = /** @class */ (function () {
    function BaseVo() {
    }
    BaseVo.prototype.init = function (obj, jsonObj) {
    };
    return BaseVo;
}());
exports.default = BaseVo;
<<<<<<< HEAD
},{}],37:[function(require,module,exports){
=======

},{}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseVo_1 = require("./BaseVo");
var InstallationItemVo = /** @class */ (function (_super) {
    __extends(InstallationItemVo, _super);
    function InstallationItemVo() {
        return _super.call(this) || this;
    }
    InstallationItemVo.prototype.init = function (obj) {
        var propNo = 0;
        this.installationItemName = obj[propNo++];
        this.id = obj[propNo++];
        this.descript = obj[propNo++];
        this.sizeArr = obj[propNo++];
        this.propertyList = obj[propNo++];
    };
    return InstallationItemVo;
}(BaseVo_1.default));
exports.default = InstallationItemVo;

},{"./BaseVo":41}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseVo_1 = require("./BaseVo");
var InstallationItemVo_1 = require("./InstallationItemVo");
var InstallationListItemVo = /** @class */ (function (_super) {
    __extends(InstallationListItemVo, _super);
    function InstallationListItemVo() {
        return _super.call(this) || this;
    }
    InstallationListItemVo.prototype.init = function (obj) {
        var propNo = 0;
        this.installationName = obj[propNo++];
        this.type = obj[propNo++];
        this.posArr = obj[propNo++];
        this.installationItemList = this.decode(obj[propNo++]);
    };
    InstallationListItemVo.prototype.decode = function (itemList) {
        var installationItemList = [];
        for (var len = itemList.length, i = 0; i < len; i++) {
            var installationItemVo = new InstallationItemVo_1.default();
            installationItemVo.type = this.type;
            installationItemVo.posArr = this.posArr;
            installationItemVo.init(itemList[i]);
            installationItemList.push(installationItemVo);
        }
        return installationItemList;
    };
    return InstallationListItemVo;
}(BaseVo_1.default));
exports.default = InstallationListItemVo;

},{"./BaseVo":41,"./InstallationItemVo":42}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseVo_1 = require("./BaseVo");
var InstallationListItemVo_1 = require("./InstallationListItemVo");
var MenuVo = /** @class */ (function (_super) {
    __extends(MenuVo, _super);
    function MenuVo() {
        return _super.call(this) || this;
    }
    MenuVo.prototype.init = function (jsonObj) {
        this.menuList = this.decodeList(jsonObj.menuList);
        this.menuInfo = jsonObj.menuInfo;
        this.propertype = jsonObj.propertype;
    };
    MenuVo.prototype.decodeList = function (itemList) {
        var InstallationVoList = [];
        for (var len = itemList.length, i = 0; i < len; i++) {
            var installationVo = new InstallationListItemVo_1.default();
            installationVo.init(itemList[i]);
            InstallationVoList.push(installationVo);
        }
        return InstallationVoList;
    };
    return MenuVo;
}(BaseVo_1.default));
exports.default = MenuVo;

},{"./BaseVo":41,"./InstallationListItemVo":43}],45:[function(require,module,exports){
>>>>>>> origin/master
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseVo_1 = require("./BaseVo");
var ViewConfigVo = /** @class */ (function (_super) {
    __extends(ViewConfigVo, _super);
    function ViewConfigVo() {
        return _super.call(this) || this;
    }
    ViewConfigVo.prototype.init = function (obj, jsonObj) {
        var propNo = 0;
        this.viewName = obj[propNo++];
        this.resourceUrl = obj[propNo++];
        this.closeOther = obj[propNo++];
        this.isModel = obj[propNo++];
        jsonObj[this.viewName] = this;
    };
    return ViewConfigVo;
}(BaseVo_1.default));
exports.default = ViewConfigVo;
<<<<<<< HEAD
},{"./BaseVo":36}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======

},{"./BaseVo":41}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL0FwcGxpY2F0aW9ucy9MYXlhQWlySURFLmFwcC9Db250ZW50cy9SZXNvdXJjZXMvYXBwL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvR2FtZUNvbmZpZy50cyIsInNyYy9NYWluLnRzIiwic3JjL2NvbXBvbmVudC9Db21wX3NjZW5lX2xheWVyLnRzIiwic3JjL2dhbWUvQ29uc3ROYW1lLnRzIiwic3JjL2dhbWUvR2FtZUV2ZW50LnRzIiwic3JjL2dhbWUvR2FtZUdsb2JhbC50cyIsInNyYy9nYW1lL0pzb25Db25maWcudHMiLCJzcmMvZ2FtZS9TY2VuZVNwcml0ZS50cyIsInNyYy9nYW1lL2NvbnRyb2xsZXIvQmF0dGxlQ29udHJvbGxlci50cyIsInNyYy9nYW1lL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWwudHMiLCJzcmMvZ2FtZS9jb250cm9sbGVyL0NvbnRyb2xsZXIudHMiLCJzcmMvZ2FtZS9jb250cm9sbGVyL0dhbWVDb250cm9sbGVyLnRzIiwic3JjL2dhbWUvY29udHJvbGxlci9MYXllckNvbnRyb2xsZXIudHMiLCJzcmMvZ2FtZS9jb250cm9sbGVyL0xvYWRDb250cm9sbGVyLnRzIiwic3JjL2dhbWUvY29udHJvbGxlci9Sb2xlQ29udHJvbGxlci50cyIsInNyYy9nYW1lL2NvbnRyb2xsZXIvVUlDb250cm9sbGVyLnRzIiwic3JjL2dhbWUvbWFuYWdlci9CYXNlTWFuYWdlci50cyIsInNyYy9nYW1lL21hbmFnZXIvR2FtZU1hbmFnZXIudHMiLCJzcmMvZ2FtZS9tYW5hZ2VyL0hpdE1hbmFnZXIudHMiLCJzcmMvZ2FtZS9tYW5hZ2VyL0lucHV0TWFuYWdlci50cyIsInNyYy9nYW1lL21hbmFnZXIvTGF5ZXJNYW5hZ2VyLnRzIiwic3JjL2dhbWUvbWFuYWdlci9Mb2FkTWFuYWdlci50cyIsInNyYy9nYW1lL21hbmFnZXIvUm9sZU1hbmFnZXIudHMiLCJzcmMvZ2FtZS9tYW5hZ2VyL1NjZW5lTGF5ZXJNYW5hZ2VyLnRzIiwic3JjL2dhbWUvbWFuYWdlci9VSUxheWVyTWFuYWdlci50cyIsInNyYy9nYW1lL21hbmFnZXIvVUlNYW5hZ2VyLnRzIiwic3JjL2dhbWUvcHJveHkvRGF0YVByb3h5LnRzIiwic3JjL2dhbWUvcHJveHkvSW5zdGFsbGF0aW9uUHJveHkudHMiLCJzcmMvZ2FtZS9yb2xlL0FjdGlvbkNvbnRyb2xsLnRzIiwic3JjL2dhbWUvcm9sZS9CYXNlQW5pbWF0aW9uLnRzIiwic3JjL2dhbWUvcm9sZS9FbmVteS50cyIsInNyYy9nYW1lL3JvbGUvR2FtZUFuaW1hdGlvbi50cyIsInNyYy9nYW1lL3JvbGUvSGVyby50cyIsInNyYy9nYW1lL3JvbGUvUm9sZS50cyIsInNyYy9nYW1lL3ZpZXdzL0Jhc2VWaWV3LnRzIiwic3JjL2dhbWUvdmlld3MvTWFpblZpZXcudHMiLCJzcmMvZ2FtZS92aWV3cy9tZW51L0luc3RhbGxhdGlvbkluZm8udHMiLCJzcmMvZ2FtZS92aWV3cy9tZW51L0luc3RhbGxhdGlvbkl0ZW0udHMiLCJzcmMvZ2FtZS92aWV3cy9tZW51L0luc3RhbGxhdGlvbkxpc3RJdGVtLnRzIiwic3JjL2dhbWUvdmlld3MvbWVudS9NZW51Vmlldy50cyIsInNyYy9nYW1lL3ZvL0Jhc2VWby50cyIsInNyYy9nYW1lL3ZvL0luc3RhbGxhdGlvbkl0ZW1Wby50cyIsInNyYy9nYW1lL3ZvL0luc3RhbGxhdGlvbkxpc3RJdGVtVm8udHMiLCJzcmMvZ2FtZS92by9NZW51Vm8udHMiLCJzcmMvZ2FtZS92by9WaWV3Q29uZmlnVm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDVkEsZ0dBQWdHO0FBQ2hHLGtEQUE0QztBQUM1Qyx1RUFBaUU7QUFDakUsa0RBQTRDO0FBQzVDLHVEQUFpRDtBQUNqRCwrRUFBeUU7QUFDekUsdUVBQWlFO0FBQ2pFOztFQUVFO0FBQ0Y7SUFhSTtJ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LCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cclxuaW1wb3J0IFNjZW5lU3ByaXRlIGZyb20gXCIuL2dhbWUvU2NlbmVTcHJpdGVcIlxuaW1wb3J0IEluc3RhbGxhdGlvbkluZm8gZnJvbSBcIi4vZ2FtZS92aWV3cy9tZW51L0luc3RhbGxhdGlvbkluZm9cIlxuaW1wb3J0IE1haW5WaWV3IGZyb20gXCIuL2dhbWUvdmlld3MvTWFpblZpZXdcIlxuaW1wb3J0IE1lbnVWaWV3IGZyb20gXCIuL2dhbWUvdmlld3MvbWVudS9NZW51Vmlld1wiXG5pbXBvcnQgSW5zdGFsbGF0aW9uTGlzdEl0ZW0gZnJvbSBcIi4vZ2FtZS92aWV3cy9tZW51L0luc3RhbGxhdGlvbkxpc3RJdGVtXCJcbmltcG9ydCBJbnN0YWxsYXRpb25JdGVtIGZyb20gXCIuL2dhbWUvdmlld3MvbWVudS9JbnN0YWxsYXRpb25JdGVtXCJcclxuLypcclxuKiDmuLjmiI/liJ3lp4vljJbphY3nva47XHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb25maWd7XHJcbiAgICBzdGF0aWMgd2lkdGg6bnVtYmVyPTk2MDtcclxuICAgIHN0YXRpYyBoZWlnaHQ6bnVtYmVyPTEyODA7XHJcbiAgICBzdGF0aWMgc2NhbGVNb2RlOnN0cmluZz1cInNob3dhbGxcIjtcclxuICAgIHN0YXRpYyBzY3JlZW5Nb2RlOnN0cmluZz1cInZlcnRpY2FsXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25WOnN0cmluZz1cIm1pZGRsZVwiO1xyXG4gICAgc3RhdGljIGFsaWduSDpzdHJpbmc9XCJjZW50ZXJcIjtcclxuICAgIHN0YXRpYyBzdGFydFNjZW5lOmFueT1cInNjZW5lL3NfMS5zY2VuZVwiO1xyXG4gICAgc3RhdGljIHNjZW5lUm9vdDpzdHJpbmc9XCJcIjtcclxuICAgIHN0YXRpYyBkZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIHN0YXQ6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBwaHlzaWNzRGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBleHBvcnRTY2VuZVRvSnNvbjpib29sZWFuPXRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuICAgIHN0YXRpYyBpbml0KCl7XHJcbiAgICAgICAgdmFyIHJlZzogRnVuY3Rpb24gPSBMYXlhLkNsYXNzVXRpbHMucmVnQ2xhc3M7XHJcbiAgICAgICAgcmVnKFwiZ2FtZS9TY2VuZVNwcml0ZS50c1wiLFNjZW5lU3ByaXRlKTtcbiAgICAgICAgcmVnKFwiZ2FtZS92aWV3cy9tZW51L0luc3RhbGxhdGlvbkluZm8udHNcIixJbnN0YWxsYXRpb25JbmZvKTtcbiAgICAgICAgcmVnKFwiZ2FtZS92aWV3cy9NYWluVmlldy50c1wiLE1haW5WaWV3KTtcbiAgICAgICAgcmVnKFwiZ2FtZS92aWV3cy9tZW51L01lbnVWaWV3LnRzXCIsTWVudVZpZXcpO1xuICAgICAgICByZWcoXCJnYW1lL3ZpZXdzL21lbnUvSW5zdGFsbGF0aW9uTGlzdEl0ZW0udHNcIixJbnN0YWxsYXRpb25MaXN0SXRlbSk7XG4gICAgICAgIHJlZyhcImdhbWUvdmlld3MvbWVudS9JbnN0YWxsYXRpb25JdGVtLnRzXCIsSW5zdGFsbGF0aW9uSXRlbSk7XHJcbiAgICB9XHJcbn1cclxuR2FtZUNvbmZpZy5pbml0KCk7IiwiaW1wb3J0IEdhbWVDb25maWcgZnJvbSBcIi4vR2FtZUNvbmZpZ1wiO1xuaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuL2dhbWUvY29udHJvbGxlci9Db21tYW5kQ2hhbm5lbFwiO1xuaW1wb3J0IENvbnN0TmFtZSBmcm9tIFwiLi9nYW1lL0NvbnN0TmFtZVwiO1xuaW1wb3J0IENvbXBfc2NlbmVfbGF5ZXIgZnJvbSBcIi4vY29tcG9uZW50L0NvbXBfc2NlbmVfbGF5ZXJcIjtcbmNsYXNzIE1haW4ge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvL+agueaNrklEReiuvue9ruWIneWni+WMluW8leaTjlx0XHRcblx0XHRpZiAod2luZG93W1wiTGF5YTNEXCJdKSBMYXlhM0QuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCk7XG5cdFx0ZWxzZSBMYXlhLmluaXQoR2FtZUNvbmZpZy53aWR0aCwgR2FtZUNvbmZpZy5oZWlnaHQsIExheWFbXCJXZWJHTFwiXSk7XG5cdFx0TGF5YVtcIlBoeXNpY3NcIl0gJiYgTGF5YVtcIlBoeXNpY3NcIl0uZW5hYmxlKCk7XG5cdFx0TGF5YVtcIkRlYnVnUGFuZWxcIl0gJiYgTGF5YVtcIkRlYnVnUGFuZWxcIl0uZW5hYmxlKCk7XG5cdFx0TGF5YS5zdGFnZS5zY2FsZU1vZGUgPSBHYW1lQ29uZmlnLnNjYWxlTW9kZTtcblx0XHRMYXlhLnN0YWdlLnNjcmVlbk1vZGUgPSBHYW1lQ29uZmlnLnNjcmVlbk1vZGU7XG5cdFx0TGF5YS5zdGFnZS5iZ0NvbG9yID0gXCIweDQ0NDQ0XCI7XG5cdFx0TGF5YS5zdGFnZS5hbGlnbkggPSBcImNlbnRlclwiOy8v6K6+572u5rC05bmz5bGF5Lit5a+56b2QXG5cdFx0Ly/orr7nva7lnoLnm7TlsYXkuK3lr7npvZDvvIxTdGFnZS5BTElHTl9NSURETEUg5bi46YeP562J5Lu35LqOIG1pZGRsZSDlrZfnrKbkuLJcblx0XHRMYXlhLnN0YWdlLmFsaWduViA9IExheWEuU3RhZ2UuQUxJR05fTUlERExFO1xuXHRcdGlmKExheWEuQnJvd3Nlci5vblBDKSBMYXlhLnN0YWdlLnNjcmVlbk1vZGUgPSBMYXlhLlN0YWdlLlNDUkVFTl9IT1JJWk9OVEFMO1xuXHRcdC8v5YW85a655b6u5L+h5LiN5pSv5oyB5Yqg6L29c2NlbmXlkI7nvIDlnLrmma9cblx0XHRMYXlhLlVSTC5leHBvcnRTY2VuZVRvSnNvbiA9IEdhbWVDb25maWcuZXhwb3J0U2NlbmVUb0pzb247XG5cblx0XHQvL+aJk+W8gOiwg+ivlemdouadv++8iOmAmui/h0lEReiuvue9ruiwg+ivleaooeW8j++8jOaIluiAhXVybOWcsOWdgOWinuWKoGRlYnVnPXRydWXlj4LmlbDvvIzlnYflj6/miZPlvIDosIPor5XpnaLmnb/vvIlcblx0XHRpZiAoR2FtZUNvbmZpZy5kZWJ1ZyB8fCBMYXlhLlV0aWxzLmdldFF1ZXJ5U3RyaW5nKFwiZGVidWdcIikgPT0gXCJ0cnVlXCIpIExheWEuZW5hYmxlRGVidWdQYW5lbCgpO1xuXHRcdGlmIChHYW1lQ29uZmlnLnBoeXNpY3NEZWJ1ZyAmJiBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXSkgTGF5YVtcIlBoeXNpY3NEZWJ1Z0RyYXdcIl0uZW5hYmxlKCk7XG5cdFx0aWYgKEdhbWVDb25maWcuc3RhdCkgTGF5YS5TdGF0LnNob3coKTtcblx0XHRMYXlhLmFsZXJ0R2xvYmFsRXJyb3IgPSB0cnVlO1xuXHRcdExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcyhcImNvbXBvbmVudC5Db21wX3NjZW5lX2xheWVyXCIsQ29tcF9zY2VuZV9sYXllcik7XG5cdFx0Ly/mv4DmtLvotYTmupDniYjmnKzmjqfliLbvvIx2ZXJzaW9uLmpzb27nlLFJREXlj5HluIPlip/og73oh6rliqjnlJ/miJDvvIzlpoLmnpzmsqHmnInkuZ/kuI3lvbHlk43lkI7nu63mtYHnqItcblx0XHRMYXlhLlJlc291cmNlVmVyc2lvbi5lbmFibGUoXCJ2ZXJzaW9uLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uVmVyc2lvbkxvYWRlZCksIExheWEuUmVzb3VyY2VWZXJzaW9uLkZJTEVOQU1FX1ZFUlNJT04pO1xuXHRcdENvbW1hbmRDaGFubmVsLmluc3RhbmNlLmluaXQoKTtcblxuXHR9LyogICovXG5cblx0b25WZXJzaW9uTG9hZGVkKCk6IHZvaWQge1xuXHRcdC8v5r+A5rS75aSn5bCP5Zu+5pig5bCE77yM5Yqg6L295bCP5Zu+55qE5pe25YCZ77yM5aaC5p6c5Y+R546w5bCP5Zu+5Zyo5aSn5Zu+5ZCI6ZuG6YeM6Z2i77yM5YiZ5LyY5YWI5Yqg6L295aSn5Zu+5ZCI6ZuG77yM6ICM5LiN5piv5bCP5Zu+XG5cdFx0TGF5YS5BdGxhc0luZm9NYW5hZ2VyLmVuYWJsZShcImZpbGVjb25maWcuanNvblwiLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIHRoaXMub25Db25maWdMb2FkZWQpKTtcblx0fVxuXG5cdG9uQ29uZmlnTG9hZGVkKCk6IHZvaWQge1xuXHRcdC8v5Yqg6L29SURF5oyH5a6a55qE5Zy65pmvXG5cdFx0Ly8gR2FtZUNvbmZpZy5zdGFydFNjZW5lICYmIExheWEuU2NlbmUub3BlbihHYW1lQ29uZmlnLnN0YXJ0U2NlbmUpO1xuXHRcdC8vIENvbW1hbmRDaGFubmVsLmluc3RhbmNlLmluaXQoKTtcblx0fVxufVxuLy/mv4DmtLvlkK/liqjnsbtcbm5ldyBNYWluKCk7XG4iLCIvKirlnLrmma/liIblsYLnu4Tku7bvvIzkuLvopoHnlKjkuo7orr7nva5cbiAqIOWcuuaZr+avj+S4quWxgue6p+eahOS7peS4i+WxnuaAp1xuICogMS7pgJ/luqZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcF9zY2VuZV9sYXllciBleHRlbmRzIExheWEuQm94IHtcbiAgICAvL+e8qeaUvuaXtumXtDEwMOavq+enklxuICAgIHB1YmxpYyBzcGVlZDogbnVtYmVyID0gMDtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnN0TmFtZVxue1xuXHQvKirlhajlsYDkv6Hmga/kuK3lv4MgKi9cblx0cHVibGljIHN0YXRpYyAgR0FNRV9DT05UUk9MTEVSOm51bWJlciA9IDEwMDE7XG5cdC8qKuWIm+W7uuinkuiJsiAqL1xuXHRwdWJsaWMgc3RhdGljICBHQU1FX0NSRUFURV9IRVJPOm51bWJlciA9IDEwMDI7XG5cdHB1YmxpYyBzdGF0aWMgIEdBTUVfVEVTVF9DT01NQU5EQ0hBTk5FTDpudW1iZXIgPSAxMDAzO1xuXHQvKirmt7vliqDorr7mlr3liLDlnLrmma8gKi9cblx0cHVibGljIHN0YXRpYyBHQU1FX0FERF9JTlNUQUxMQVRJT046bnVtYmVyID0gMTAwNDtcblxuXHQvKirliqDovb3mjqfliLbkuK3lv4MqL1xuXHRwdWJsaWMgc3RhdGljICBMT0FEX0NPTlRST0xMRVI6bnVtYmVyID0gMjAwMTtcblx0cHVibGljIHN0YXRpYyAgTE9BRF9BRERfVE9fTE9BRF9MSVNUOm51bWJlciA9IDIwMDI7XG5cdHB1YmxpYyBzdGF0aWMgIExPQURfU1RBUlRfTE9BRDpudW1iZXIgPSAyMDAzO1xuXHRcblx0Lyoq5Lq654mp55u45YWz5o6n5Yi25Lit5b+DICovXG5cdHB1YmxpYyBzdGF0aWMgIFJPTEVfQ09OVFJPTExFUjpudW1iZXIgPSAzMDAxO1xuXHQvKirmoLnmja7op5LoibJpZOiOt+WPluinkuiJsiAqL1xuXHRwdWJsaWMgc3RhdGljICBST0xFX0dFVF9ST0xFX0JZX0lEOm51bWJlciA9IDMwMDI7XG5cdC8qKuWIm+W7uuinkuiJsuWIsOiInuWPsOS4iiAqL1xuXHRwdWJsaWMgc3RhdGljICBST0xFX0FERF9IRVJPOm51bWJlciA9IDMwMDM7XG5cdC8qKuiuvue9ruinkuiJsueahOWcuuaZr+enu+WKqOmAn+W6piAqL1xuXHRwdWJsaWMgc3RhdGljICBST0xFX1NDRU5FX1NQRUVEOm51bWJlciA9IDMwMDQ7XG5cdC8qKuiOt+WPluinkuiJsuWIl+ihqCAqL1xuXHRwdWJsaWMgc3RhdGljICBST0xFX0dFVF9IRVJPX0xJU1Q6bnVtYmVyID0gMzAwNTtcblx0Lyoq6I635Y+W5pWM5Lq65YiX6KGoICovXG5cdHB1YmxpYyBzdGF0aWMgIFJPTEVfR0VUX0VORU1ZX0xJU1Q6bnVtYmVyID0gMzAwNjtcblx0Lyoq5Yib5bu65pWM5Lq65Yiw6Iie5Y+w5LiKXG5cdCAqIHBhcmFtczpBcnJheT0gW3JvbGVOYW1lOnN0cmluZyxyb2xlSWQ6bnVtYmVyLHBvczpQb251bWJlcl1cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgIFJPTEVfQUREX0VORU1ZOm51bWJlciA9IDMwMDc7XG5cdFxuXHQvKip1aeeVjOmdouaOp+WItuS4reW/gyAqL1xuXHRwdWJsaWMgc3RhdGljICBVSV9DT05UUk9MTEVSOm51bWJlciA9IDQwMDE7XG5cdC8qKuagueaNrmlk5pi+56S655WM6Z2iICovXG5cdHB1YmxpYyBzdGF0aWMgIFVJX1NIT1dfVklFV19CWV9OQU1FOm51bWJlciA9IDQwMDI7XG5cdC8qKuagueaNrmlk56e76Zmk55WM6Z2iICovXG5cdHB1YmxpYyBzdGF0aWMgVUlfUkVNT1ZFX1ZJRVdfQllfTkFNRTpudW1iZXIgPSA0MDAzO1xuXHQvKirmoLnmja5pZOmUgOavgeeVjOmdoiAqL1xuXHRwdWJsaWMgc3RhdGljIFVJX0RFU1RST1lfVklFV19CWV9OQU1FOm51bWJlciA9IDQwMDQ7XG5cdFxuXHQvKipVSeeVjOmdouaemuS4viovXG5cdHB1YmxpYyBzdGF0aWMgIE1BSU5fVklFVzpzdHJpbmcgPSBcIk1BSU5fVklFV1wiOyAvL+S4u+eVjOmdolxuXHRwdWJsaWMgc3RhdGljICBNRU5VX1ZJRVc6c3RyaW5nID0gXCJNRU5VX1ZJRVdcIjsgLy/oj5zljZXnlYzpnaJcblx0cHVibGljIHN0YXRpYyAgSU5TVEFMTEFUSU9OX0lORk86c3RyaW5nID0gXCJJTlNUQUxMQVRJT05fSU5GT1wiOyAvL+iuvuaWveS/oeaBr+eVjOmdolxuXHRcblx0XG5cdC8qKua4uOaIj+Wxgue6p+aOp+WItuS4reW/gyovXG5cdHB1YmxpYyBzdGF0aWMgIExBWUVSX0NPTlRST0xMRVI6bnVtYmVyID0gNjAwMTtcblx0Lyoq5Yib5bu65Zy65pmvKi9cblx0cHVibGljIHN0YXRpYyAgTEFZRVJfQ1JFQVRFX1NDRU5FOm51bWJlciA9IDYwMDI7XG5cdC8qKuiOt+WPluWcuuaZr+WxgiAqL1xuXHRwdWJsaWMgc3RhdGljIExBWUVSX0dFVF9TQ0VORV9MQVlFUjpudW1iZXIgPSA2MDAzO1xuXHQvKirojrflj5Z1aeWxgiAqL1xuXHRwdWJsaWMgc3RhdGljIExBWUVSX0dFVF9VSV9MQVlFUjpudW1iZXIgPSA2MDA0O1xuXHQvKirmoLnmja7lkI3lrZfojrflj5Z1aeWxguWtkOWxgue6pyAqL1xuXHRwdWJsaWMgc3RhdGljIExBWUVSX0dFVF9VSV9MQVlFUl9CWV9OQU1FOm51bWJlciA9IDYwMDU7XG5cdC8qKuagueaNruWQjeWtl+iOt+WPluWcuuaZr+WxguWtkOWxgue6pyAqL1xuXHRwdWJsaWMgc3RhdGljIExBWUVSX0dFVF9TQ0VORV9MQVlFUl9CWV9OQU1FOm51bWJlciA9IDYwMDY7XG5cblx0Lyoq5oiY5paX5o6n5Yi25Lit5b+DICovXG5cdHB1YmxpYyBzdGF0aWMgIEJBVFRMRV9DT05UUk9MTEVSOm51bWJlciA9IDcwMDE7XG5cdC8qKuWIm+W7uuWtkOW8uee7hCAqL1xuXHRwdWJsaWMgc3RhdGljICBCQVRUTEVfQ1JFQVRFX0JVTExFVF9HUk9VUDpudW1iZXIgPSA3MDAyO1xuXG5cdC8qKuinkuiJsuWKqOS9nOWQjeensCAqL1xuXHRwdWJsaWMgc3RhdGljICBBVFRBQ0s6c3RyaW5nID0gXCJhdHRhY2tcIjtcblx0cHVibGljIHN0YXRpYyAgTU9WRTpzdHJpbmcgPSBcIm1vdmVcIjtcblx0XG5cdC8qKua4uOaIj+Wxgue6p+WQjeensO+8jOeUqOadpeiOt+WPluWvueW6lOWxgue6p+aXtueahGlkICovXG5cdHB1YmxpYyBzdGF0aWMgV09STERfTEFZRVI6c3RyaW5nID0gXCJXT1JMRF9MQVlFUlwiOyAvL+S4lueVjOaAu+WuueWZqO+8jOmZpHVp5bGCXG5cdHB1YmxpYyBzdGF0aWMgVUlfTEFZRVI6c3RyaW5nID0gXCJVSV9MQVlFUlwiOyAvL3Vp5oC75a655ZmoXG5cblx0LyoqVUnlsYLnuqfntKLlvJUgKi9cblx0cHVibGljIHN0YXRpYyAgTUFJTl9VSV9MQVlFUjpzdHJpbmcgPSBcIk1BSU5fVUlfTEFZRVJcIjtcblx0cHVibGljIHN0YXRpYyAgQUxFUlRfVUlfTEFZRVI6c3RyaW5nID0gXCJBTEVSVF9VSV9MQVlFUlwiO1xuXHRwdWJsaWMgc3RhdGljICBUSVBfVUlfTEFZRVI6c3RyaW5nID0gXCJUSVBfVUlfTEFZRVJcIjtcblxuXHQvKirop5LoibLlsYLnuqfntKLlvJUgKi9cblx0cHVibGljIHN0YXRpYyAgUk9MRV9MQVlFUjpzdHJpbmcgPSBcIlJPTEVfTEFZRVJcIjtcblx0cHVibGljIHN0YXRpYyAgQlVMTEVUX0xBWUVSOnN0cmluZyA9IFwiQlVMTEVUX0xBWUVSXCI7XG5cdHB1YmxpYyBzdGF0aWMgIEVGRkVDVF9MQVlFUjpzdHJpbmcgPSBcIkVGRkVDVF9MQVlFUlwiO1xuXG5cdC8qKuS6i+S7tuWQjeensCAqL1xuXHRwdWJsaWMgc3RhdGljICBGSVJTVF9MT0FEX0NPTVBMRVRFOnN0cmluZyA9IFwiZmlyc3RfbG9hZF9jb21wbGV0ZVwiO1xuXHRwdWJsaWMgc3RhdGljICBLRVlfRE9XTjpzdHJpbmcgPSBcImtleV9kb3duXCI7XG5cdHB1YmxpYyBzdGF0aWMgIEtFWV9VUDpzdHJpbmcgPSBcImtleV91cFwiO1xuXHRwdWJsaWMgc3RhdGljICBTSE9XX1ZJRVc6c3RyaW5nID0gXCJPUEVOX1ZJRVdcIjtcblx0cHVibGljIHN0YXRpYyAgQ0xPU0VfVklFVzpzdHJpbmcgPSBcIkNMT1NFX1ZJRVdcIjtcblxuXHQvKirmlbDmja7lpITnkIblkI3np7AgKi9cblx0cHVibGljIHN0YXRpYyBQUk9YWV9JTlNUQUxMQVRJT047Ly/orr7mlr3mlbDmja5cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lRXZlbnQgZXh0ZW5kcyBMYXlhLkV2ZW50RGlzcGF0Y2hlciB7XG4gICAgLy/lhajlsYDkuovku7bljZXkvotcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zOiBHYW1lRXZlbnQ7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGlucygpOiBHYW1lRXZlbnQge1xuICAgICAgICAhR2FtZUV2ZW50Ll9pbnMgJiYgKEdhbWVFdmVudC5faW5zID0gbmV3IEdhbWVFdmVudCgpKTtcbiAgICAgICAgcmV0dXJuIEdhbWVFdmVudC5faW5zO1xuICAgIH1cbn0gIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUdsb2JhbHtcbiAgICAvKiDluKfnjocgKi9cbiAgICBwdWJsaWMgc3RhdGljICBHQU1FX0ZSQVRFOm51bWJlciA9IDMwO1xuICAgIC8qKuinkuiJsuexu+aWh+S7tiAqL1xuICAgIHB1YmxpYyBzdGF0aWMgIFJPTEU6bnVtYmVyID0gMDtcbiAgICAvKirog4zmma/pn7PkuZDnsbvmlofku7YgKi9cbiAgICBwdWJsaWMgc3RhdGljICBNVVNJQzpudW1iZXIgPSAxO1xuICAgIC8qKumfs+aViOexu+aWh+S7tiAqL1xuICAgIHB1YmxpYyBzdGF0aWMgIFNPVU5EOm51bWJlciA9IDI7XG4gICAgLyoq5a2Q5by557G75paH5Lu2ICovXG4gICAgcHVibGljIHN0YXRpYyAgQlVMTEVUOm51bWJlciA9IDM7XG4gICAgLyoqdWnnsbvmlofku7YgKi9cbiAgICBwdWJsaWMgc3RhdGljICBVSTpudW1iZXIgPSA0O1xuICAgIC8qKnNjZW5l57G75paH5Lu2ICovXG4gICAgcHVibGljIHN0YXRpYyAgU0NFTkU6bnVtYmVyID0gNTtcbiAgICAvKirms5Xlrp3nsbvmlofku7YgKi9cbiAgICBwdWJsaWMgc3RhdGljICBGQUJBTzpudW1iZXIgPSA2O1xuICAgIC8qKmpzb27nsbvmlofku7YgKi9cbiAgICBwdWJsaWMgc3RhdGljICBKU09OOm51bWJlciA9IDc7XG4gICAgLyrnu5/kuIDotYTmupDmoLnot6/lvoQgKi9cbiAgICBwdWJsaWMgc3RhdGljICBSRVNPVVJDRV9CQVNFX1BBVEg6c3RyaW5nID0gXCIuL3Jlc291cmNlL1wiO1xuICAgIC8qKuinkuiJsuaWh+S7tuaguei3r+W+hCAqL1xuICAgIHB1YmxpYyBzdGF0aWMgIFJFU09VUkNFX1JPTEVfUEFUSDpzdHJpbmcgPSBcIi4vcmVzb3VyY2Uvcm9sZS9cIjtcbiAgICAvKirpn7PmlYjmlofku7bmoLnot6/lvoQgKi9cbiAgICBwdWJsaWMgc3RhdGljICBSRVNPVVJDRV9TT1VORF9QQVRIOnN0cmluZyA9IFwiLi9yZXNvdXJjZS9zb3VuZC9cIjtcbiAgICAvKipVSeaWh+S7tuaguei3r+W+hCAqL1xuICAgIHB1YmxpYyBzdGF0aWMgIFJFU09VUkNFX1VJX1BBVEg6c3RyaW5nID0gXCIuL3Jlc291cmNlL3VpL1wiO1xuICAgIC8qKnNjZW5l5paH5Lu25qC56Lev5b6EICovXG4gICAgcHVibGljIHN0YXRpYyAgUkVTT1VSQ0VfU0NFTkVfUEFUSDpzdHJpbmcgPSBcIi4vcmVzb3VyY2Uvc2NlbmUvXCI7XG4gICAgLyoqanNvbumFjee9ruaWh+S7tuaguei3r+W+hCAqL1xuICAgIHB1YmxpYyBzdGF0aWMgIFJFU09VUkNFX0pTT05fUEFUSDpzdHJpbmcgPSBcIi4vcmVzb3VyY2UvanNvbi9cIjtcbn0gIiwiaW1wb3J0IEdhbWVFdmVudCBmcm9tIFwiLi9HYW1lRXZlbnRcIjtcbmltcG9ydCBDb25zdE5hbWUgZnJvbSBcIi4vQ29uc3ROYW1lXCI7XG5pbXBvcnQgVmlld0NvbmZpZ1ZvIGZyb20gXCIuL3ZvL1ZpZXdDb25maWdWb1wiO1xuaW1wb3J0IE1lbnVWbyBmcm9tIFwiLi92by9NZW51Vm9cIjtcbmltcG9ydCBCYXNlVm8gZnJvbSBcIi4vdm8vQmFzZVZvXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpzb25Db25maWd7XG4gICAgcHJpdmF0ZSBzdGF0aWMgIF9pbnM6SnNvbkNvbmZpZztcbiAgICAvKiDop5LoibLlrZDlvLnnm7jlhbPlsZ7mgKfphY3nva4gKi9cbiAgICBwdWJsaWMgc3RhdGljICBidWxsZXRQb3NKc29uOk9iamVjdDtcbiAgICAvKiDop5LoibLnm7jlhbPlsZ7mgKfphY3nva4gKi9cbiAgICBwdWJsaWMgc3RhdGljICByb2xlU2V0dGluZ0pzb246T2JqZWN0O1xuICAgIC8qIOWtkOW8ueebuOWFs+WxnuaAp+mFjee9riAqL1xuICAgIHB1YmxpYyBzdGF0aWMgIGJ1bGxldENvbmZpZ0pzb246T2JqZWN0O1xuICAgIC8qKuazleWuneebuOWFs+WxnuaAp+mFjee9riAqL1xuICAgIHB1YmxpYyBzdGF0aWMgIGZiQ29uZmlnVm9Kc29uOk9iamVjdDtcbiAgICAvKirnlYzpnaLmiZPlvIDlhbPpl63kv6Hmga/nm7jlhbPphY3nva4gKi9cbiAgICBwdWJsaWMgc3RhdGljICB2aWV3Q29uZmlnVm9Kc29uOk9iamVjdDtcbiAgICAvKipqc29u5ZKM5a+55bqU55qEVm/nsbvmmKDlsITlhbPns7sgKi9cbiAgICBwdWJsaWMganNvblRvVm9IYXNoOk9iamVjdDtcbiAgICAvKirnlYzpnaLlr7nlupR2b+aVsOaNriAqL1xuICAgIHB1YmxpYyB1aVZvSGFzaDpPYmplY3Q7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5qc29uVG9Wb0hhc2ggPSB7fTtcbiAgICAgICAgdGhpcy51aVZvSGFzaCA9IHt9O1xuICAgICAgICB0aGlzLnJlZ0pzb25Ub1ZvKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyAgZ2V0IGlucygpOkpzb25Db25maWcge1xuICAgICAgICAhSnNvbkNvbmZpZy5faW5zICYmIChKc29uQ29uZmlnLl9pbnMgPSBuZXcgSnNvbkNvbmZpZygpKTtcbiAgICAgICAgcmV0dXJuIEpzb25Db25maWcuX2lucztcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnSnNvblRvVm8oKTp2b2lke1xuICAgICAgICB0aGlzLmpzb25Ub1ZvSGFzaFtDb25zdE5hbWUuTUVOVV9WSUVXXSA9IE1lbnVWbztcbiAgICB9XG5cbiAgICBwdWJsaWMgIGluaXRKc29uKCk6dm9pZCB7XG4gICAgICAgIC8vIEdhbWVFdmVudC5pbnMuZXZlbnQoQ29uc3ROYW1lLkZJUlNUX0xPQURfQ09NUExFVEUpO1xuICAgICAgICB2YXIgY29uZmlnSnNvbjogT2JqZWN0ID0gd2luZG93W1wiY29uZmlnSnNvblwiXTtcbiAgICAgICAgLy8gSnNvbkNvbmZpZy5idWxsZXRQb3NKc29uID0gdGhpcy5jcmVhdGVKc29uQnlJZChjb25maWdKc29uW1wiYnVsbGV0UG9zXCJdLEJ1bGxldFBvc1ZvKTtcbiAgICAgICAgLy8gSnNvbkNvbmZpZy5yb2xlU2V0dGluZ0pzb24gPSB0aGlzLmNyZWF0ZUpzb25CeUlkKGNvbmZpZ0pzb25bXCJyb2xlU2V0dGluZ1wiXSxSb2xlU2V0dGluZ1ZvKTtcbiAgICAgICAgLy8gSnNvbkNvbmZpZy5idWxsZXRDb25maWdKc29uID0gdGhpcy5jcmVhdGVKc29uQnlJZChjb25maWdKc29uW1wiYnVsbGV0Q29uZmlnXCJdLEJ1bGxldENvbmZpZ1ZvKTtcbiAgICAgICAgLy8gSnNvbkNvbmZpZy5mYkNvbmZpZ1ZvSnNvbiA9IHRoaXMuY3JlYXRlSnNvbkJ5SWQoY29uZmlnSnNvbltcImZiQ29uZmlnXCJdLEZiQ29uZmlnVm8pO1xuICAgICAgICBKc29uQ29uZmlnLnZpZXdDb25maWdWb0pzb24gPSB0aGlzLmNyZWF0ZUpzb25CeUlkKGNvbmZpZ0pzb25bXCJ2aWV3Q29uZmlnXCJdLFZpZXdDb25maWdWbyk7XG4gICAgICAgIEdhbWVFdmVudC5pbnMuZXZlbnQoQ29uc3ROYW1lLkZJUlNUX0xPQURfQ09NUExFVEUpO1xuICAgIH1cblxuICAgIHB1YmxpYyAgc2V0Vm8odmlld05hbWU6c3RyaW5nLGpzb25PYmo6T2JqZWN0KTp2b2lke1xuICAgICAgICBsZXQgdmlld1ZvOkJhc2VWbyA9IG5ldyB0aGlzLmpzb25Ub1ZvSGFzaFt2aWV3TmFtZV0oKTtcbiAgICAgICAgdmlld1ZvLmluaXQoanNvbk9iaik7XG4gICAgICAgIHRoaXMudWlWb0hhc2hbdmlld05hbWVdID0gdmlld1ZvO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0Vm8odmlld05hbWU6c3RyaW5nKTpCYXNlVm97XG4gICAgICAgIHJldHVybiB0aGlzLnVpVm9IYXNoW3ZpZXdOYW1lXTtcbiAgICB9XG5cbiAgICBwcml2YXRlICBjcmVhdGVKc29uQnlJZChqc29uT2JqQXJyYXk6YW55LGNselZvOmFueSk6T2JqZWN0IHtcbiAgICAgICAgdmFyIG9iajpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG4gICAgICAgIGZvcih2YXIganNvbk9ialN0ciBpbiBqc29uT2JqQXJyYXkpIHtcbiAgICAgICAgICAgIChuZXcgY2x6Vm8oKSkuaW5pdChqc29uT2JqQXJyYXlbanNvbk9ialN0cl0sb2JqKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbn0gIiwiaW1wb3J0IENvbXBfc2NlbmVfbGF5ZXIgZnJvbSBcIi4uL2NvbXBvbmVudC9Db21wX3NjZW5lX2xheWVyXCJcblxuLyphbnlhbnlcbiBhbnkgLi4uXG4gYW55IEBhdXRob3IgandkXG4gYW55Ki9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lU3ByaXRlIGV4dGVuZHMgTGF5YS5TY2VuZVxue1xuXHRwdWJsaWMgIGZyb250TGF5ZXI6Q29tcF9zY2VuZV9sYXllcjtcblx0cHVibGljICByb2xlTGF5ZXI6Q29tcF9zY2VuZV9sYXllcjtcblx0cHVibGljICByZWFyTGF5ZXI6Q29tcF9zY2VuZV9sYXllcjtcblx0cHVibGljIGJ1dHRvbkxheWVyOkxheWEuQm94O1xuXHRwdWJsaWMgIGZyb250TGlzdDphbnk7XG5cdHB1YmxpYyAgbWlkZGxlTGlzdDphbnk7XG5cdHB1YmxpYyAgcmVhckxpc3Q6YW55O1xuXHQvKmFueWFueeS7peS4i+WPmOmHj+eUqOS6juWcuuaZr+enu+WKqOW+queOr++8jDwtLSB4eHhIZWFk77yI5aS077yJPC0tIHh4eEVuZCjlsL4pIDwtLSAgYW55Ki9cblx0cHVibGljICBmcm9udEVuZDphbnk7XG5cdHB1YmxpYyAgbWlkZGxlRW5kOmFueTtcblx0cHVibGljICByZWFyRW5kOmFueTtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoKSBcblx0e1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5tb3VzZUVuYWJsZWQgPSB0cnVlO1xuXHRcdC8v6buY6K6k5YWz6Zet5pe25YCZ5YWo6YOo6ZSA5q+BXG5cdFx0dGhpcy5hdXRvRGVzdHJveUF0Q2xvc2VkID0gdHJ1ZTtcblx0XHR0aGlzLmZyb250TGlzdCA9IFtdO1xuXHRcdHRoaXMubWlkZGxlTGlzdCA9IFtdO1xuXHRcdHRoaXMucmVhckxpc3QgPSBbXTtcblx0fVxuXG5cdHB1YmxpYyBjcmVhdGVWaWV3KHZpZXc6T2JqZWN0KTp2b2lkIHtcblx0XHRzdXBlci5jcmVhdGVWaWV3KHZpZXcpO1xuXG5cblx0XHQvLyBMYXlhLnN0YWdlLm9uKExheWEuRXZlbnQuQ0xJQ0ssdGhpcyx0aGlzLnRyYW5zZm9ybVNjZW5lLFsxLDBdKTtcblx0XHQvLyB2YXIgaTpudW1iZXIgPSAwO1xuXHRcdC8vIHdoaWxlKHRoaXNbXCJmcm9udF9cIitpXSkge1xuXHRcdC8vIFx0dGhpcy5mcm9udExpc3QucHVzaCh0aGlzW1wiZnJvbnRfXCIraV0pO1xuXHRcdC8vIFx0dGhpcy5mcm9udEVuZCA9IHRoaXNbXCJmcm9udF9cIitpXTtcblx0XHQvLyBcdGkrKztcblx0XHQvLyB9XG5cdFx0Ly8gaSA9IDA7XG5cdFx0Ly8gd2hpbGUodGhpc1tcIm1pZGRsZV9cIitpXSkge1xuXHRcdC8vIFx0dGhpcy5taWRkbGVMaXN0LnB1c2godGhpc1tcIm1pZGRsZV9cIitpXSk7XG5cdFx0Ly8gXHR0aGlzLm1pZGRsZUVuZCA9IHRoaXNbXCJtaWRkbGVfXCIraV07XG5cdFx0Ly8gXHRpKys7XG5cdFx0Ly8gfVxuXHRcdC8vIGkgPSAwO1xuXHRcdC8vIHdoaWxlKHRoaXNbXCJyZWFyX1wiK2ldKSB7XG5cdFx0Ly8gXHR0aGlzLnJlYXJMaXN0LnB1c2godGhpc1tcInJlYXJfXCIraV0pO1xuXHRcdC8vIFx0dGhpcy5yZWFyRW5kID0gdGhpc1tcInJlYXJfXCIraV07XG5cdFx0Ly8gXHRpKys7XG5cdFx0Ly8gfVxuXHR9XG5cblx0cHVibGljIGRlc3Ryb3koZGVzdHJveUNoaWxkOmJvb2xlYW4pOnZvaWR7XG5cdFx0c3VwZXIuZGVzdHJveShkZXN0cm95Q2hpbGQpO1xuXHR9XG5cdFxufSIsImltcG9ydCBDb250cm9sbGVyIGZyb20gXCIuL0NvbnRyb2xsZXJcIjtcbmltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi9Db21tYW5kQ2hhbm5lbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXR0bGVDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcntcbiAgICAvLyBwcml2YXRlICBfYnVsbGV0TWFuYWdlcjpCdWxsZXRNYW5hZ2VyO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihjaGFubmVsOkNvbW1hbmRDaGFubmVsKSB7XG4gICAgICAgIHN1cGVyKGNoYW5uZWwpO1xuICAgICAgICAvLyBfYnVsbGV0TWFuYWdlciA9IG5ldyBCdWxsZXRNYW5hZ2VyKGNoYW5uZWwpO1xuICAgICAgICAvLyB0aGlzLm1hbmFnZXJMaXN0LnB1c2goX2J1bGxldE1hbmFnZXIpO1xuICAgICAgICAvLyB0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLkJBVFRMRV9DUkVBVEVfQlVMTEVUX0dST1VQLF9idWxsZXRNYW5hZ2VyLF9idWxsZXRNYW5hZ2VyLmNyZWF0ZUJ1bGxldEdyb3VwKTtcbiAgICB9XG59IiwiaW1wb3J0IENvbnN0TmFtZSBmcm9tIFwiLi4vQ29uc3ROYW1lXCI7XG5cbmltcG9ydCBEYXRhUHJveHkgZnJvbSBcIi4uL3Byb3h5L0RhdGFQcm94eVwiO1xuaW1wb3J0IEdhbWVDb250cm9sbGVyIGZyb20gXCIuL0dhbWVDb250cm9sbGVyXCI7XG5pbXBvcnQgVUlDb250cm9sbGVyIGZyb20gXCIuL1VJQ29udHJvbGxlclwiO1xuaW1wb3J0IExvYWRDb250cm9sbGVyIGZyb20gXCIuL0xvYWRDb250cm9sbGVyXCI7XG5pbXBvcnQgTGF5ZXJDb250cm9sbGVyIGZyb20gXCIuL0xheWVyQ29udHJvbGxlclwiO1xuaW1wb3J0IFJvbGVDb250cm9sbGVyIGZyb20gXCIuL1JvbGVDb250cm9sbGVyXCI7XG5pbXBvcnQgQmF0dGxlQ29udHJvbGxlciBmcm9tIFwiLi9CYXR0bGVDb250cm9sbGVyXCI7XG5pbXBvcnQgQ29udHJvbGxlciBmcm9tIFwiLi9Db250cm9sbGVyXCI7XG5pbXBvcnQgSW5zdGFsbGF0aW9uUHJveHkgZnJvbSBcIi4uL3Byb3h5L0luc3RhbGxhdGlvblByb3h5XCI7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tYW5kQ2hhbm5lbHtcbiAgICBwcml2YXRlICBfY29udHJvbGxlckxpc3Q6T2JqZWN0PW5ldyBPYmplY3QoKTtcbiAgICBwcml2YXRlICBfZGF0YVByb3h5TGlzdDpPYmplY3Q9bmV3IE9iamVjdCgpO1xuICAgIHByaXZhdGUgc3RhdGljICBfaW5zdGFuY2U6Q29tbWFuZENoYW5uZWw7XG4gICAgcHVibGljICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29udHJvbGxlcihDb25zdE5hbWUuR0FNRV9DT05UUk9MTEVSLG5ldyBHYW1lQ29udHJvbGxlcih0aGlzKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb250cm9sbGVyKENvbnN0TmFtZS5VSV9DT05UUk9MTEVSLG5ldyBVSUNvbnRyb2xsZXIodGhpcykpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29udHJvbGxlcihDb25zdE5hbWUuTE9BRF9DT05UUk9MTEVSLG5ldyBMb2FkQ29udHJvbGxlcih0aGlzKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb250cm9sbGVyKENvbnN0TmFtZS5MQVlFUl9DT05UUk9MTEVSLCBuZXcgTGF5ZXJDb250cm9sbGVyKHRoaXMpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbnRyb2xsZXIoQ29uc3ROYW1lLlJPTEVfQ09OVFJPTExFUixuZXcgUm9sZUNvbnRyb2xsZXIodGhpcykpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29udHJvbGxlcihDb25zdE5hbWUuQkFUVExFX0NPTlRST0xMRVIsbmV3IEJhdHRsZUNvbnRyb2xsZXIodGhpcykpO1xuICAgICAgICAvLyB0aGlzLnJlZ2lzdGVyQ29udHJvbGxlcihDb25zdERhdGEuU09VTkRfQ09OVFJPTExFUixuZXcgU291bmRDb250cm9sbGVyKHRoaXMpKTtcbiAgICAgICAgLy8gdGhpcy5yZWdpc3RlckNvbnRyb2xsZXIoQ29uc3REYXRhLkFQUF9DT05UUk9MTEVSLG5ldyBBcHBDb250cm9sbGVyKHRoaXMpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckRhdGFQcm94eShDb25zdE5hbWUuUFJPWFlfSU5TVEFMTEFUSU9OLG5ldyBJbnN0YWxsYXRpb25Qcm94eSh0aGlzKSk7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0KCk6dm9pZHtcbiAgICAgICAgZm9yKHZhciBjb250cm9sbGVyTmFtZSBpbiB0aGlzLl9jb250cm9sbGVyTGlzdCl7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sbGVyTGlzdFtjb250cm9sbGVyTmFtZV0uaW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIGZvcih2YXIgZGF0YVByb3h5TmFtZSBpbiB0aGlzLl9kYXRhUHJveHlMaXN0KXtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFQcm94eUxpc3RbZGF0YVByb3h5TmFtZV0uaW5pdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8v5Y2V5L6L5qih5byP6I635Y+W5ZG95Luk566h57q/77yM5YWo5bGA5ZSv5LiAXG4gICAgcHVibGljIHN0YXRpYyAgZ2V0IGluc3RhbmNlKCk6Q29tbWFuZENoYW5uZWx7XG4gICAgICAgICFDb21tYW5kQ2hhbm5lbC5faW5zdGFuY2UgJiYgKENvbW1hbmRDaGFubmVsLl9pbnN0YW5jZSA9IG5ldyBDb21tYW5kQ2hhbm5lbCgpKTtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRDaGFubmVsLl9pbnN0YW5jZTtcbiAgICAgICAgLy9yZXR1cm4gQ29tbWFuZENoYW5uZWwuX2luc3RhbmNlIT1udWxsP0NvbW1hbmRDaGFubmVsLl9pbnN0YW5jZTooQ29tbWFuZENoYW5uZWwuX2luc3RhbmNlPW5ldyBDb21tYW5kQ2hhbm5lbCgpLENvbW1hbmRDaGFubmVsLl9pbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgLy/ms6jlhozmjqfliLblmajvvIzpgJrov4djb21tbWFuZE5hbWXlkozlhbfkvZPnmoTmjqfliLblmajlhbPogZRcbiAgICBwdWJsaWMgcmVnaXN0ZXJDb250cm9sbGVyKGNvbnRyb2xsZXJOYW1lOm51bWJlcixjb250cm9sbGVyOkNvbnRyb2xsZXIpOnZvaWR7XG4gICAgICAgIGlmKCF0aGlzLl9jb250cm9sbGVyTGlzdC5oYXNPd25Qcm9wZXJ0eShjb250cm9sbGVyTmFtZSkpe1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbGxlckxpc3RbY29udHJvbGxlck5hbWVdPWNvbnRyb2xsZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL+agueaNrmNvbW1hbmROYW1l6I635Y+W5o6n5Yi25ZmoXG4gICAgcHVibGljIGdldENvbnRyb2xsZXIoY29udHJvbGxlck5hbWU6bnVtYmVyKTpDb250cm9sbGVye1xuICAgICAgICBpZih0aGlzLl9jb250cm9sbGVyTGlzdFtjb250cm9sbGVyTmFtZV0pe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xsZXJMaXN0W2NvbnRyb2xsZXJOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvL+aJp+ihjOWRveS7pFxuICAgIHB1YmxpYyBwb3N0Q29tbWFuZChjb250cm9sbGVyTmFtZTpudW1iZXIsY29tbWFuZE5hbWU6bnVtYmVyLHBhcmFtczphbnk9bnVsbCk6YW55e1xuICAgICAgICB2YXIgZ2V0Q29udHJvbGxlcjpDb250cm9sbGVyPXRoaXMuZ2V0Q29udHJvbGxlcihjb250cm9sbGVyTmFtZSk7XG4gICAgICAgIHJldHVybiBnZXRDb250cm9sbGVyIT1udWxsP2dldENvbnRyb2xsZXIuZXhlY3V0ZUNvbW1hbmQoY29tbWFuZE5hbWUscGFyYW1zKTpudWxsO1xuICAgIH1cblxuICAgIC8qKiBcbiAgICAgKiDms6jlhozmlbDmja7lpITnkIbkuK3lv4NcbiAgICAqL1xuICAgIHB1YmxpYyByZWdpc3RlckRhdGFQcm94eShkYXRhUHJveHlOYW1lOm51bWJlcixkYXRhUHJveHk6RGF0YVByb3h5KTp2b2lke1xuICAgICAgICBpZighdGhpcy5fZGF0YVByb3h5TGlzdC5oYXNPd25Qcm9wZXJ0eShkYXRhUHJveHlOYW1lKSl7XG4gICAgICAgICAgICB0aGlzLl9kYXRhUHJveHlMaXN0W2RhdGFQcm94eU5hbWVdPWRhdGFQcm94eTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBcbiAgICAgKiDms6jlhozlhbfkvZPmlbDmja7liLDmlbDmja7kuK3lv4NcbiAgICAqL1xuICAgIHB1YmxpYyBhZGRGdW5jVG9EYXRhUHJveHkoZGF0YVByb3h5TmFtZTpzdHJpbmcsZGF0YU5hbWU6bnVtYmVyLGZ1bmM6RnVuY3Rpb24sdGhpc09iajphbnkpOnZvaWR7XG4gICAgICAgIHZhciBkYXRhUHJveHk6RGF0YVByb3h5PXRoaXMuZ2V0RGF0YVByb3h5KGRhdGFQcm94eU5hbWUpO1xuICAgICAgICBkYXRhUHJveHkmJmRhdGFQcm94eS5hZGREYXRhRnVuYyhkYXRhTmFtZSxmdW5jLHRoaXNPYmopO1xuICAgIH1cblxuICAgIC8v5qC55o2uZGF0YVByb3h5TmFtZeiOt+WPluaOp+WItuWZqFxuICAgIHB1YmxpYyBnZXREYXRhUHJveHkoZGF0YVByb3h5TmFtZTpzdHJpbmcpOkRhdGFQcm94eXtcbiAgICAgICAgaWYodGhpcy5fZGF0YVByb3h5TGlzdFtkYXRhUHJveHlOYW1lXSl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVByb3h5TGlzdFtkYXRhUHJveHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKiogXG4gICAgICog5pWw5o2u5pS55Y+Y77yM5bm/5pKt5raI5oGvXG4gICAgKi9cbiAgICBwdWJsaWMgYnJvYWRDYXN0RGF0YShkYXRhUHJveHlOYW1lOnN0cmluZyxkYXRhTmFtZTpudW1iZXIscGFyYW1zOmFueT1udWxsKTphbnl7XG4gICAgICAgIHZhciBkYXRhUHJveHk6RGF0YVByb3h5PXRoaXMuZ2V0RGF0YVByb3h5KGRhdGFQcm94eU5hbWUpO1xuICAgICAgICByZXR1cm4gZGF0YVByb3h5IT1udWxsP2RhdGFQcm94eS5leGVjdXRlQ29tbWFuZChkYXRhTmFtZSxwYXJhbXMpOm51bGw7XG4gICAgfVxufSIsImltcG9ydCBCYXNlTWFuYWdlciBmcm9tIFwiLi4vbWFuYWdlci9CYXNlTWFuYWdlclwiO1xuaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuL0NvbW1hbmRDaGFubmVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xsZXJ7XG4gICAgcHJvdGVjdGVkICBjaGFubmVsOkNvbW1hbmRDaGFubmVsO1xuICAgIHByb3RlY3RlZCAgY29tbWFuZExpc3Q6T2JqZWN0PW5ldyBPYmplY3QoKTtcbiAgICBwcm90ZWN0ZWQgIG1hbmFnZXJMaXN0OkFycmF5PEJhc2VNYW5hZ2VyPiA9IFtdO1xuICAgIFxuICAgIHB1YmxpYyAgY29uc3RydWN0b3IoY2hhbm5lbDpDb21tYW5kQ2hhbm5lbCl7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkICBpbml0KCk6dm9pZCB7XG4gICAgICAgIGZvciAodmFyIGJhc2VNYW5hZ2VyTmFtZSBpbiB0aGlzLm1hbmFnZXJMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXJMaXN0W2Jhc2VNYW5hZ2VyTmFtZV0uaW5pdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8v5re75Yqg5ZG95LukXG4gICAgcHVibGljICBhZGRDb21tYW5kKGNvbW1hbmROYW1lOm51bWJlcixjYWxsZXI6YW55LGZ1bmM6RnVuY3Rpb24pOnZvaWR7XG4gICAgICAgIGlmKCF0aGlzLmNvbW1hbmRMaXN0Lmhhc093blByb3BlcnR5KGNvbW1hbmROYW1lKSl7XG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRMaXN0W2NvbW1hbmROYW1lXT1bY2FsbGVyLGZ1bmNdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy/miafooYzlkb3ku6RcbiAgICBwdWJsaWMgIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmROYW1lOm51bWJlcixwYXJhbXM6YW55KTphbnl7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRMaXN0W2NvbW1hbmROYW1lXSE9bnVsbD90aGlzLmNvbW1hbmRMaXN0W2NvbW1hbmROYW1lXVsxXS5jYWxsKHRoaXMuY29tbWFuZExpc3RbY29tbWFuZE5hbWVdWzBdLHBhcmFtcyk6bnVsbDtcbiAgICB9XG59ICIsImltcG9ydCBDb250cm9sbGVyIGZyb20gXCIuL0NvbnRyb2xsZXJcIjtcbmltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi9Db21tYW5kQ2hhbm5lbFwiO1xuaW1wb3J0IEdhbWVNYW5hZ2VyIGZyb20gXCIuLi9tYW5hZ2VyL0dhbWVNYW5hZ2VyXCI7XG5pbXBvcnQgQ29uc3ROYW1lIGZyb20gXCIuLi9Db25zdE5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUNvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVye1xuICAgIHByaXZhdGUgIF9nYW1lTWFuYWdlcjpHYW1lTWFuYWdlcjtcbiAgICBwdWJsaWMgIGNvbnN0cnVjdG9yKGNoYW5uZWw6Q29tbWFuZENoYW5uZWwpe1xuICAgICAgICBzdXBlcihjaGFubmVsKTtcbiAgICAgICAgdGhpcy5fZ2FtZU1hbmFnZXIgPSBuZXcgR2FtZU1hbmFnZXIodGhpcy5jaGFubmVsKTtcbiAgICAgICAgdGhpcy5tYW5hZ2VyTGlzdC5wdXNoKHRoaXMuX2dhbWVNYW5hZ2VyKTtcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKENvbnN0TmFtZS5HQU1FX1RFU1RfQ09NTUFORENIQU5ORUwsdGhpcy5fZ2FtZU1hbmFnZXIsdGhpcy5fZ2FtZU1hbmFnZXIudGVzdENvbW1hbmRDaGFubmVsKTtcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKENvbnN0TmFtZS5HQU1FX0FERF9JTlNUQUxMQVRJT04sdGhpcy5fZ2FtZU1hbmFnZXIsdGhpcy5fZ2FtZU1hbmFnZXIuYWRkSW5zdGFsbGF0aW9uKTtcbiAgICB9XG59IiwiaW1wb3J0IENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlclwiO1xuaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuL0NvbW1hbmRDaGFubmVsXCI7XG5pbXBvcnQgQ29uc3ROYW1lIGZyb20gXCIuLi9Db25zdE5hbWVcIjtcbmltcG9ydCBMYXllck1hbmFnZXIgZnJvbSBcIi4uL21hbmFnZXIvTGF5ZXJNYW5hZ2VyXCI7XG5cblx0LyoqXG5cdCAqIC4uLlxuXHQgKiBAYXV0aG9yIC4uLlxuXHQgKi9cblx0ZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5ZXJDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciBcblx0e1xuXHRcdHByaXZhdGUgX2xheWVyTWFuYWdlcjpMYXllck1hbmFnZXI7XG5cdFx0cHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWw6Q29tbWFuZENoYW5uZWwpIFxuXHRcdHtcblx0XHRcdHN1cGVyKGNoYW5uZWwpO1xuXHRcdFx0dGhpcy5fbGF5ZXJNYW5hZ2VyID0gbmV3IExheWVyTWFuYWdlcihjaGFubmVsKTtcblx0XHRcdHRoaXMubWFuYWdlckxpc3QucHVzaCh0aGlzLl9sYXllck1hbmFnZXIpO1xuXHRcdFx0dGhpcy5hZGRDb21tYW5kKENvbnN0TmFtZS5MQVlFUl9DUkVBVEVfU0NFTkUsIHRoaXMuX2xheWVyTWFuYWdlciwgdGhpcy5fbGF5ZXJNYW5hZ2VyLmNyZWF0ZVNjZW5lKTtcblx0XHRcdHRoaXMuYWRkQ29tbWFuZChDb25zdE5hbWUuTEFZRVJfR0VUX1NDRU5FX0xBWUVSLHRoaXMuX2xheWVyTWFuYWdlcix0aGlzLl9sYXllck1hbmFnZXIuZ2V0U2NlbmVMYXllcik7XG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLkxBWUVSX0dFVF9TQ0VORV9MQVlFUl9CWV9OQU1FLHRoaXMuX2xheWVyTWFuYWdlcix0aGlzLl9sYXllck1hbmFnZXIuZ2V0U2NlbmVMYXllckJ5TmFtZSk7XG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLkxBWUVSX0dFVF9VSV9MQVlFUix0aGlzLl9sYXllck1hbmFnZXIsdGhpcy5fbGF5ZXJNYW5hZ2VyLmdldFVJTGF5ZXIpO1xuXHRcdFx0dGhpcy5hZGRDb21tYW5kKENvbnN0TmFtZS5MQVlFUl9HRVRfVUlfTEFZRVJfQllfTkFNRSx0aGlzLl9sYXllck1hbmFnZXIsdGhpcy5fbGF5ZXJNYW5hZ2VyLmdldFVJTGF5ZXJCeU5hbWUpO1xuXHRcdH1cdFxuXHR9IiwiaW1wb3J0IENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlclwiO1xuaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuL0NvbW1hbmRDaGFubmVsXCI7XG5pbXBvcnQgQ29uc3ROYW1lIGZyb20gXCIuLi9Db25zdE5hbWVcIjtcbmltcG9ydCBMb2FkTWFuYWdlciBmcm9tIFwiLi4vbWFuYWdlci9Mb2FkTWFuYWdlclwiO1xuaW1wb3J0IEpzb25Db25maWcgZnJvbSBcIi4uL0pzb25Db25maWdcIjtcbmltcG9ydCBHYW1lR2xvYmFsIGZyb20gXCIuLi9HYW1lR2xvYmFsXCI7XG5cbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXJ7XG4gICAgICAgIHByaXZhdGUgX2ZpcnN0TG9hZExpc3Q6IGFueSA9IFtdO1xuICAgICAgICBwdWJsaWMgY29uc3RydWN0b3IoY2hhbm5lbDpDb21tYW5kQ2hhbm5lbCkge1xuICAgICAgICAgICAgc3VwZXIoY2hhbm5lbCk7XG4gICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLkxPQURfQUREX1RPX0xPQURfTElTVCx0aGlzLHRoaXMuYWRkVG9Mb2FkTGlzdCk7XG4gICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLkxPQURfU1RBUlRfTE9BRCx0aGlzLHRoaXMuc3RhcnRMb2FkKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRMb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKirliJ3lp4vliqDovb3nmoTotYTmupDpg73mlL7lnKjov5nph4wgKi9cbiAgICAgICAgcHJpdmF0ZSBzdGFydExvYWQoKTp2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0TG9hZExpc3QucHVzaCh7IHVybDogTG9hZE1hbmFnZXIuZ2V0VXJsKFwiY29uZmlnSnNvbi5qc29uXCIsR2FtZUdsb2JhbC5KU09OKSwgdHlwZTogTGF5YS5Mb2FkZXIuSlNPTiB9KTtcbiAgICAgICAgICAgIExheWEubG9hZGVyLmxvYWQodGhpcy5fZmlyc3RMb2FkTGlzdCxuZXcgTGF5YS5IYW5kbGVyKHRoaXMsdGhpcy5sb2FkQ29tcGxldGUpKTsgIFxuICAgICAgICAgICAgLy8gaWYoTGF5YS5Ccm93c2VyLm9uV2VpWGluKSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5fZmlyc3RMb2FkTGlzdC5wdXNoKHsgdXJsOiBMb2FkTWFuYWdlci5nZXRVcmwoXCIuL2NvbmZpZ0pzb24uanNvblwiKSwgdHlwZTogTGF5YS5Mb2FkZXIuSlNPTiB9KTtcbiAgICAgICAgICAgIC8vICAgICBMYXlhLmxvYWRlci5sb2FkKHRoaXMuX2ZpcnN0TG9hZExpc3QsbmV3IExheWEuSGFuZGxlcih0aGlzLHRoaXMubG9hZENvbXBsZXRlKSk7ICAgXG4gICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgIHZhciBzY3JpcHQ6YW55ID0gTGF5YS5Ccm93c2VyLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAvLyAgICAgc2NyaXB0LnNyYyA9IExvYWRNYW5hZ2VyLmdldFVybChcIi4vbmV3RmlnaHRKc29uLmpzXCIpO1xuICAgICAgICAgICAgLy8gICAgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbigpOnZvaWQge1xuICAgICAgICAgICAgLy8gICAgICAgICBKc29uQ29uZmlnLmlucy5pbml0SnNvbigpO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vICAgICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uKCk6dm9pZFxuICAgICAgICAgICAgLy8gICAgIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgYWxlcnQoXCLphY3nva7mlofku7bliqDovb3plJnor6/vvIzor7fliLfmlrDph43or5VcIik7XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gICAgIExheWEuQnJvd3Nlci5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cblxuICAgICAgICAvKirliqDlhaXotYTmupDliLDliqDovb3liJfooaggKi9cbiAgICAgICAgcHJpdmF0ZSBhZGRUb0xvYWRMaXN0KGRhdGE6YW55KTp2b2lkIHtcbiAgICAgICAgICAgIGlmKGRhdGEubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBkYXRhU3RyIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyc3RMb2FkTGlzdC5wdXNoKGRhdGFbZGF0YVN0cl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyc3RMb2FkTGlzdC5wdXNoKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwcml2YXRlIGxvYWRDb21wbGV0ZSgpOnZvaWQge1xuICAgICAgICAgICAgd2luZG93W1wiY29uZmlnSnNvblwiXSA9IExvYWRNYW5hZ2VyLmdldFJlcyhcImNvbmZpZ0pzb24uanNvblwiLEdhbWVHbG9iYWwuSlNPTik7XG4gICAgICAgICAgICBKc29uQ29uZmlnLmlucy5pbml0SnNvbigpO1xuICAgICAgICAgICAgLy8gR2FtZUV2ZW50Lmlucy5ldmVudChDb25zdE5hbWUuRklSU1RfTE9BRF9DT01QTEVURSk7XG4gICAgICAgIH1cbiAgICB9IiwiaW1wb3J0IENvbnRyb2xsZXIgZnJvbSBcIi4vQ29udHJvbGxlclwiO1xuaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuL0NvbW1hbmRDaGFubmVsXCI7XG5pbXBvcnQgUm9sZU1hbmFnZXIgZnJvbSBcIi4uL21hbmFnZXIvUm9sZU1hbmFnZXJcIjtcbmltcG9ydCBDb25zdE5hbWUgZnJvbSBcIi4uL0NvbnN0TmFtZVwiO1xuXG5cdC8qKlxuXHQgKiAuLi5cblx0ICogQGF1dGhvciBqd2Rcblx0ICovXG5cdGV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvbGVDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciBcblx0e1xuXHRcdHByaXZhdGUgX3JvbGVNYW5hZ2VyOlJvbGVNYW5hZ2VyO1xuXHRcdHB1YmxpYyBjb25zdHJ1Y3RvcihjaGFubmVsOkNvbW1hbmRDaGFubmVsKSBcblx0XHR7XG5cdFx0XHRzdXBlcihjaGFubmVsKTtcblx0XHRcdHRoaXMuX3JvbGVNYW5hZ2VyID0gbmV3IFJvbGVNYW5hZ2VyKHRoaXMuY2hhbm5lbCk7XG5cdFx0XHR0aGlzLm1hbmFnZXJMaXN0LnB1c2godGhpcy5fcm9sZU1hbmFnZXIpO1xuXHRcdFx0dGhpcy5hZGRDb21tYW5kKENvbnN0TmFtZS5ST0xFX0dFVF9ST0xFX0JZX0lELHRoaXMuX3JvbGVNYW5hZ2VyLHRoaXMuX3JvbGVNYW5hZ2VyLmdldEhlcm8pO1xuXHRcdFx0dGhpcy5hZGRDb21tYW5kKENvbnN0TmFtZS5ST0xFX0FERF9IRVJPLHRoaXMuX3JvbGVNYW5hZ2VyLHRoaXMuX3JvbGVNYW5hZ2VyLmFkZEhlcm8pO1xuXHRcdFx0dGhpcy5hZGRDb21tYW5kKENvbnN0TmFtZS5ST0xFX0FERF9FTkVNWSx0aGlzLl9yb2xlTWFuYWdlcix0aGlzLl9yb2xlTWFuYWdlci5hZGRFbmVteSk7XG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLlJPTEVfU0NFTkVfU1BFRUQsdGhpcy5fcm9sZU1hbmFnZXIsdGhpcy5fcm9sZU1hbmFnZXIuc2V0U2NlbmVTcGVlZCk7XG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLlJPTEVfR0VUX0hFUk9fTElTVCx0aGlzLl9yb2xlTWFuYWdlcix0aGlzLl9yb2xlTWFuYWdlci5nZXRIZXJvTGlzdCk7XG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLlJPTEVfR0VUX0VORU1ZX0xJU1QsdGhpcy5fcm9sZU1hbmFnZXIsdGhpcy5fcm9sZU1hbmFnZXIuZ2V0RW5lbXlMaXN0KTtcblx0XHR9XHRcblx0fSIsImltcG9ydCBDb250cm9sbGVyIGZyb20gXCIuL0NvbnRyb2xsZXJcIjtcbmltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi9Db21tYW5kQ2hhbm5lbFwiO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tIFwiLi4vbWFuYWdlci9VSU1hbmFnZXJcIjtcbmltcG9ydCBDb25zdE5hbWUgZnJvbSBcIi4uL0NvbnN0TmFtZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSUNvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVye1xuICAgIHByaXZhdGUgX3VpTWFuYWdlcjpVSU1hbmFnZXI7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWw6Q29tbWFuZENoYW5uZWwpe1xuICAgICAgICBzdXBlcihjaGFubmVsKTtcbiAgICAgICAgdGhpcy5fdWlNYW5hZ2VyID0gbmV3IFVJTWFuYWdlcihjaGFubmVsKTtcbiAgICAgICAgdGhpcy5tYW5hZ2VyTGlzdC5wdXNoKHRoaXMuX3VpTWFuYWdlcik7XG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZChDb25zdE5hbWUuVUlfU0hPV19WSUVXX0JZX05BTUUsdGhpcy5fdWlNYW5hZ2VyLHRoaXMuX3VpTWFuYWdlci5zaG93Vmlldyk7XG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZChDb25zdE5hbWUuVUlfUkVNT1ZFX1ZJRVdfQllfTkFNRSx0aGlzLl91aU1hbmFnZXIsdGhpcy5fdWlNYW5hZ2VyLnJlbW92ZVZpZXdCeU5hbWUpO1xuICAgICAgICB0aGlzLmFkZENvbW1hbmQoQ29uc3ROYW1lLlVJX0RFU1RST1lfVklFV19CWV9OQU1FLHRoaXMuX3VpTWFuYWdlcix0aGlzLl91aU1hbmFnZXIuZGVzdHJveVZpZXdCeU5hbWUpO1xuICAgIH1cbn0iLCJpbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSAnLi4vY29udHJvbGxlci9Db21tYW5kQ2hhbm5lbCc7XG4vKipcbiAqIOeuoeeQhuWZqOeahOWfuuexu++8jOS4u+imgeWunueOsOeuoeeQhuWZqOeahOWIneWni+WMlu+8jFxuICog6ZSA5q+B562J5Z+65pys5pON5L2cXG4gKiBAYXV0aG9yIGp3ZFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlTWFuYWdlciBcbntcblx0cHJvdGVjdGVkICBjaGFubmVsOkNvbW1hbmRDaGFubmVsO1xuXHRwdWJsaWMgY29uc3RydWN0b3IoY2hhbm5lbDpDb21tYW5kQ2hhbm5lbCA9IG51bGwpXG5cdHtcblx0XHR0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuXHR9XG5cblx0cHVibGljICBpbml0KCk6dm9pZCB7XG5cdH1cblx0XG5cdHB1YmxpYyAgZGVzdHJveSgpOnZvaWQge1xuXHRcdFxuXHR9XG59IiwiaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuL0Jhc2VNYW5hZ2VyXCI7XG5pbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSBcIi4uL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWxcIjtcbmltcG9ydCBJbnB1dE1hbmFnZXIgZnJvbSBcIi4vSW5wdXRNYW5hZ2VyXCI7XG5pbXBvcnQgSGl0TWFuYWdlciBmcm9tIFwiLi9IaXRNYW5hZ2VyXCI7XG5pbXBvcnQgR2FtZUV2ZW50IGZyb20gXCIuLi9HYW1lRXZlbnRcIjtcbmltcG9ydCBDb25zdE5hbWUgZnJvbSBcIi4uL0NvbnN0TmFtZVwiO1xuaW1wb3J0IExvYWRNYW5hZ2VyIGZyb20gXCIuL0xvYWRNYW5hZ2VyXCI7XG5pbXBvcnQgR2FtZUdsb2JhbCBmcm9tIFwiLi4vR2FtZUdsb2JhbFwiO1xuaW1wb3J0IEluc3RhbGxhdGlvbkl0ZW1WbyBmcm9tIFwiLi4vdm8vSW5zdGFsbGF0aW9uSXRlbVZvXCI7XG5cblx0LyoqXG5cdCAqIC4uLlxuXHQgKiBAYXV0aG9yIGp3ZFxuXHQgKi9cblx0ZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZU1hbmFnZXIgZXh0ZW5kcyBCYXNlTWFuYWdlciBcblx0e1xuXG5cdFx0cHJpdmF0ZSAgX2lucHV0TWFuYWdlcjpJbnB1dE1hbmFnZXI7XG5cdFx0cHJpdmF0ZSAgX2hpdE1hbmFnZXI6SGl0TWFuYWdlcjtcblx0XHRwdWJsaWMgY29uc3RydWN0b3IoY2hhbm5lbDpDb21tYW5kQ2hhbm5lbCkge1xuXHRcdFx0c3VwZXIoY2hhbm5lbCk7XG5cdFx0XHR0aGlzLl9pbnB1dE1hbmFnZXIgPSBuZXcgSW5wdXRNYW5hZ2VyKGNoYW5uZWwpO1xuXHRcdFx0dGhpcy5faGl0TWFuYWdlciA9IG5ldyBIaXRNYW5hZ2VyKGNoYW5uZWwpO1xuXHRcdH1cblx0XHRcblx0XHRwdWJsaWMgaW5pdCgpOnZvaWQge1xuXHRcdFx0R2FtZUV2ZW50Lmlucy5vbihDb25zdE5hbWUuRklSU1RfTE9BRF9DT01QTEVURSx0aGlzLHRoaXMuaW5pdEdhbWUpO1xuXHRcdH1cblx0XHRcblx0XHRwcml2YXRlICByb2xlSWQ6bnVtYmVyID0gMjtcblx0XHRwcml2YXRlIGluaXRHYW1lKCk6dm9pZCB7XG5cdFx0XHQvLyB0aGlzLmNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLlJPTEVfQ09OVFJPTExFUixDb25zdE5hbWUuUk9MRV9BRERfSEVSTyxbXCJmZW1hbGVcIiwwLG5ldyBMYXlhLlBvaW50KDQwMCwxMDApXSk7XG5cdFx0XHQvL+S4tOaXtuWGmeauteeUn+aIkGVubWV555qE6YC76L6R77yM5LmL5ZCO5aSE55CGXG5cdFx0XHRmb3IobGV0IGkgPSAwO2k8MTA7aSsrKXtcblx0XHRcdFx0dGhpcy5jcmVhdGVFbmVteSgpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTGF5YS50aW1lci5sb29wKDYwMCx0aGlzLHRoaXMuY3JlYXRlRW5lbXkpO1xuXHRcdFx0dGhpcy5jaGFubmVsLnBvc3RDb21tYW5kKENvbnN0TmFtZS5MQVlFUl9DT05UUk9MTEVSLENvbnN0TmFtZS5MQVlFUl9DUkVBVEVfU0NFTkUsWydzXzEnXSk7XG5cdFx0XHQvLyB0aGlzLl9pbnB1dE1hbmFnZXIuc2V0SW5wdXRTdHlsZSgpO1xuXHRcdFx0dGhpcy5jaGFubmVsLnBvc3RDb21tYW5kKENvbnN0TmFtZS5VSV9DT05UUk9MTEVSLENvbnN0TmFtZS5VSV9TSE9XX1ZJRVdfQllfTkFNRSxbQ29uc3ROYW1lLk1BSU5fVklFV10pO1xuXHRcdFx0Ly8gdGhpcy5faGl0TWFuYWdlci5pbml0KCk7XG5cdFx0XHQvLyBMYXlhLlNvdW5kTWFuYWdlci5wbGF5TXVzaWMoTG9hZE1hbmFnZXIuZ2V0VXJsKFwiYmdtLm1wM1wiLEdhbWVHbG9iYWwuTVVTSUMpKTtcblx0XHR9XG5cblx0XHRwcml2YXRlICBlbmVteU5hbWVBcnI6IHN0cmluZ1tdID0gW1wibV8xXCIsXCJtXzJcIixcIm1fM1wiLFwibV80XCJdO1xuXHRcdHByaXZhdGUgY3JlYXRlRW5lbXkoKTp2b2lkIHtcblx0XHRcdHZhciByYW5kb206bnVtYmVyID0gTWF0aC5yYW5kb20oKSoxMDA7XG5cdFx0XHRpZihyYW5kb20+IDIwKXtcblx0XHRcdFx0dGhpcy5yb2xlSWQrKztcblx0XHRcdFx0dmFyIHJhbmRvbU5hbWU6c3RyaW5nID0gdGhpcy5lbmVteU5hbWVBcnJbcGFyc2VJbnQoTWF0aC5yYW5kb20oKSp0aGlzLmVuZW15TmFtZUFyci5sZW5ndGggKyBcIlwiKV07XG5cdFx0XHRcdHRoaXMuY2hhbm5lbC5wb3N0Q29tbWFuZChDb25zdE5hbWUuUk9MRV9DT05UUk9MTEVSLENvbnN0TmFtZS5ST0xFX0FERF9FTkVNWSxbcmFuZG9tTmFtZSx0aGlzLnJvbGVJZCxuZXcgTGF5YS5Qb2ludCgtNTYwICsgTWF0aC5yYW5kb20oKSoyMjQwLE1hdGgucmFuZG9tKCkqKExheWEuc3RhZ2UuaGVpZ2h0LTEwMCkpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cHVibGljIHRlc3RDb21tYW5kQ2hhbm5lbCgpe1xuXHRcdFx0YWxlcnQoXCLlkb3ku6TnrqHnur/osIPor5XmiJDlip/vvIzlj6/ku6XlvIDlt6XkuoZcIik7XG5cdFx0fVxuXG5cdFx0cHVibGljIGFkZEluc3RhbGxhdGlvbihkYXRhOkluc3RhbGxhdGlvbkl0ZW1Wbyk6dm9pZHtcblx0XHRcdGxldCByb2xlTGF5ZXI6TGF5YS5TcHJpdGUgPSB0aGlzLmNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLkxBWUVSX0NPTlRST0xMRVIsQ29uc3ROYW1lLkxBWUVSX0dFVF9TQ0VORV9MQVlFUl9CWV9OQU1FLENvbnN0TmFtZS5ST0xFX0xBWUVSKTtcblx0XHRcdGxldCBpbnN0YWxsYXRpb25JbWFnZTpMYXlhLkltYWdlID0gbmV3IExheWEuSW1hZ2UoKTtcblx0XHRcdGluc3RhbGxhdGlvbkltYWdlLnNraW4gPSBMb2FkTWFuYWdlci5nZXRJY29uVXJsKGRhdGEudHlwZSxkYXRhLmlkKTtcblx0XHRcdGluc3RhbGxhdGlvbkltYWdlLnBvcyhkYXRhLnBvc0FyclswXSxkYXRhLnBvc0FyclsxXSk7XG5cdFx0XHRpbnN0YWxsYXRpb25JbWFnZS53aWR0aCA9IGRhdGEuc2l6ZUFyclswXTtcblx0XHRcdGluc3RhbGxhdGlvbkltYWdlLmhlaWdodCA9IGRhdGEuc2l6ZUFyclsxXTtcblx0XHRcdHJvbGVMYXllci5hZGRDaGlsZChpbnN0YWxsYXRpb25JbWFnZSk7XG5cdFx0XHR0aGlzLmNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLlVJX0NPTlRST0xMRVIsQ29uc3ROYW1lLlVJX1JFTU9WRV9WSUVXX0JZX05BTUUsQ29uc3ROYW1lLklOU1RBTExBVElPTl9JTkZPKTtcblx0XHRcdHRoaXMuY2hhbm5lbC5wb3N0Q29tbWFuZChDb25zdE5hbWUuVUlfQ09OVFJPTExFUixDb25zdE5hbWUuVUlfUkVNT1ZFX1ZJRVdfQllfTkFNRSxDb25zdE5hbWUuTUVOVV9WSUVXKTtcblx0XHR9XG5cblx0fSIsImltcG9ydCBCYXNlTWFuYWdlciBmcm9tIFwiLi9CYXNlTWFuYWdlclwiO1xuaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuLi9jb250cm9sbGVyL0NvbW1hbmRDaGFubmVsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhpdE1hbmFnZXIgZXh0ZW5kcyBCYXNlTWFuYWdlcntcbiAgICAvLyBwcml2YXRlICBfaGVyb0xpc3Q6QXJyYXk8YW55PjtcbiAgICAvLyBwcml2YXRlICBfYnVsbGV0R3JvdXBMaXN0OkFycmF5LjxCYXNlQnVsbGV0R3JvdXA+O1xuICAgIC8vIHByaXZhdGUgIF9lbmVteUxpc3Q6QXJyYXkuPEVuZW15PlxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihjaGFubmVsOkNvbW1hbmRDaGFubmVsKXtcbiAgICAgICAgc3VwZXIoY2hhbm5lbCk7XG4gICAgICAgIC8vIF9idWxsZXRHcm91cExpc3QgPSBuZXcgQXJyYXkuPEJhc2VCdWxsZXRHcm91cD47XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQoKTp2b2lke1xuICAgICAgICAvLyBMYXlhLnRpbWVyLmxvb3AoMzAsdGhpcyx0aGlzLnVwZGF0ZSk7XG4gICAgICAgIC8vIF9oZXJvTGlzdCA9IHRoaXMuY2hhbm5lbC5wb3N0Q29tbWFuZChDb25zdE5hbWUuUk9MRV9DT05UUk9MTEVSLENvbnN0TmFtZS5ST0xFX0dFVF9IRVJPX0xJU1QpIGFzIEFycmF5LjxIZXJvPjtcbiAgICAgICAgLy8gX2VuZW15TGlzdCA9IHRoaXMuY2hhbm5lbC5wb3N0Q29tbWFuZChDb25zdE5hbWUuUk9MRV9DT05UUk9MTEVSLENvbnN0TmFtZS5ST0xFX0dFVF9FTkVNWV9MSVNUKSBhcyBBcnJheS48RW5lbXk+O1xuICAgICAgICAvLyBmb3IgZWFjaCh2YXIgaGVybzpSb2xlIGluIF9oZXJvTGlzdCkge1xuICAgICAgICAvLyAgICAgX2J1bGxldEdyb3VwTGlzdC5wdXNoKGhlcm8uYnVsbGV0R3JvdXApO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICrmo4DmtYvnorDmkp7kuLvlvqrnjq9cbiAgICAgKumcgOimgeeJueWIq+azqOaEj++8jOaAp+iDvVxuICAgICAq6ZqP5pe26L+b6KGM5LyY5YyWXG4gICAgICovXG4gICAgcHJpdmF0ZSAgdXBkYXRlKCk6dm9pZCB7XG4gICAgICAgIC8vIHZhciBhdHRhY2tSZWN0OlJlY3RhbmdsZTtcbiAgICAgICAgLy8gdmFyIGhpdFJlY3Q6UmVjdGFuZ2xlO1xuXG4gICAgICAgIC8vIGZvciBlYWNoKHZhciBidWxsZXRHcm91cDpCYXNlQnVsbGV0R3JvdXAgaW4gX2J1bGxldEdyb3VwTGlzdCkge1xuICAgICAgICAvLyAgICAgdmFyIGJ1bGxldExpc3Q6QXJyYXkuPEJ1bGxldEFuaW1hdGlvbj4gPSBidWxsZXRHcm91cC5idWxsZXRMaXN0O1xuICAgICAgICAvLyAgICAgZm9yIGVhY2godmFyIGJ1bGxldDpCdWxsZXRBbmltYXRpb24gaW4gYnVsbGV0TGlzdCkge1xuICAgICAgICAvLyAgICAgICAgIGF0dGFja1JlY3QgPSBidWxsZXQuZ2V0R3JhcGhpY0JvdW5kcyh0cnVlKTtcbiAgICAgICAgLy8gICAgICAgICBhdHRhY2tSZWN0LnggPSBidWxsZXQueDtcbiAgICAgICAgLy8gICAgICAgICBhdHRhY2tSZWN0LnkgPSBidWxsZXQueTtcbiAgICAgICAgLy8gICAgICAgICBmb3IgZWFjaCh2YXIgZW5lbXk6RW5lbXkgaW4gX2VuZW15TGlzdCkge1xuICAgICAgICAvLyAgICAgICAgICAgICBpZighZW5lbXkuaXNEaWUpe1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgaGl0UmVjdCA9IGVuZW15LmdhbWVBbmkuZ2V0R3JhcGhpY0JvdW5kcyh0cnVlKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGhpdFJlY3QueCA9IGVuZW15LmdhbWVBbmkueDtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGhpdFJlY3QueSA9IGVuZW15LmdhbWVBbmkueTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlmKGF0dGFja1JlY3QuaW50ZXJzZWN0aW9uKGhpdFJlY3QpKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZW5lbXkuYmVIdXJ0ZWQoKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuICAgIH1cbn0gIiwiaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuL0Jhc2VNYW5hZ2VyXCI7XG5pbXBvcnQgQWN0aW9uQ29udHJvbGwgZnJvbSBcIi4uL3JvbGUvQWN0aW9uQ29udHJvbGxcIjtcbmltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi4vY29udHJvbGxlci9Db21tYW5kQ2hhbm5lbFwiO1xuXG5cdC8qKlxuXHQgKiAuLi5cblx0ICogQGF1dGhvciBqd2Rcblx0ICovXG5cdGV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0TWFuYWdlciBleHRlbmRzIEJhc2VNYW5hZ2VyXG5cdHtcblx0XHRwcml2YXRlIF9yb2xlQ29udHJvbGw6QWN0aW9uQ29udHJvbGw7XG5cblx0XHRwdWJsaWMgY29uc3RydWN0b3IoY2hhbm5lbDpDb21tYW5kQ2hhbm5lbCkge1xuXHRcdFx0c3VwZXIoY2hhbm5lbCk7XG5cdFx0fVxuXG5cdFx0Lyoq5qC55o2u5bmz5Y+w6K6+572u5a+55bqU55qE5o6n5Yi25pa55byPLFxuXHRcdCAqIHBj5oyJ6ZSu5o6n5Yi277yMXG5cdFx0ICog56e75Yqo77yM6Jma5ouf5oyJ6ZSuXG5cdFx0ICovXG5cdFx0cHVibGljIHNldElucHV0U3R5bGUoKTp2b2lkXG5cdFx0e1xuXHRcdFx0Ly8gdmFyIGhlcm86Um9sZSA9IHRoaXMuY2hhbm5lbC5wb3N0Q29tbWFuZChDb25zdE5hbWUuUk9MRV9DT05UUk9MTEVSLENvbnN0TmFtZS5ST0xFX0dFVF9ST0xFX0JZX0lELFtcImZlbWFsZVwiLDBdKSBhcyBSb2xlO1xuXHRcdFx0Ly8gdGhpcy5fcm9sZUNvbnRyb2xsID0gaGVyby5yb2xlQ29udHJvbGw7XG5cdFx0XHQvLyBpZihCcm93c2VyLm9uQW5kcm9pZCB8fCAhQnJvd3Nlci5vblBDKSB7XG5cdFx0XHQvLyBcdC8v5aaC5p6c5piv56e75Yqo5bmz5Y+w77yM5YiZ5pi+56S656e75Yqo5o6n5Yi2dWlcblx0XHRcdC8vIFx0dGhpcy5jaGFubmVsLnBvc3RDb21tYW5kKENvbnN0TmFtZS5VSV9DT05UUk9MTEVSLENvbnN0TmFtZS5TSE9XX1ZJRVdfQllfTkFNRSxbQ29uc3ROYW1lLk1PVkVfVklFV10pO1xuXHRcdFx0Ly8gfVxuXHRcdFx0Ly8gZWxzZSBpZiAoQnJvd3Nlci5vblBDKVxuXHRcdFx0Ly8ge1xuXHRcdFx0Ly8gXHRMYXlhLnN0YWdlLm9uKEV2ZW50LktFWV9ET1dOLCB0aGlzLCB0aGlzLmhlcm9Db250cm9sbCk7XG5cdFx0XHQvLyBcdExheWEuc3RhZ2Uub24oRXZlbnQuS0VZX1VQLCB0aGlzLCB0aGlzLmhlcm9Db250cm9sbCk7XG5cdFx0XHQvLyBcdFN0YXQuc2hvdygwLDApO1xuXHRcdFx0Ly8gfVxuXHRcdH1cblx0XHRcblx0XHRwcml2YXRlIGhlcm9Db250cm9sbChldnQ6YW55KTp2b2lkXG5cdFx0e1xuXHRcdFx0aWYgKGV2dC5rZXlDb2RlID09IExheWEuS2V5Ym9hcmQuRCB8fCBldnQua2V5Q29kZSA9PSBMYXlhLktleWJvYXJkLkEpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChldnQudHlwZSA9PSBMYXlhLkV2ZW50LktFWV9ET1dOKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGhpcy5fcm9sZUNvbnRyb2xsLmlzTW92ZSA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5fcm9sZUNvbnRyb2xsLnJ4ID0gZXZ0LmtleUNvZGUgPT0gTGF5YS5LZXlib2FyZC5EID8gMSA6IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRoaXMuX3JvbGVDb250cm9sbC5pc01vdmUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aGlzLl9yb2xlQ29udHJvbGwucnggPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZXZ0LmtleUNvZGUgPT0gTGF5YS5LZXlib2FyZC5XIHx8IGV2dC5rZXlDb2RlID09IExheWEuS2V5Ym9hcmQuUylcblx0XHRcdHtcblx0XHRcdFx0aWYgKGV2dC50eXBlID09IExheWEuRXZlbnQuS0VZX0RPV04pXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aGlzLl9yb2xlQ29udHJvbGwuaXNNb3ZlID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLl9yb2xlQ29udHJvbGwucnkgPSBldnQua2V5Q29kZSA9PSBMYXlhLktleWJvYXJkLlMgPyAxIDogLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGhpcy5fcm9sZUNvbnRyb2xsLmlzTW92ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRoaXMuX3JvbGVDb250cm9sbC5yeSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHR9IiwiaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuL0Jhc2VNYW5hZ2VyXCI7XG5pbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSBcIi4uL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWxcIjtcbmltcG9ydCBTY2VuZUxheWVyTWFuYWdlciBmcm9tIFwiLi9TY2VuZUxheWVyTWFuYWdlclwiO1xuaW1wb3J0IFVJTGF5ZXJNYW5hZ2VyIGZyb20gXCIuL1VJTGF5ZXJNYW5hZ2VyXCI7XG5pbXBvcnQgQ29uc3ROYW1lIGZyb20gXCIuLi9Db25zdE5hbWVcIjtcblxuLyoqXG4gKiDmuLjmiI/otYTmupDlsYLmrKHnrqHnkIZcbiAqIOWcuuaZr+Wxgu+8jOS6uueJqeWxgu+8jFVJ5bGCXG4gKiDmr4/kuKrlsYLnrqHnkIboh6rlt7HnmoTlsYLmrKFcbiAqIEBhdXRob3IgandkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExheWVyTWFuYWdlciBleHRlbmRzIEJhc2VNYW5hZ2VyIHtcblx0cHJpdmF0ZSBfc2NlbmVNYW5hZ2VyOiBTY2VuZUxheWVyTWFuYWdlcjtcblx0Ly8gcHJpdmF0ZSAgX3JvbGVMYXllck1hbmFnZXI6Um9sZUxheWVyTWFuYWdlcjtcblx0cHJpdmF0ZSBfdWlMYXllck1hbmFnZXI6IFVJTGF5ZXJNYW5hZ2VyO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihjaGFubmVsOiBDb21tYW5kQ2hhbm5lbCkge1xuXHRcdHN1cGVyKGNoYW5uZWwpO1xuXHRcdHRoaXMuX3NjZW5lTWFuYWdlciA9IG5ldyBTY2VuZUxheWVyTWFuYWdlcihjaGFubmVsKTtcblx0XHQvLyB0aGlzLl9yb2xlTGF5ZXJNYW5hZ2VyID0gbmV3IFJvbGVMYXllck1hbmFnZXIoY2hhbm5lbCk7XG5cdFx0dGhpcy5fdWlMYXllck1hbmFnZXIgPSBuZXcgVUlMYXllck1hbmFnZXIoY2hhbm5lbCk7XG5cdH1cblxuXHRwdWJsaWMgaW5pdCgpOiB2b2lkIHtcblx0XHQvL+acgOWQjuWxguiDjOaZr1xuXHRcdHRoaXMuX3NjZW5lTWFuYWdlci5zZXRSZWFyTGF5ZXJJbmRleCgwKTtcblx0XHQvL+S4reWxguiDjOaZr1xuXHRcdHRoaXMuX3NjZW5lTWFuYWdlci5zZXRNaWRkbGVMYXllckluZGV4KDEpO1xuXHRcdC8v6KeS6Imy5bGCXG5cdFx0dGhpcy5fc2NlbmVNYW5hZ2VyLnNldFJvbGVMYXllckluZGV4KDIpO1xuXHRcdC8v5a2Q5by55bGCXG5cdFx0dGhpcy5fc2NlbmVNYW5hZ2VyLnNldEJ1bGxldExheWVySW5kZXgoMyk7XG5cdFx0Ly/nibnmlYjlrZDlvLnlsYJcblx0XHR0aGlzLl9zY2VuZU1hbmFnZXIuc2V0RWZmZWN0TGF5ZXJJbmRleCg0KTtcblx0XHQvL+inkuiJsumihOeVmeWxgjRcblx0XHQvL+inkuiJsumihOeVmeWxgjVcblx0XHQvL+inkuiJsumihOeVmeWxgjZcblx0XHQvL+i/keWxguiDjOaZr1xuXHRcdHRoaXMuX3NjZW5lTWFuYWdlci5zZXRGcm9udExheWVySW5kZXgoNyk7XG5cdFx0Ly/mqKHlnZdVSeWxglxuXHRcdHRoaXMuX3VpTGF5ZXJNYW5hZ2VyLnNldE1haW5VSUxheWVySW5kZXgoOCk7XG5cdFx0Ly/lvLnlh7p1aeWxglxuXHRcdHRoaXMuX3VpTGF5ZXJNYW5hZ2VyLnNldEFsZXJ0VUlMYXllckluZGV4KDkpO1xuXHRcdC8v5paH5a2X5o+Q56S65bGCXG5cdFx0dGhpcy5fdWlMYXllck1hbmFnZXIuc2V0VGlwVUlMYXllckluZGV4KDEwKTtcblx0fVxuXG5cdHB1YmxpYyBnZXRVSUxheWVyKCk6TGF5YS5TcHJpdGV7XG5cdFx0cmV0dXJuIHRoaXMuX3VpTGF5ZXJNYW5hZ2VyLnVpTGF5ZXI7XG5cdH1cblxuXHRwdWJsaWMgZ2V0U2NlbmVMYXllcigpOkxheWEuU3ByaXRle1xuXHRcdHJldHVybiB0aGlzLl9zY2VuZU1hbmFnZXIuc2NlbmVMYXllcjtcblx0fVxuXG5cdHB1YmxpYyBnZXRTY2VuZUxheWVyQnlOYW1lKHJvbGVMYXllclR5cGU6IHN0cmluZyk6IExheWEuU3ByaXRlIHtcblx0XHRzd2l0Y2ggKHJvbGVMYXllclR5cGUpIHtcblx0XHRcdGNhc2UgQ29uc3ROYW1lLlJPTEVfTEFZRVI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl9zY2VuZU1hbmFnZXIucm9sZUxheWVyO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQ29uc3ROYW1lLkJVTExFVF9MQVlFUjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3NjZW5lTWFuYWdlci5idWxsZXRMYXllcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENvbnN0TmFtZS5FRkZFQ1RfTEFZRVI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl9zY2VuZU1hbmFnZXIuZWZmZWN0TGF5ZXI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IExheWEuU3ByaXRlKCk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0VUlMYXllckJ5TmFtZSh1aUxheWVyVHlwZTogc3RyaW5nKTogTGF5YS5TcHJpdGUge1xuXHRcdHN3aXRjaCAodWlMYXllclR5cGUpIHtcblx0XHRcdGNhc2UgQ29uc3ROYW1lLk1BSU5fVUlfTEFZRVI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl91aUxheWVyTWFuYWdlci5tYWluVUlMYXllcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENvbnN0TmFtZS5BTEVSVF9VSV9MQVlFUjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3VpTGF5ZXJNYW5hZ2VyLmFsZXJ0VUlMYXllcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENvbnN0TmFtZS5USVBfVUlfTEFZRVI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl91aUxheWVyTWFuYWdlci50aXBVSUxheWVyO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBMYXlhLlNwcml0ZSgpO1xuXHR9XG5cblx0cHVibGljIGNyZWF0ZVNjZW5lKHBhcmFtczogYW55KTogdm9pZCB7XG5cdFx0dmFyIHNjZW5lSWQ6IHN0cmluZyA9IHBhcmFtc1swXTtcblx0XHR0aGlzLl9zY2VuZU1hbmFnZXIuY3JlYXRlU2NlbmUoc2NlbmVJZCk7XG5cdH1cbn0iLCJpbXBvcnQgQmFzZU1hbmFnZXIgZnJvbSBcIi4vQmFzZU1hbmFnZXJcIjtcbmltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi4vY29udHJvbGxlci9Db21tYW5kQ2hhbm5lbFwiO1xuaW1wb3J0IEdhbWVHbG9iYWwgZnJvbSBcIi4uL0dhbWVHbG9iYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZE1hbmFnZXIgZXh0ZW5kcyBCYXNlTWFuYWdlciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWw6IENvbW1hbmRDaGFubmVsKSB7XG4gICAgICAgIHN1cGVyKGNoYW5uZWwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0VXJsKHVybCwgdHlwZTogbnVtYmVyID0gLTEpOiBzdHJpbmcge1xuICAgICAgICBpZiAodHlwZSA9PSBHYW1lR2xvYmFsLlJPTEUpXG4gICAgICAgICAgICByZXR1cm4gR2FtZUdsb2JhbC5SRVNPVVJDRV9ST0xFX1BBVEggKyB1cmw7XG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gR2FtZUdsb2JhbC5TT1VORCkge1xuICAgICAgICAgICAgaWYgKExheWEuQnJvd3Nlci5vbkFuZHJvaWQgfHwgTGF5YS5Ccm93c2VyLm9uSU9TKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEdhbWVHbG9iYWwuUkVTT1VSQ0VfU09VTkRfUEFUSCArIHVybCArIFwiLndhdlwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gR2FtZUdsb2JhbC5SRVNPVVJDRV9TT1VORF9QQVRIICsgdXJsICsgXCIubXAzXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBHYW1lR2xvYmFsLlVJKVxuICAgICAgICAgICAgcmV0dXJuIEdhbWVHbG9iYWwuUkVTT1VSQ0VfVUlfUEFUSCArIHVybDtcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBHYW1lR2xvYmFsLlNDRU5FKVxuICAgICAgICAgICAgcmV0dXJuIEdhbWVHbG9iYWwuUkVTT1VSQ0VfU0NFTkVfUEFUSCArIHVybDtcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBHYW1lR2xvYmFsLkpTT04pXG4gICAgICAgICAgICByZXR1cm4gR2FtZUdsb2JhbC5SRVNPVVJDRV9KU09OX1BBVEggKyB1cmw7XG4gICAgICAgIHJldHVybiBHYW1lR2xvYmFsLlJFU09VUkNFX0JBU0VfUEFUSCArIHVybDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEljb25VcmwodHlwZTpzdHJpbmcsaWQ6bnVtYmVyKTpzdHJpbmd7XG4gICAgICAgIHJldHVybiBcInZpZXdzL2ljb24vXCIgKyB0eXBlICsgXCJfXCIgKyBpZCArIFwiLnBuZ1wiO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UmVzKHVybCwgdHlwZTogbnVtYmVyID0gLTEpOiBhbnkge1xuICAgICAgICB2YXIgcmVzVXJsOiBzdHJpbmcgPSBMb2FkTWFuYWdlci5nZXRVcmwodXJsLCB0eXBlKTtcbiAgICAgICAgcmV0dXJuIExheWEubG9hZGVyLmdldFJlcyhyZXNVcmwpO1xuICAgIH1cbn0iLCJpbXBvcnQgQmFzZU1hbmFnZXIgZnJvbSBcIi4vQmFzZU1hbmFnZXJcIjtcbmltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi4vY29udHJvbGxlci9Db21tYW5kQ2hhbm5lbFwiO1xuaW1wb3J0IEhlcm8gZnJvbSBcIi4uL3JvbGUvSGVyb1wiO1xuaW1wb3J0IEVuZW15IGZyb20gXCIuLi9yb2xlL0VuZW15XCI7XG5pbXBvcnQgQ29uc3ROYW1lIGZyb20gXCIuLi9Db25zdE5hbWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9sZU1hbmFnZXIgZXh0ZW5kcyBCYXNlTWFuYWdlclxue1xuXHRwcml2YXRlICBfaGVyb0xpc3Q6QXJyYXk8SGVybz4gPSBuZXcgQXJyYXk8SGVybz4oKTtzXG5cdHByaXZhdGUgIF9lbmVteUxpc3Q6QXJyYXk8RW5lbXk+ID0gbmV3IEFycmF5PEVuZW15PigpO1xuXHRwcml2YXRlICBfcm9sZUNvbnRyb2xsSGFzaDpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG5cdC8v5pWM5Lq657yT5Yay5rGg77yM6YG/5YWN6YeN5aSN5Yib5bu6XG5cdHByaXZhdGUgIF9yb2xlQ2FjaGVMaXN0OkFycmF5PEVuZW15PiA9IG5ldyBBcnJheTxFbmVteT4oKTtcblx0cHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWw6Q29tbWFuZENoYW5uZWwpXG5cdHtcblx0XHRzdXBlcihjaGFubmVsKTtcblx0fVxuXHRcblx0cHVibGljIGluaXQoKTp2b2lke1xuXHRcdExheWEudGltZXIubG9vcCgzMCwgdGhpcywgdGhpcy51cGRhdGUpO1xuXHR9XG5cblx0LyoqIOagueaNruinkuiJsmlk6I635Y+W6KeS6Imy77yM5peg6K665Zyo5LuA5LmIXG5cdCAqIOmYtuautemDveiDveiOt+WPluWIsOinkuiJsuWvueixoe+8jOmZpOS6huinkuiJsueahFxuXHQgKiDmmL7npLrotYTmupDvvIjph4fnlKjlvILmraXliqDovb3loavlhYXvvInvvIzmlbDmja7pg73kvJrlrZjlnKjvvIxcblx0ICogKi9cblx0cHVibGljIGdldEhlcm8ocGFyYW1zOmFueSk6YW55XG5cdHtcblx0XHR2YXIgcm9sZU5hbWU6c3RyaW5nID0gcGFyYW1zWzBdO1xuXHRcdHZhciByb2xlSWQ6bnVtYmVyID0gcGFyYW1zWzFdO1xuXHRcdGxldCBoZXJvOkhlcm87XG5cdFx0Zm9yKGxldCBoZXJvSUQgaW4gdGhpcy5faGVyb0xpc3QpXG5cdFx0e1xuXHRcdFx0aGVybyA9IHRoaXMuX2hlcm9MaXN0W2hlcm9JRF07XG5cdFx0XHRpZiAoaGVyby5yb2xlSWQgPT0gcm9sZUlkKVxuXHRcdFx0XHRyZXR1cm4gaGVybztcblx0XHR9XG5cdFx0aGVybyA9IG5ldyBIZXJvKHJvbGVOYW1lLHJvbGVJZCk7XG5cdFx0Ly8gaGVyby5idWxsZXRHcm91cCA9IHRoaXMuY2hhbm5lbC5wb3N0Q29tbWFuZChDb25zdE5hbWUuQkFUVExFX0NPTlRST0xMRVIsQ29uc3ROYW1lLkJBVFRMRV9DUkVBVEVfQlVMTEVUX0dST1VQLFtyb2xlSWRdKSBhcyBCYXNlQnVsbGV0R3JvdXA7XG5cdFx0Ly8gaGVyby5zZXRCdWxsZXRTa2luKCk7XG5cdFx0aGVyby5zZXRTa2luKFwiZmVtYWxlLmF0bGFzXCIpO1xuXHRcdGhlcm8uc2V0QW5pbWF0aW9uKFwibW92ZVwiKTtcblx0XHR0aGlzLl9oZXJvTGlzdC5wdXNoKGhlcm8pO1xuXHRcdHJldHVybiBoZXJvO1xuXHR9XG5cdFxuXHRwdWJsaWMgZ2V0SGVyb0xpc3QoKTpBcnJheTxIZXJvPiB7XG5cdFx0cmV0dXJuIHRoaXMuX2hlcm9MaXN0O1xuXHR9XG5cblx0cHVibGljIGFkZEhlcm8ocGFyYW1zOmFueSk6dm9pZFxuXHR7XG5cdFx0dmFyIHJvbGVOYW1lOnN0cmluZyA9IHBhcmFtc1swXTtcblx0XHR2YXIgcm9sZUlkOm51bWJlciA9IHBhcmFtc1sxXTtcblx0XHR2YXIgcG9zOkxheWEuUG9pbnQgPSBwYXJhbXNbMl07XG5cdFx0dmFyIGhlcm86SGVybyA9IHRoaXMuZ2V0SGVybyhbcm9sZU5hbWUscm9sZUlkXSk7XG5cdFx0aWYgKGhlcm8pXG5cdFx0e1xuXHRcdFx0aGVyby5zZXRTa2luKHJvbGVOYW1lK1wiLmF0bGFzXCIpO1xuXHRcdFx0aGVyby5zZXRBbmltYXRpb24oXCJtb3ZlXCIpO1xuXHRcdFx0aGVyby5hZGRTdGFnZShwb3MpO1xuXHRcdH1cblx0fVxuXHRcblxuXHQvKiog5qC55o2u6KeS6ImyaWTojrflj5bmlYzkurrvvIzlpoLmnpznvJPlhrLmsaDkuK3mnIlcblx0ICog6K+l57G75Z6L55qE5pWM5Lq677yM6YKj5bCx5Y+W5Ye677yM5aaC5p6c5rKh5pyJ77yM5YiZXG5cdCAqIOWIm+W7ulxuXHQgKiAqL1xuXHRwdWJsaWMgZ2V0RW5lbXkocGFyYW1zOmFueSk6YW55XG5cdHtcblx0XHR2YXIgcm9sZU5hbWU6c3RyaW5nID0gcGFyYW1zWzBdO1xuXHRcdHZhciByb2xlSWQ6bnVtYmVyID0gcGFyYW1zWzFdO1xuXHRcdGxldCBlbmVteTpFbmVteTtcblx0XHRmb3IobGV0IGk9MCxsZW4gPSB0aGlzLl9yb2xlQ2FjaGVMaXN0Lmxlbmd0aCA7aTxsZW47aS0tKXtcblx0XHRcdGVuZW15ID0gdGhpcy5fcm9sZUNhY2hlTGlzdFtpXTtcblx0XHRcdGNvbnNvbGUubG9nKFwi5LuO5Zue5pS25rGg5Lit5Yib5bu65pWM5Lq6XCIpO1xuXHRcdFx0dGhpcy5fcm9sZUNhY2hlTGlzdC5zcGxpY2UoaSwxKTtcblx0XHRcdHJldHVybiBlbmVteTtcblx0XHR9XG5cdFx0ZW5lbXkgPSBuZXcgRW5lbXkocm9sZU5hbWUscm9sZUlkKTtcblx0XHRlbmVteS5zZXRTa2luKFwibW9uc3Rlci9cIityb2xlTmFtZStcIi5hdGxhc1wiKTtcblx0XHQvLyBpZihlbmVteS5oYXNCdWxsZXQpe1xuXHRcdC8vIFx0ZW5lbXkuYnVsbGV0R3JvdXAgPSB0aGlzLmNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLkJBVFRMRV9DT05UUk9MTEVSLENvbnN0TmFtZS5CQVRUTEVfQ1JFQVRFX0JVTExFVF9HUk9VUCxbcm9sZUlkXSkgYXMgQmFzZUJ1bGxldEdyb3VwO1xuXHRcdC8vIFx0ZW5lbXkuc2V0QnVsbGV0U2tpbigpO1xuXHRcdC8vIH1cblx0XHRyZXR1cm4gZW5lbXk7XG5cdH1cblxuXHRwdWJsaWMgYWRkRW5lbXkocGFyYW1zOmFueSk6dm9pZFxuXHR7XG5cdFx0aWYodGhpcy5fZW5lbXlMaXN0Lmxlbmd0aD44KVxuXHRcdFx0cmV0dXJuO1xuXHRcdHZhciByb2xlTmFtZTpzdHJpbmcgPSBwYXJhbXNbMF07XG5cdFx0dmFyIHJvbGVJZDpudW1iZXIgPSBwYXJhbXNbMV07XG5cdFx0dmFyIHBvczpMYXlhLlBvaW50ID0gcGFyYW1zWzJdO1xuXHRcdHZhciBlbmVteTpFbmVteSA9IHRoaXMuZ2V0RW5lbXkoW3JvbGVOYW1lLHJvbGVJZF0pO1xuXHRcdGlmIChlbmVteSlcblx0XHR7XG5cdFx0XHRlbmVteS5pbml0KCk7XG5cdFx0XHRlbmVteS5zZXRBbmltYXRpb24oXCJtb3ZlXCIpO1xuXHRcdFx0ZW5lbXkuZ2FtZUFuaS54ID0gTWF0aC5jZWlsKHBvcy54KTtcblx0XHRcdGVuZW15LmdhbWVBbmkueSA9IE1hdGguY2VpbChwb3MueSk7XG5cdFx0XHR2YXIgcm9sZUxheWVyOkxheWEuU3ByaXRlID0gdGhpcy5jaGFubmVsLnBvc3RDb21tYW5kKENvbnN0TmFtZS5MQVlFUl9DT05UUk9MTEVSLCBDb25zdE5hbWUuTEFZRVJfR0VUX1NDRU5FX0xBWUVSX0JZX05BTUUsQ29uc3ROYW1lLlJPTEVfTEFZRVIpIGFzIExheWEuU3ByaXRlO1xuXHRcdFx0cm9sZUxheWVyLmFkZENoaWxkKGVuZW15LmdhbWVBbmkpO1xuXHRcdFx0dmFyIGVmZmVjdExheWVyOkxheWEuU3ByaXRlID0gdGhpcy5jaGFubmVsLnBvc3RDb21tYW5kKENvbnN0TmFtZS5MQVlFUl9DT05UUk9MTEVSLCBDb25zdE5hbWUuTEFZRVJfR0VUX1NDRU5FX0xBWUVSX0JZX05BTUUsQ29uc3ROYW1lLkVGRkVDVF9MQVlFUikgYXMgTGF5YS5TcHJpdGU7XG5cdFx0XHRlZmZlY3RMYXllci5hZGRDaGlsZChlbmVteS5idWxsZXRHcm91cCk7XG5cdFx0XHR0aGlzLl9lbmVteUxpc3QucHVzaChlbmVteSk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGdldEVuZW15TGlzdCgpOkFycmF5PEVuZW15PiB7XG5cdFx0cmV0dXJuIHRoaXMuX2VuZW15TGlzdDtcblx0fVxuXG5cdHB1YmxpYyBzZXRTY2VuZVNwZWVkKHBhcmFtczphbnkpOnZvaWQge1xuXHRcdC8vIHZhciBzY2VuZVNwZWVkOk51bWJlciA9IHBhcmFtc1swXTtcblx0XHQvLyBmb3IgZWFjaCAodmFyIGhlcm86SGVybyBpbiBfaGVyb0xpc3QpXG5cdFx0Ly8ge1xuXHRcdC8vIFx0aGVyby5zY2VuZVNwZWVkID0gc2NlbmVTcGVlZDtcblx0XHQvLyB9XG5cdH1cblxuXHQvKirpgb/lhY3ph43lpI3liJvlu7ogKi9cblx0cHJpdmF0ZSByZWN5Y2xlTGlzdDpBcnJheTxFbmVteT4gPSBuZXcgQXJyYXk8RW5lbXk+KCk7XG5cdHByaXZhdGUgdXBkYXRlKCk6dm9pZFxuXHR7XG5cdFx0Ly8gZm9yIGVhY2ggKHZhciBoZXJvOkhlcm8gaW4gX2hlcm9MaXN0KVxuXHRcdC8vIHtcblx0XHQvLyBcdGhlcm8udXBkYXRlKCk7XG5cdFx0Ly8gfVxuXHRcdC8vIGZvciBlYWNoICh2YXIgZW5lbXk6RW5lbXkgaW4gX2VuZW15TGlzdClcblx0XHQvLyB7XG5cdFx0Ly8gXHRlbmVteS51cGRhdGUoKTtcblx0XHQvLyBcdGlmKGVuZW15LmlzUmVjeWNsZSl7XG5cdFx0Ly8gXHRcdHJlY3ljbGVMaXN0LnB1c2goZW5lbXkpO1xuXHRcdC8vIFx0fVxuXHRcdC8vIH1cblx0XHQvLyBpZihyZWN5Y2xlTGlzdC5sZW5ndGg+MCkge1xuXHRcdC8vIFx0Zm9yIGVhY2godmFyIHJlY3ljbGU6RW5lbXkgaW4gcmVjeWNsZUxpc3QpIHtcblx0XHQvLyBcdFx0cmVjeWNsZUJ1bGxldEZ1bmMocmVjeWNsZSk7XG5cdFx0Ly8gXHR9XG5cdFx0Ly8gXHRyZWN5Y2xlTGlzdC5zcGxpY2UoMCxyZWN5Y2xlTGlzdC5sZW5ndGgpO1xuXHRcdC8vIH1cblx0fVxuXG5cdC8qKuWbnuaUtuaVjOS6uuacuuWItiAqL1xuXHRwdWJsaWMgcmVjeWNsZUJ1bGxldEZ1bmMoZW5lbXk6RW5lbXkpOnZvaWQge1xuXHRcdC8vIGVuZW15LnJlY3ljbGUoKTtcblx0XHQvLyB2YXIgZW5lbXlJbmRleDpOdW1iZXIgPSBfZW5lbXlMaXN0LmluZGV4T2YoZW5lbXkpO1xuXHRcdC8vIF9lbmVteUxpc3Quc3BsaWNlKGVuZW15SW5kZXgsMSk7XG5cdFx0Ly8gX3JvbGVDYWNoZUxpc3QucHVzaChlbmVteSk7XG5cdH1cbn0iLCJpbXBvcnQgQmFzZU1hbmFnZXIgZnJvbSBcIi4vQmFzZU1hbmFnZXJcIjtcbmltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi4vY29udHJvbGxlci9Db21tYW5kQ2hhbm5lbFwiO1xuaW1wb3J0IFNjZW5lU3ByaXRlIGZyb20gXCIuLi9TY2VuZVNwcml0ZVwiO1xuXG4vKipcbiAqIC4uLlxuICogQGF1dGhvciBqd2RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NlbmVMYXllck1hbmFnZXIgZXh0ZW5kcyBCYXNlTWFuYWdlciB7XG5cdC8qKuS4lueVjOaAu+WuueWZqCAqL1xuXHRwdWJsaWMgc2NlbmVMYXllcjogTGF5YS5TcHJpdGU7XG5cdHB1YmxpYyBmcm9udExheWVyOiBMYXlhLlNwcml0ZTtcblx0cHVibGljIG1pZGRsZUxheWVyOiBMYXlhLlNwcml0ZTtcblx0cHVibGljIHJlYXJMYXllcjogTGF5YS5TcHJpdGU7XG5cdHB1YmxpYyBzY2VuZVNwcml0ZTogU2NlbmVTcHJpdGU7XG5cdHB1YmxpYyByZWFyU3BlZWQ6IE51bWJlciA9IDA7XG5cdHB1YmxpYyBtaWRkbGVTcGVlZDogTnVtYmVyID0gMDtcblx0cHVibGljIGZyb250U3BlZWQ6IE51bWJlciA9IDA7XG5cdC8v6KeS6Imy5bGCLOWFrOW8gOWHj+WwkeiOt+WPluWxguasoVxuXHRwdWJsaWMgcm9sZUxheWVyOiBMYXlhLlNwcml0ZTtcblx0Ly/lrZDlvLnlsYJcblx0cHVibGljIGJ1bGxldExheWVyOiBMYXlhLlNwcml0ZTtcblx0Ly/nibnmlYjlsYJcblx0cHVibGljIGVmZmVjdExheWVyOiBMYXlhLlNwcml0ZTtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoY2hhbm5lbDogQ29tbWFuZENoYW5uZWwpIHtcblx0XHRzdXBlcihjaGFubmVsKTtcblx0XHR0aGlzLnNjZW5lTGF5ZXIgPSBuZXcgTGF5YS5TcHJpdGUoKTtcblx0XHR0aGlzLmZyb250TGF5ZXIgPSBuZXcgTGF5YS5TcHJpdGUoKTtcblx0XHR0aGlzLm1pZGRsZUxheWVyID0gbmV3IExheWEuU3ByaXRlKCk7XG5cdFx0dGhpcy5yZWFyTGF5ZXIgPSBuZXcgTGF5YS5TcHJpdGUoKTtcblx0XHR0aGlzLnJvbGVMYXllciA9IG5ldyBMYXlhLlNwcml0ZSgpO1xuXHRcdHRoaXMuYnVsbGV0TGF5ZXIgPSBuZXcgTGF5YS5TcHJpdGUoKTtcblx0XHR0aGlzLmVmZmVjdExheWVyID0gbmV3IExheWEuU3ByaXRlKCk7XG5cdFx0TGF5YS5zdGFnZS5hZGRDaGlsZCh0aGlzLnNjZW5lTGF5ZXIpO1xuXHR9XG5cblx0cHVibGljIGdldFdvcmxkTGF5ZXIoKTpMYXlhLlNwcml0ZXtcblx0XHRyZXR1cm4gdGhpcy5zY2VuZUxheWVyO1xuXHR9XG5cblx0cHVibGljIHNldEZyb250TGF5ZXJJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG5cdFx0dGhpcy5zY2VuZUxheWVyLmFkZENoaWxkKHRoaXMuZnJvbnRMYXllcik7XG5cdFx0dGhpcy5mcm9udExheWVyLnpPcmRlciA9IGluZGV4O1xuXHR9XG5cblx0cHVibGljIHNldE1pZGRsZUxheWVySW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuXHRcdHRoaXMuc2NlbmVMYXllci5hZGRDaGlsZCh0aGlzLm1pZGRsZUxheWVyKTtcblx0XHR0aGlzLm1pZGRsZUxheWVyLnpPcmRlciA9IGluZGV4O1xuXHR9XG5cblx0cHVibGljIHNldFJlYXJMYXllckluZGV4KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcblx0XHR0aGlzLnNjZW5lTGF5ZXIuYWRkQ2hpbGQodGhpcy5yZWFyTGF5ZXIpO1xuXHRcdHRoaXMucmVhckxheWVyLnpPcmRlciA9IGluZGV4O1xuXHR9XG5cblxuXHRwdWJsaWMgc2V0Um9sZUxheWVySW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuXHRcdHRoaXMuc2NlbmVMYXllci5hZGRDaGlsZCh0aGlzLnJvbGVMYXllcik7XG5cdFx0dGhpcy5yb2xlTGF5ZXIuek9yZGVyID0gaW5kZXg7XG5cdH1cblxuXHRwdWJsaWMgc2V0QnVsbGV0TGF5ZXJJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG5cdFx0dGhpcy5zY2VuZUxheWVyLmFkZENoaWxkKHRoaXMuYnVsbGV0TGF5ZXIpO1xuXHRcdHRoaXMuYnVsbGV0TGF5ZXIuek9yZGVyID0gaW5kZXg7XG5cdH1cblxuXHRwdWJsaWMgc2V0RWZmZWN0TGF5ZXJJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG5cdFx0dGhpcy5zY2VuZUxheWVyLmFkZENoaWxkKHRoaXMuZWZmZWN0TGF5ZXIpO1xuXHRcdHRoaXMuZWZmZWN0TGF5ZXIuek9yZGVyID0gaW5kZXg7XG5cdH1cblxuXHQvKiog55Sf5oiQ5Zy65pmvKi9cblx0cHVibGljIGNyZWF0ZVNjZW5lKHNjZW5lSWQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdExheWEuU2NlbmUub3BlbihcInNjZW5lL1wiICsgc2NlbmVJZCArIFwiLnNjZW5lXCIsIHRydWUsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5hZGRTY2VuZSkpO1xuXHR9XG5cblx0Lyoq5a+55Zy65pmv5pi+56S65a+56LGh6L+b6KGM5YiG5bGC5aSE55CGICovXG5cdHByaXZhdGUgYWRkU2NlbmUoc2NlbmU6IFNjZW5lU3ByaXRlKTogdm9pZCB7XG5cdFx0dGhpcy5zY2VuZVNwcml0ZSA9IHNjZW5lO1xuXHRcdGlmICh0aGlzLnNjZW5lU3ByaXRlLnJlYXJMYXllciAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLnJlYXJMYXllci5hZGRDaGlsZChzY2VuZS5yZWFyTGF5ZXIpO1xuXHRcdFx0dGhpcy5yZWFyU3BlZWQgPSB0aGlzLnNjZW5lU3ByaXRlLnJlYXJMYXllci5zcGVlZDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuc2NlbmVTcHJpdGUucm9sZUxheWVyICE9IG51bGwpIHtcblx0XHRcdHRoaXMubWlkZGxlU3BlZWQgPSB0aGlzLnNjZW5lU3ByaXRlLnJvbGVMYXllci5zcGVlZDtcblx0XHRcdHRoaXMubWlkZGxlTGF5ZXIuYWRkQ2hpbGQoc2NlbmUucm9sZUxheWVyKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuc2NlbmVTcHJpdGUuZnJvbnRMYXllciAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLmZyb250TGF5ZXIuYWRkQ2hpbGQoc2NlbmUuZnJvbnRMYXllcik7XG5cdFx0XHR0aGlzLmZyb250U3BlZWQgPSB0aGlzLnNjZW5lU3ByaXRlLmZyb250TGF5ZXIuc3BlZWQ7XG5cdFx0fVxuXHRcdExheWEuU291bmRNYW5hZ2VyLnBsYXlNdXNpYyhcInJlc291cmNlL3NvdW5kL2JnX211c2ljLm1wM1wiKTtcblx0XHQvLyB0aGlzLmNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLlJPTEVfQ09OVFJPTExFUixDb25zdE5hbWUuUk9MRV9TQ0VORV9TUEVFRCxbLV9taWRkbGVTcGVlZF0pO1xuXHRcdC8vIExheWEudGltZXIubG9vcCgzMCx0aGlzLHRoaXMudXBkYXRlKTtcblx0fVxuXG5cdC8qKuabtOaWsOWcuuaZr+enu+WKqCAqL1xuXHRwcml2YXRlIHVwZGF0ZSgpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5zY2VuZVNwcml0ZSkge1xuXHRcdFx0dmFyIGxheWVyU3ByaXRlTmFtZTogc3RyaW5nO1xuXHRcdFx0dmFyIGxheWVyU3ByaXRlOiBMYXlhLlNwcml0ZTtcblx0XHRcdC8v6YCQ5riQ5LyY5YyW5Lit77yM5YWI5YaZ5q27XG5cdFx0XHQvL+S4reaZr+WxglxuXHRcdFx0aWYgKHRoaXMubWlkZGxlU3BlZWQpIHtcblx0XHRcdFx0Zm9yIChsYXllclNwcml0ZU5hbWUgaW4gdGhpcy5zY2VuZVNwcml0ZS5taWRkbGVMaXN0KSB7XG5cdFx0XHRcdFx0bGF5ZXJTcHJpdGUgPSB0aGlzLnNjZW5lU3ByaXRlLm1pZGRsZUxpc3RbbGF5ZXJTcHJpdGVOYW1lXTtcblx0XHRcdFx0XHRsYXllclNwcml0ZS54IC09IHRoaXMuc2NlbmVTcHJpdGUucm9sZUxheWVyLnNwZWVkO1xuXHRcdFx0XHRcdC8vNjY2Nuecn+Wdke+8jGRpc3BsYXlXaWR0aCDlsL3nhLblj6/ku6XkuLrotJ/mlbDvvIjlvZNzY2FsZVgg5Li6LeaVsOeahOaXtuWAme+8iVxuXHRcdFx0XHRcdGlmIChsYXllclNwcml0ZS54IDwgLU1hdGguYWJzKGxheWVyU3ByaXRlLmRpc3BsYXlXaWR0aCkpIHtcblx0XHRcdFx0XHRcdGxheWVyU3ByaXRlLnggPSB0aGlzLnNjZW5lU3ByaXRlLm1pZGRsZUVuZC54ICsgTWF0aC5hYnModGhpcy5zY2VuZVNwcml0ZS5taWRkbGVFbmQuZGlzcGxheVdpZHRoKSAtIHRoaXMuc2NlbmVTcHJpdGUucm9sZUxheWVyLnNwZWVkO1xuXHRcdFx0XHRcdFx0dGhpcy5zY2VuZVNwcml0ZS5taWRkbGVFbmQgPSBsYXllclNwcml0ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8v5YmN5pmv5bGCXG5cdFx0XHRpZiAodGhpcy5mcm9udFNwZWVkKSB7XG5cdFx0XHRcdGZvciAobGF5ZXJTcHJpdGVOYW1lIGluIHRoaXMuc2NlbmVTcHJpdGUuZnJvbnRMaXN0KSB7XG5cdFx0XHRcdFx0bGF5ZXJTcHJpdGUgPSB0aGlzLnNjZW5lU3ByaXRlLmZyb250TGlzdFtsYXllclNwcml0ZU5hbWVdO1xuXHRcdFx0XHRcdGxheWVyU3ByaXRlLnggLT0gdGhpcy5zY2VuZVNwcml0ZS5mcm9udExheWVyLnNwZWVkO1xuXHRcdFx0XHRcdC8vNjY2Nuecn+Wdke+8jGRpc3BsYXlXaWR0aCDlsL3nhLblj6/ku6XkuLrotJ/mlbDvvIjlvZNzY2FsZVgg5Li6LeaVsOeahOaXtuWAme+8iVxuXHRcdFx0XHRcdGlmIChsYXllclNwcml0ZS54IDwgLU1hdGguYWJzKGxheWVyU3ByaXRlLmRpc3BsYXlXaWR0aCkpIHtcblx0XHRcdFx0XHRcdGxheWVyU3ByaXRlLnggPSB0aGlzLnNjZW5lU3ByaXRlLmZyb250RW5kLnggKyBNYXRoLmFicyh0aGlzLnNjZW5lU3ByaXRlLmZyb250RW5kLmRpc3BsYXlXaWR0aCkgLSB0aGlzLnNjZW5lU3ByaXRlLmZyb250TGF5ZXIuc3BlZWQ7XG5cdFx0XHRcdFx0XHR0aGlzLnNjZW5lU3ByaXRlLmZyb250RW5kID0gbGF5ZXJTcHJpdGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvL+i/nOaZr+WxglxuXHRcdFx0aWYgKHRoaXMucmVhclNwZWVkKSB7XG5cdFx0XHRcdGZvciAobGF5ZXJTcHJpdGVOYW1lIGluIHRoaXMuc2NlbmVTcHJpdGUucmVhckxpc3QpIHtcblx0XHRcdFx0XHRsYXllclNwcml0ZSA9IHRoaXMuc2NlbmVTcHJpdGUucmVhckxpc3RbbGF5ZXJTcHJpdGVOYW1lXTtcblx0XHRcdFx0XHRsYXllclNwcml0ZS54IC09IHRoaXMuc2NlbmVTcHJpdGUucmVhckxheWVyLnNwZWVkO1xuXHRcdFx0XHRcdC8vNjY2Nuecn+Wdke+8jGRpc3BsYXlXaWR0aCDlsL3nhLblj6/ku6XkuLrotJ/mlbDvvIjlvZNzY2FsZVgg5Li6LeaVsOeahOaXtuWAme+8iVxuXHRcdFx0XHRcdGlmIChsYXllclNwcml0ZS54IDwgLU1hdGguYWJzKGxheWVyU3ByaXRlLmRpc3BsYXlXaWR0aCkpIHtcblx0XHRcdFx0XHRcdGxheWVyU3ByaXRlLnggPSB0aGlzLnNjZW5lU3ByaXRlLnJlYXJFbmQueCArIE1hdGguYWJzKHRoaXMuc2NlbmVTcHJpdGUucmVhckVuZC5kaXNwbGF5V2lkdGgpIC0gdGhpcy5zY2VuZVNwcml0ZS5yZWFyTGF5ZXIuc3BlZWQ7XG5cdFx0XHRcdFx0XHR0aGlzLnNjZW5lU3ByaXRlLnJlYXJFbmQgPSBsYXllclNwcml0ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKirph4rmlL7lnLrmma/otYTmupAqL1xuXHRwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG5cdFx0dGhpcy5mcm9udExheWVyLnJlbW92ZUNoaWxkcmVuKCk7XG5cdFx0dGhpcy5taWRkbGVMYXllci5yZW1vdmVDaGlsZHJlbigpO1xuXHRcdHRoaXMucmVhckxheWVyLnJlbW92ZUNoaWxkcmVuKCk7XG5cdH1cblxuXHRwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmZyb250TGF5ZXIuZGVzdHJveSh0cnVlKTtcblx0XHR0aGlzLmZyb250TGF5ZXIgPSBudWxsO1xuXHRcdHRoaXMubWlkZGxlTGF5ZXIuZGVzdHJveSh0cnVlKTtcblx0XHR0aGlzLm1pZGRsZUxheWVyID0gbnVsbDtcblx0XHR0aGlzLnJlYXJMYXllci5kZXN0cm95KHRydWUpO1xuXHRcdHRoaXMucmVhckxheWVyID0gbnVsbDtcblx0fVxuXG59IiwiaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuL0Jhc2VNYW5hZ2VyXCI7XG5pbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSBcIi4uL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWxcIjtcblxuLyoqXG4gKiAuLi5cbiAqIEBhdXRob3IgandkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJTGF5ZXJNYW5hZ2VyIGV4dGVuZHMgQmFzZU1hbmFnZXIge1xuXHQvL+aJgOaciXVp5bGC5a655ZmoXG5cdHB1YmxpYyB1aUxheWVyOiBMYXlhLlNwcml0ZTtcblx0Ly/mqKHlnZd1aeaYvuekuuWxglxuXHRwdWJsaWMgbWFpblVJTGF5ZXI6IExheWEuU3ByaXRlO1xuXHQvL+W8ueWHuuWxgnVpXG5cdHB1YmxpYyBhbGVydFVJTGF5ZXI6IExheWEuU3ByaXRlO1xuXHQvL+aWh+Wtl+aPkOekuuWxglxuXHRwdWJsaWMgdGlwVUlMYXllcjogTGF5YS5TcHJpdGU7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWw6IENvbW1hbmRDaGFubmVsKSB7XG5cdFx0c3VwZXIoY2hhbm5lbCk7XG5cdFx0dGhpcy51aUxheWVyID0gbmV3IExheWEuU3ByaXRlKCk7XG5cdFx0dGhpcy5tYWluVUlMYXllciA9IG5ldyBMYXlhLlNwcml0ZSgpO1xuXHRcdHRoaXMuYWxlcnRVSUxheWVyID0gbmV3IExheWEuU3ByaXRlKCk7XG5cdFx0dGhpcy50aXBVSUxheWVyID0gbmV3IExheWEuU3ByaXRlKCk7XG5cdFx0TGF5YS5zdGFnZS5hZGRDaGlsZCh0aGlzLnVpTGF5ZXIpO1xuXHR9XG5cblx0cHVibGljIHNldE1haW5VSUxheWVySW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuXHRcdHRoaXMudWlMYXllci5hZGRDaGlsZCh0aGlzLm1haW5VSUxheWVyKTtcblx0XHR0aGlzLm1haW5VSUxheWVyLnpPcmRlciA9IGluZGV4O1xuXHR9XG5cblx0cHVibGljIHNldEFsZXJ0VUlMYXllckluZGV4KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcblx0XHR0aGlzLnVpTGF5ZXIuYWRkQ2hpbGQodGhpcy5hbGVydFVJTGF5ZXIpO1xuXHRcdHRoaXMuYWxlcnRVSUxheWVyLnpPcmRlciA9IGluZGV4O1xuXHR9XG5cblx0cHVibGljIHNldFRpcFVJTGF5ZXJJbmRleChpbmRleDogbnVtYmVyKTogdm9pZCB7XG5cdFx0dGhpcy51aUxheWVyLmFkZENoaWxkKHRoaXMudGlwVUlMYXllcik7XG5cdFx0dGhpcy50aXBVSUxheWVyLnpPcmRlciA9IGluZGV4O1xuXHR9XG59IiwiaW1wb3J0IEJhc2VNYW5hZ2VyIGZyb20gXCIuL0Jhc2VNYW5hZ2VyXCI7XG5pbXBvcnQgR2FtZUV2ZW50IGZyb20gXCIuLi9HYW1lRXZlbnRcIjtcbmltcG9ydCBDb25zdE5hbWUgZnJvbSBcIi4uL0NvbnN0TmFtZVwiO1xuaW1wb3J0IEJhc2VDb250cm9sIGZyb20gXCIuLi9nYW1lTW9kdWxlL0Jhc2VDb250cm9sXCI7XG5pbXBvcnQgTWFpblZpZXcgZnJvbSBcIi4uL3ZpZXdzL01haW5WaWV3XCI7XG5pbXBvcnQgTWVudVZpZXcgZnJvbSBcIi4uL3ZpZXdzL21lbnUvTWVudVZpZXdcIjtcbmltcG9ydCBCYXNlVmlldyBmcm9tIFwiLi4vdmlld3MvQmFzZVZpZXdcIjtcbmltcG9ydCBKc29uQ29uZmlnIGZyb20gXCIuLi9Kc29uQ29uZmlnXCI7XG5pbXBvcnQgVmlld0NvbmZpZ1ZvIGZyb20gXCIuLi92by9WaWV3Q29uZmlnVm9cIjtcbmltcG9ydCBMb2FkTWFuYWdlciBmcm9tIFwiLi9Mb2FkTWFuYWdlclwiO1xuaW1wb3J0IEdhbWVHbG9iYWwgZnJvbSBcIi4uL0dhbWVHbG9iYWxcIjtcblxuLyoqXG4gKiAuLi5cbiAqIEBhdXRob3IgandkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJTWFuYWdlciBleHRlbmRzIEJhc2VNYW5hZ2VyIHtcblx0Ly/nsbvmmKDlsIRcblx0cHJpdmF0ZSBfdmlld0NsYXNzSGFzaDogT2JqZWN0O1xuXHQvL+eVjOmdouWunuS+i1xuXHRwcml2YXRlIF92aWV3SW5zSGFzaDogT2JqZWN0O1xuXHRcblx0cHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWwpIHtcblx0XHRzdXBlcihjaGFubmVsKTtcblx0XHR0aGlzLl92aWV3SW5zSGFzaCA9IG5ldyBPYmplY3QoKTtcblx0XHRHYW1lRXZlbnQuaW5zLm9uKENvbnN0TmFtZS5TSE9XX1ZJRVcsIHRoaXMsIHRoaXMuc2hvd1ZpZXcpO1xuXHR9XG5cblx0Ly/ms6jlhozlkITnp43nlYzpnaJcblx0cHVibGljIGluaXQoKTogdm9pZCB7XG5cdH1cblxuXHQvL+iOt+WPlueVjOmdoizlpoLmnpzmsqHmnInnlYzpnaLlrp7kvovliJnliJvlu7pcblx0cHVibGljIGdldFZpZXcodmlld05hbWU6c3RyaW5nLHZpZXdEYXRhOmFueSk6IEJhc2VWaWV3IHtcblx0XHRsZXQgdmlldyA9IHRoaXMuX3ZpZXdJbnNIYXNoW3ZpZXdOYW1lXSB8fCB0aGlzLmNyZWF0ZVZpZXcodmlld05hbWUsdmlld0RhdGEpO1xuXHRcdHJldHVybiB2aWV3O1xuXHR9XG5cblx0LyoqIOeUn+aIkOeVjOmdoiovXG5cdHB1YmxpYyBjcmVhdGVWaWV3KHZpZXdOYW1lOiBzdHJpbmcsdmlld0RhdGE6YW55KTogdm9pZCB7XG5cdFx0bGV0IHZpZXdWbzogVmlld0NvbmZpZ1ZvID0gSnNvbkNvbmZpZy52aWV3Q29uZmlnVm9Kc29uW3ZpZXdOYW1lXTtcblx0XHQvLyBMYXlhLlZpZXcubG9hZChcInZpZXdzL1wiICsgdmlld1ZvLnJlc291cmNlVXJsLExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5sb2FkVmlld0pzb24sW3ZpZXdOYW1lXSkpO1xuXHRcdExheWEuU2NlbmUub3BlbihcInZpZXdzL1wiICsgdmlld1ZvLnJlc291cmNlVXJsLCB0cnVlLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIHRoaXMubG9hZFZpZXdKc29uLFt2aWV3TmFtZSx2aWV3RGF0YV0pKTtcblx0fVxuXG5cdC8qKuino+aekOeVjOmdoumFjee9ruaWh+S7tu+8jOWmguaenOacieeahOivnSAqL1xuXHRwcml2YXRlIGxvYWRWaWV3SnNvbih2aWV3TmFtZTpzdHJpbmcsdmlld0RhdGE6YW55LHZpZXc6IEJhc2VWaWV3KTp2b2lke1xuXHRcdGlmICh2aWV3KSB7XG5cdFx0XHR2aWV3LnZpZXdEYXRhID0gdmlld0RhdGE7XG5cdFx0XHRsZXQgdmlld1ZvOiBWaWV3Q29uZmlnVm8gPSBKc29uQ29uZmlnLnZpZXdDb25maWdWb0pzb25bdmlld05hbWVdO1xuXHRcdFx0aWYodmlld1ZvLmpzb25OYW1lKVxuXHRcdFx0XHRMYXlhLmxvYWRlci5sb2FkKExvYWRNYW5hZ2VyLmdldFVybCh2aWV3Vm8uanNvbk5hbWUsR2FtZUdsb2JhbC5KU09OKSxuZXcgTGF5YS5IYW5kbGVyKHRoaXMsdGhpcy5hZGRWaWV3LFt2aWV3TmFtZSx2aWV3XSkpOyAgXG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRoaXMuYWRkVmlldyh2aWV3TmFtZSx2aWV3KTtcblx0XHR9XG5cdH1cblxuXHQvKirliqDovb3lrozmiJDlkI7liJ3mrKHmmL7npLrnlYzpnaIgKi9cblx0cHJpdmF0ZSBhZGRWaWV3KHZpZXdOYW1lOnN0cmluZyx2aWV3OiBCYXNlVmlldyk6IHZvaWQge1xuXHRcdGlmICh2aWV3KSB7XG5cdFx0XHR0aGlzLl92aWV3SW5zSGFzaFt2aWV3TmFtZV0gPSB2aWV3O1xuXHRcdFx0dmlldy52aWV3TmFtZSA9IHZpZXdOYW1lO1xuXHRcdFx0bGV0IHZpZXdWbzogVmlld0NvbmZpZ1ZvID0gSnNvbkNvbmZpZy52aWV3Q29uZmlnVm9Kc29uW3ZpZXdOYW1lXTsgXG5cdFx0XHRpZih2aWV3Vm8uanNvbk5hbWUpXG5cdFx0XHRcdEpzb25Db25maWcuaW5zLnNldFZvKHZpZXdOYW1lLExvYWRNYW5hZ2VyLmdldFJlcyh2aWV3Vm8uanNvbk5hbWUsR2FtZUdsb2JhbC5KU09OKSk7XG5cdFx0XHR2YXIgdWlMYXllcjogTGF5YS5TcHJpdGUgPSB0aGlzLmNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLkxBWUVSX0NPTlRST0xMRVIsIENvbnN0TmFtZS5MQVlFUl9HRVRfVUlfTEFZRVJfQllfTkFNRSwgQ29uc3ROYW1lLk1BSU5fVUlfTEFZRVIpIGFzIExheWEuU3ByaXRlO1xuXHRcdFx0dmlldy5zaG93U2VsZih2aWV3Vm8uY2xvc2VPdGhlcix2aWV3Vm8uaXNNb2RlbCx1aUxheWVyKTtcblx0XHRcdHZpZXcuaW5pdCgpO1xuXHRcdH1cblx0fVxuXG5cdC8v5pi+56S655WM6Z2iXG5cdHB1YmxpYyBzaG93VmlldyhwYXJhbXM6IGFueSk6IHZvaWQge1xuXHRcdHZhciB2aWV3TmFtZTogc3RyaW5nID0gcGFyYW1zWzBdO1xuXHRcdGxldCB2aWV3RGF0YTphbnkgPSBwYXJhbXNbMV07XG5cdFx0Ly/liKTmlq3mmK/lkKblvIDlkK/lvZPliY3mqKHlnZcgLOmihOeVmVxuXHRcdHZhciB2aWV3OiBCYXNlVmlldyA9IHRoaXMuZ2V0Vmlldyh2aWV3TmFtZSx2aWV3RGF0YSk7XG5cdFx0aWYgKHZpZXcpIHtcblx0XHRcdHZpZXcudmlld0RhdGEgPSB2aWV3RGF0YTtcblx0XHRcdGxldCB2aWV3Vm86IFZpZXdDb25maWdWbyA9IEpzb25Db25maWcudmlld0NvbmZpZ1ZvSnNvblt2aWV3TmFtZV07XG5cdFx0XHR2YXIgdWlMYXllcjogTGF5YS5TcHJpdGUgPSB0aGlzLmNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLkxBWUVSX0NPTlRST0xMRVIsIENvbnN0TmFtZS5MQVlFUl9HRVRfVUlfTEFZRVJfQllfTkFNRSwgQ29uc3ROYW1lLk1BSU5fVUlfTEFZRVIpIGFzIExheWEuU3ByaXRlO1xuXHRcdFx0dmlldy5zaG93U2VsZih2aWV3Vm8uY2xvc2VPdGhlcix2aWV3Vm8uaXNNb2RlbCx1aUxheWVyKTtcblx0XHRcdHZpZXcuaW5pdCgpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyByZW1vdmVWaWV3QnlOYW1lKHZpZXdOYW1lOnN0cmluZyk6dm9pZCB7XG5cdFx0bGV0IHZpZXc6QmFzZVZpZXcgPSB0aGlzLl92aWV3SW5zSGFzaFt2aWV3TmFtZV07XG5cdFx0aWYodmlldyl7XG5cdFx0XHR2aWV3LnJlbW92ZVNlbGYoKTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZGVzdHJveVZpZXdCeU5hbWUodmlld05hbWU6c3RyaW5nKTp2b2lkIHtcblx0XHRkZWxldGUgdGhpcy5fdmlld0luc0hhc2hbdmlld05hbWVdO1xuXHR9XG5cblx0cHVibGljIGRlc3Ryb3koKTogdm9pZCB7XG5cdFx0Zm9yICh2YXIgY29udHJvbE5hbWUgaW4gdGhpcy5fdmlld0luc0hhc2gpIHtcblx0XHRcdGxldCB2aWV3ID0gdGhpcy5fdmlld0luc0hhc2hbY29udHJvbE5hbWVdO1xuXHRcdFx0dmlldy5kZXN0cm95KHRydWUpO1xuXHRcdFx0ZGVsZXRlIHRoaXMuX3ZpZXdJbnNIYXNoW2NvbnRyb2xOYW1lXTtcblx0XHR9XG5cdFx0dGhpcy5fdmlld0luc0hhc2ggPSBudWxsO1xuXHR9XG59IiwiaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuLi9jb250cm9sbGVyL0NvbW1hbmRDaGFubmVsXCI7XG5cbi8qKueOqeWutuaVsOaNruS7o+eQhizlpITnkIbnjqnlrrblkITnp43mlbDmja4s5Li76KaB5pyJ6YCa55+l77yM5a2Y5qGj77yM6I635Y+W5a2Y5qGj562J5pWw5o2u5pON5L2cKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFQcm94eXtcbiAgICBwdWJsaWMgZnVuY0xpc3RPYmo6T2JqZWN0PW5ldyBPYmplY3QoKTtcbiAgICBwcm90ZWN0ZWQgIGNoYW5uZWw6Q29tbWFuZENoYW5uZWw7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWw6Q29tbWFuZENoYW5uZWwpe1xuICAgICAgICB0aGlzLmNoYW5uZWw9Y2hhbm5lbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdCgpOnZvaWR7XG5cbiAgICB9XG5cbiAgICAvKiogXG4gICAgICog5rOo5YaM5pWw5o2u5pS55Y+Y5aSE55CGXG4gICAgKi9cbiAgICBwdWJsaWMgIGFkZERhdGFGdW5jKGRhdGFOYW1lOm51bWJlcixmdW5jOkZ1bmN0aW9uLHRoaXNPYmo6YW55KTp2b2lke1xuICAgICAgICBpZighdGhpcy5mdW5jTGlzdE9iai5oYXNPd25Qcm9wZXJ0eShkYXRhTmFtZSkpe1xuICAgICAgICAgICAgdGhpcy5mdW5jTGlzdE9ialtkYXRhTmFtZV09W107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mdW5jTGlzdE9ialtkYXRhTmFtZV0ucHVzaChuZXcgQXJyYXkoZnVuYyx0aGlzT2JqKSk7XG4gICAgfVxuXG4gICAgLyoqIFxuICAgICAqIOW5v+aSreW5tuaJp+ihjOWRveS7pFxuICAgICovXG4gICAgcHVibGljICBleGVjdXRlQ29tbWFuZChjb21tYW5kTmFtZTpudW1iZXIscGFyYW1zOmFueSk6dm9pZHtcbiAgICAgICAgdmFyIGZ1bmNBcnI6YW55PXRoaXMuZnVuY0xpc3RPYmpbY29tbWFuZE5hbWVdO1xuICAgICAgICBmb3IodmFyIGZ1bmNOYW1lIGluIGZ1bmNBcnIpe1xuICAgICAgICAgICAgdmFyIGZ1bmNMaXN0QXJyOmFueT1mdW5jQXJyW2Z1bmNOYW1lXTtcbiAgICAgICAgICAgIGZvcih2YXIgaTpudW1iZXI9MDtpPGZ1bmNMaXN0QXJyLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgICAgIHZhciBmdW5jOkZ1bmN0aW9uPWZ1bmNMaXN0QXJyWzBdO1xuICAgICAgICAgICAgICAgIHZhciB0aGlzT2JqOmFueT1mdW5jTGlzdEFyclsxXTtcbiAgICAgICAgICAgICAgICBmdW5jJiZmdW5jLmNhbGwodGhpc09iaixwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBDb21tYW5kQ2hhbm5lbCBmcm9tIFwiLi4vY29udHJvbGxlci9Db21tYW5kQ2hhbm5lbFwiO1xuaW1wb3J0IERhdGFQcm94eSBmcm9tIFwiLi9EYXRhUHJveHlcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5zdGFsbGF0aW9uUHJveHkgZXh0ZW5kcyBEYXRhUHJveHl7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNoYW5uZWw6Q29tbWFuZENoYW5uZWwpe1xuICAgICAgICBzdXBlcihjaGFubmVsKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uQ29udHJvbGwge1xuICAgIC8v5q+P5Liq6KeS6Imy6YO95pyJ5LiA5Liq5ZSv5LiA55qEcm9sZUlkXG4gICAgcHJpdmF0ZSBfcm9sZUlkOiBOdW1iZXIgPSAxO1xuICAgIC8v5piv5ZCm56e75YqoXG4gICAgcHVibGljIGlzTW92ZTogQm9vbGVhbjtcbiAgICAvL3jnp7vliqjns7vmlbBcbiAgICBwcml2YXRlIF9yeDogTnVtYmVyID0gMDtcbiAgICAvL3nnp7vliqjns7vmlbBcbiAgICBwcml2YXRlIF9yeTogTnVtYmVyID0gMDtcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iocm9sZUlkOiBOdW1iZXIpIHtcbiAgICAgICAgdGhpcy5fcm9sZUlkID0gcm9sZUlkO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcm9sZUlkKCk6IE51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb2xlSWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCByeCgpOiBOdW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcng7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCByeCh2YWx1ZTogTnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3J4ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCByeSgpOiBOdW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCByeSh2YWx1ZTogTnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3J5ID0gdmFsdWU7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VBbmltYXRpb24gZXh0ZW5kcyBMYXlhLkFuaW1hdGlvbiB7XG4gICAgcHVibGljIF9wcmVmaXg6IHN0cmluZztcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yib5bu65LiA57uE5Yqo55S755qEdXJs5pWw57uE77yI576O5pyv6LWE5rqQ5Zyw5Z2A5pWw57uE77yJXG4gICAgICogQHBhcmFtIGFuaU5hbWUgIOWKqOS9nOeahOWQjeensO+8jOeUqOS6jueUn+aIkHVybFxuICAgICAqIEBwYXJhbSBsZW5ndGggICDliqjnlLvmnIDlkI7kuIDluKfnmoTntKLlvJXlgLzvvIxcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYW5pVXJscyhhbmlOYW1lOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nW10ge1xuICAgICAgICB2YXIgdXJsczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaTogbnVtYmVyID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvL+WKqOeUu+i1hOa6kOi3r+W+hOimgeWSjOWKqOeUu+WbvumbhuaJk+WMheWJjeeahOi1hOa6kOWRveWQjeWvueW6lOi1t+adpVxuICAgICAgICAgICAgdXJscy5wdXNoKHRoaXMuX3ByZWZpeCArIGFuaU5hbWUgKyBcIl9cIiArIGkgKyBcIi5wbmdcIilcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJscztcbiAgICB9XG59IiwiaW1wb3J0IFJvbGUgZnJvbSBcIi4vUm9sZVwiO1xuXG4vKipcbiAqIC4uLlxuICogQGF1dGhvciBqd2RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5lbXkgZXh0ZW5kcyBSb2xlIHtcblx0cHVibGljIGNvbnN0cnVjdG9yKHJvbGVOYW1lOiBzdHJpbmcsIHJvbGVJZDogbnVtYmVyKSB7XG5cdFx0c3VwZXIocm9sZU5hbWUsIHJvbGVJZCk7XG5cdH1cblxuXHRwdWJsaWMgaW5pdCgpOiB2b2lkIHtcblx0XHRzdXBlci5pbml0KCk7XG5cdFx0dGhpcy5pc1JlY3ljbGUgPSBmYWxzZTtcblx0XHR0aGlzLmlzRGllID0gZmFsc2U7XG5cdFx0dGhpcy5fcm9sZUNvbnRyb2xsLmlzTW92ZSA9IHRydWU7XG5cdFx0dGhpcy5fcm9sZUNvbnRyb2xsLnJ4ID0gLTE7XG5cdFx0dGhpcy5faHVydCA9IDY7XG5cdH1cblxuXHRwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuXHRcdC8vIGlmKHRoaXMuX3JvbGVDb250cm9sbC5pc01vdmUpIHtcblx0XHQvLyAgICAgLy8gaWYoIWxhc3RUaW1lKWxhc3RUaW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcblx0XHQvLyAgICAgLy8gZGVsdFRpbWUgPSAoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIGxhc3RUaW1lKTtcblx0XHQvLyAgICAgLy8gdmFyIHBvc1g6bnVtYmVyID0gdGhpcy5fZ2FtZUFuaS54ICsgKCh0aGlzLl9yb2xlQ29udHJvbGwucngqc3BlZWQgKyBzY2VuZVNwZWVkKSAqIGRlbHRUaW1lKS8yMCA7XG5cdFx0Ly8gICAgIHZhciBwb3NYOm51bWJlciA9IHRoaXMuX2dhbWVBbmkueCArIHRoaXMuX3JvbGVDb250cm9sbC5yeCpzcGVlZCA7XG5cdFx0Ly8gICAgIHZhciBwb3NZOm51bWJlciA9IHRoaXMuX2dhbWVBbmkueSArIHRoaXMuX3JvbGVDb250cm9sbC5yeSpzcGVlZDtcblx0XHQvLyAgICAgdmFyIG1vdmVCb3VuZHM6QXJyYXkgPSB0aGlzLl9nYW1lQW5pLm1vdmVCb3VuZHNBcnI7XG5cdFx0Ly8gICAgIHRoaXMuX2dhbWVBbmkueCA9IHBvc1g7XG5cdFx0Ly8gICAgIHRoaXMuX2dhbWVBbmkueSA9IHBvc1k7XG5cdFx0Ly8gXHRpZihwb3NYIDwgLTUwKSB7XG5cdFx0Ly8gXHRcdHRoaXMuaXNSZWN5Y2xlID0gdHJ1ZTtcblx0XHQvLyBcdH1cblx0XHQvLyAgICAgLy8gbGFzdFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXHRcdC8vIFx0aWYodGhpcy5oYXNCdWxsZXQpe1xuXHRcdC8vIFx0XHRkZWx0VGltZSsrO1xuXHRcdC8vIFx0XHRpZihkZWx0VGltZSA9PSAgYnVsbGV0Q29uZmlnVm8uZGVsdFRpbWUpe1xuXHRcdC8vIFx0XHRcdHRoaXMuZGVsdFRpbWUgPSAwO1xuXHRcdC8vIFx0XHRcdHRyYW5zZm9ybVBvaW50LnggPSBsb2NhbFBvaW50Lng7XG5cdFx0Ly8gXHRcdFx0dHJhbnNmb3JtUG9pbnQueSA9IGxvY2FsUG9pbnQueTtcblx0XHQvLyBcdFx0XHR0aGlzLl9nYW1lQW5pLmxvY2FsVG9HbG9iYWwodHJhbnNmb3JtUG9pbnQpO1xuXHRcdC8vIFx0XHRcdHRoaXMuYnVsbGV0R3JvdXAuYWRkQnVsbGV0KHRyYW5zZm9ybVBvaW50KTtcblx0XHQvLyBcdFx0fVxuXHRcdC8vIFx0fVxuXHRcdC8vIH1cblx0XHQvLyB0aGlzLmlzTW92ZSA9IHRoaXMuX3JvbGVDb250cm9sbC5pc01vdmU7XG5cdH1cblxuXHRwcm90ZWN0ZWQgc2V0IGlzTW92ZSh2YWx1ZTogYm9vbGVhbikge1xuXHRcdC8vIGlmKF9pc0RpZXx8X2lzSHVydCkgcmV0dXJuO1xuXHRcdC8vIGlmKF9pc01vdmUgIT0gdmFsdWUpIHtcblx0XHQvLyAgICAgX2lzTW92ZSA9IHZhbHVlO1xuXHRcdC8vICAgICBpZih2YWx1ZSkge1xuXHRcdC8vICAgICAgICAgc2V0QW5pbWF0aW9uKFwibW92ZVwiKTtcblx0XHQvLyAgICAgfWVsc2Uge1xuXHRcdC8vICAgICAgICAgc2V0QW5pbWF0aW9uKFwibW92ZVwiKTtcblx0XHQvLyAgICAgfVxuXHRcdC8vIH1cblx0fVxuXG5cdHB1YmxpYyBkaWVDb21wbGV0ZSgpOiB2b2lkIHtcblx0XHRzdXBlci5kaWVDb21wbGV0ZSgpO1xuXHRcdHRoaXMuaXNSZWN5Y2xlID0gdHJ1ZTtcblx0fVxuXG5cdHB1YmxpYyBiZUh1cnRlZCgpOiB2b2lkIHtcblx0XHR0aGlzLl9odXJ0LS07XG5cdFx0aWYgKHRoaXMuX2h1cnQgPD0gMCkge1xuXHRcdFx0dGhpcy5pc0RpZSA9IHRydWU7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuaXNIdXJ0ID0gdHJ1ZTtcblx0fVxufSIsImltcG9ydCBCYXNlQW5pbWF0aW9uIGZyb20gXCIuL0Jhc2VBbmltYXRpb25cIjtcbmltcG9ydCBMb2FkTWFuYWdlciBmcm9tIFwiLi4vbWFuYWdlci9Mb2FkTWFuYWdlclwiO1xuaW1wb3J0IEdhbWVHbG9iYWwgZnJvbSBcIi4uL0dhbWVHbG9iYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUFuaW1hdGlvbiBleHRlbmRzIEJhc2VBbmltYXRpb257XG4gICAgcHJpdmF0ZSAgX2xvYWRVcmw6IHN0cmluZztcbiAgICBwcml2YXRlICBfYWN0aW9uTmFtZUxpc3Q6IHN0cmluZ1tdID0gW107XG4gICAgcHJpdmF0ZSAgX2FjdGlvbkZyYW1lOk9iamVjdCA9IG5ldyBPYmplY3QoKTtcbiAgICBwdWJsaWMgc3RhdGljIE1PRFVMOnN0cmluZyA9IFwibW9kdWxcIjtcbiAgICBwcml2YXRlICBfY3VycmVudEFjdGlvbk5hbWU6c3RyaW5nO1xuICAgIHByaXZhdGUgIF9pc0xvYWRlZDpCb29sZWFuID0gZmFsc2U7XG4gICAgLy/op5LoibLnp7vliqjovrnnlYzvvIzkuIrvvIzkuIvvvIzlt6bvvIzlj7NcbiAgICBwdWJsaWMgIG1vdmVCb3VuZHNBcnI6bnVtYmVyW10gPSBbMCwwLDAsMF07XG5cbiAgICBwdWJsaWMgbG9hZEF0bGFzKHVybDpzdHJpbmcsIGxvYWRlZDpMYXlhLkhhbmRsZXIgPSBudWxsLCBjYWNoZU5hbWU6c3RyaW5nID0gXCJcIik6TGF5YS5BbmltYXRpb24ge1xuICAgICAgICB0aGlzLl9sb2FkVXJsID0gTG9hZE1hbmFnZXIuZ2V0VXJsKHVybCxHYW1lR2xvYmFsLlJPTEUpO1xuICAgICAgICByZXR1cm4gc3VwZXIubG9hZEF0bGFzKHRoaXMuX2xvYWRVcmwsTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uTG9hZGVkKSk7XG4gICAgfVxuICAgIHByaXZhdGUgc3RhcnRMb2FkKCk6dm9pZCB7XG4gICAgICAgIExheWEubG9hZGVyLmxvYWQodGhpcy5fbG9hZFVybCwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uTG9hZGVkKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkxvYWRlZCgpOnZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX2lzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIF9lOmFueT0gTGF5YS5sb2FkZXIuZ2V0UmVzKHRoaXMuX2xvYWRVcmwpO1xuICAgICAgICB0aGlzLl9wcmVmaXggPSBfZS5tZXRhLnByZWZpeDtcbiAgICAgICAgdmFyIGZyYW1lczogT2JqZWN0ID0gX2UuZnJhbWVzO1xuICAgICAgICAvL+eUn+aIkOWKqOS9nOWIl+ihqFxuICAgICAgICBmb3IodmFyIGZ1bGxOYW1lIGluIGZyYW1lcykge1xuICAgICAgICAgICAgdmFyIGFjdGlvbk5hbWU6c3RyaW5nID0gZnVsbE5hbWUuc3BsaXQoXCJfXCIpWzBdO1xuICAgICAgICAgICAgaWYodGhpcy5fYWN0aW9uTmFtZUxpc3QuaW5kZXhPZihhY3Rpb25OYW1lKTwwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aW9uTmFtZUxpc3QucHVzaChhY3Rpb25OYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25GcmFtZVthY3Rpb25OYW1lXSA9IDE7XG4gICAgICAgICAgICB9ZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbkZyYW1lW2FjdGlvbk5hbWVdKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5QWN0aW9uKFwibW92ZVwiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGFzQWN0aW9uKGFjdGlvbk5hbWUpOmJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uTmFtZUxpc3QuaW5kZXhPZihhY3Rpb25OYW1lKT4tMTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheUFjdGlvbihhY3Rpb25OYW1lOnN0cmluZyAsc3RhcnQ6bnVtYmVyID0gMCxsb29wOmJvb2xlYW4gPSB0cnVlLG5hbWU6c3RyaW5nPSBHYW1lQW5pbWF0aW9uLk1PRFVMKTp2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0xvYWRlZCB8fCB0aGlzLl9hY3Rpb25OYW1lTGlzdC5pbmRleE9mKGFjdGlvbk5hbWUpPT0tMSkgcmV0dXJuO1xuICAgICAgICBpZih0aGlzLl9jdXJyZW50QWN0aW9uTmFtZSA9PSBhY3Rpb25OYW1lKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2N1cnJlbnRBY3Rpb25OYW1lID0gYWN0aW9uTmFtZTtcbiAgICAgICAgTGF5YS5BbmltYXRpb24uY3JlYXRlRnJhbWVzKHRoaXMuYW5pVXJscyhhY3Rpb25OYW1lLHRoaXMuX2FjdGlvbkZyYW1lW2FjdGlvbk5hbWVdKSxHYW1lQW5pbWF0aW9uLk1PRFVMKTtcbiAgICAgICAgdGhpcy5wbGF5KHN0YXJ0LCBsb29wLCBhY3Rpb25OYW1lKTtcbiAgICAgICAgaWYoIXRoaXMuZ3JhcGhpY3MuX29uZSl7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBpdm90KHRoaXMuZ3JhcGhpY3MuX29uZS53aWR0aC8yLDApO1xuICAgICAgICB2YXIgbW92ZUJvdW5kc1JlY3Q6TGF5YS5SZWN0YW5nbGUgPSB0aGlzLmdldEdyYXBoaWNCb3VuZHMoKTtcbiAgICAgICAgdGhpcy5tb3ZlQm91bmRzQXJyWzFdID0gTGF5YS5zdGFnZS5oZWlnaHQgLSBtb3ZlQm91bmRzUmVjdC5oZWlnaHQ7XG4gICAgICAgIHRoaXMubW92ZUJvdW5kc0FyclszXSA9IExheWEuc3RhZ2Uud2lkdGggLSBtb3ZlQm91bmRzUmVjdC53aWR0aC8yO1xuICAgICAgICAvLyBkZWJ1Z2dlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVjeWNsZSgpOnZvaWQge1xuICAgICAgICAvLyB0aGlzLnN0b3AoKTtcbiAgICAgICAgLy8gdGhpcy5wYXJlbnQgJiYgKHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpKTtcbiAgICB9XG59IiwiaW1wb3J0IFJvbGUgZnJvbSBcIi4vUm9sZVwiO1xuaW1wb3J0IENvbW1hbmRDaGFubmVsIGZyb20gXCIuLi9jb250cm9sbGVyL0NvbW1hbmRDaGFubmVsXCI7XG5pbXBvcnQgQ29uc3ROYW1lIGZyb20gXCIuLi9Db25zdE5hbWVcIjtcblxuLyoqXG4gKiAuLi5cbiAqIEBhdXRob3IgandkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlcm8gZXh0ZW5kcyBSb2xlIHtcbiAgICBwcml2YXRlIF9mYUJhb0FycjogYW55ID0gW107XG4gICAgLy/orrDlvZXop5LoibLkvY3nva7liJfooahcbiAgICBwcml2YXRlIF9wb3NBcnI6IGFueSA9IFtdO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihyb2xlTmFtZTogc3RyaW5nLCByb2xlSWQ6IG51bWJlcikge1xuICAgICAgICBzdXBlcihyb2xlTmFtZSwgcm9sZUlkKTtcbiAgICAgICAgLy8gZm9yKHZhciBpOm51bWJlciA9MDtpPHRoaXMucm9sZVNldHRpbmdWby5mYkFyci5sZW5ndGg7aSsrKXtcbiAgICAgICAgLy8gICAgIHZhciBmYUJhbzpGYUJhbyA9IG5ldyBGYUJhbygpO1xuICAgICAgICAvLyAgICAgZmFCYW8uc2V0RmFCYW9Ta2luKHJvbGVTZXR0aW5nVm8uZmJBcnJbaV0pO1xuICAgICAgICAvLyAgICAgX2ZhQmFvQXJyLnB1c2goZmFCYW8pO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFN0YWdlKHBvcyk6IHZvaWQge1xuICAgICAgICB2YXIgY2hhbm5lbDpDb21tYW5kQ2hhbm5lbCA9IENvbW1hbmRDaGFubmVsLmluc3RhbmNlO1xuICAgICAgICB0aGlzLmdhbWVBbmkueCA9IE1hdGguY2VpbChwb3MueCk7XG4gICAgICAgIHRoaXMuZ2FtZUFuaS55ID0gTWF0aC5jZWlsKHBvcy55KTtcbiAgICAgICAgdmFyIHJvbGVMYXllcjpMYXlhLlNwcml0ZSA9IGNoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLkxBWUVSX0NPTlRST0xMRVIsIENvbnN0TmFtZS5MQVlFUl9HRVRfU0NFTkVfTEFZRVJfQllfTkFNRSxDb25zdE5hbWUuUk9MRV9MQVlFUikgYXMgTGF5YS5TcHJpdGU7XG4gICAgICAgIHJvbGVMYXllci5hZGRDaGlsZCh0aGlzLmdhbWVBbmkpO1xuICAgICAgICAvLyBmb3IgZWFjaCh2YXIgZmFCYW86RmFCYW8gaW4gdGhpcy5fZmFCYW9BcnIpe1xuICAgICAgICAvLyAgICAgcm9sZUxheWVyLmFkZENoaWxkKGZhQmFvKTtcbiAgICAgICAgLy8gICAgIHZhciBmYUJhb1g6bnVtYmVyID0gcG9zLnggKyBwYXJzZW51bWJlcihmYUJhby5mYkNvbmZpZ1ZvLnN0YXJ0UG9zWCk7XG4gICAgICAgIC8vICAgICB2YXIgZmFCYW9ZOm51bWJlcjtcbiAgICAgICAgLy8gICAgIHZhciBzdGFydFBvc1k6c3RyaW5nID0gZmFCYW8uZmJDb25maWdWby5zdGFydFBvc1k7XG4gICAgICAgIC8vICAgICBpZihzdGFydFBvc1kuaW5kZXhPZihcIi1cIikgPT1zdGFydFBvc1kubGVuZ3RoIC0xKXtcbiAgICAgICAgLy8gICAgICAgICAvL+ebuOWvueinkuiJsuWktOmhtuWBj+enu+i3neemu+WumuS9jee9rlxuICAgICAgICAvLyAgICAgICAgIGZhQmFvWSA9IHBvcy55IC0gcm9sZVNldHRpbmdWby5yb2xlSGVpZ2h0ICsgcGFyc2VudW1iZXIoc3RhcnRQb3NZLnN1YnN0cigwLHN0YXJ0UG9zWS5sZW5ndGggLTEpKTtcbiAgICAgICAgLy8gICAgIH1lbHNlIGlmKHBhcnNlRmxvYXQoc3RhcnRQb3NZKSA8MSl7XG4gICAgICAgIC8vICAgICAgICAgLy/mjInnhafop5LoibLouqvpq5jlrprkvY3nva5cbiAgICAgICAgLy8gICAgICAgICBmYUJhb1kgPSBwb3MueSAtIHJvbGVTZXR0aW5nVm8ucm9sZUhlaWdodCAqIHBhcnNlbnVtYmVyKHN0YXJ0UG9zWS5zdWJzdHIoMCxzdGFydFBvc1kubGVuZ3RoIC0xKSk7XG4gICAgICAgIC8vICAgICB9ZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgLy/mjInnhafop5LoibLkvY3nva7lgY/np7tcbiAgICAgICAgLy8gICAgICAgICBmYUJhb1kgPSBwb3MueSArIHBhcnNlbnVtYmVyKHN0YXJ0UG9zWSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICB2YXIgZmFCYW9Qb3MgOlBvbnVtYmVyID0gbmV3IFBvbnVtYmVyKGZhQmFvWCxmYUJhb1kpO1xuICAgICAgICAvLyAgICAgZmFCYW8uYWRkRmFCYW8oZmFCYW9Qb3MpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHZhciBidWxsZXRMYXllcjpTcHJpdGUgPSBjaGFubmVsLnBvc3RDb21tYW5kKENvbnN0TmFtZS5MQVlFUl9DT05UUk9MTEVSLCBDb25zdE5hbWUuR0VUX1JPTEVfTEFZRVIsW0NvbnN0TmFtZS5CVUxMRVRfTEFZRVJdKSBhcyBTcHJpdGU7XG4gICAgICAgIC8vIGJ1bGxldExheWVyLmFkZENoaWxkKHRoaXMuYnVsbGV0R3JvdXApO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIC8vIHZhciByZWN0OlJlY3RhbmdsZSA9IHRoaXMuX2dhbWVBbmkuZ2V0R3JhcGhpY0JvdW5kcygpO1xuICAgICAgICAvLyB0aGlzLl9nYW1lQW5pLmdyYXBoaWNzLmRyYXdSZWN0KHJlY3QueCxyZWN0LnkscmVjdC53aWR0aCxyZWN0LmhlaWdodCxcIiMwMDAwMDBcIik7XG4gICAgICAgIC8vIGlmKHRoaXMuX3JvbGVDb250cm9sbC5pc01vdmUpIHtcbiAgICAgICAgLy8gICAgIC8vIGlmKCFsYXN0VGltZSlsYXN0VGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIC8vICAgICAvLyBkZWx0VGltZSA9ICgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gbGFzdFRpbWUpO1xuICAgICAgICAvLyAgICAgLy8gdmFyIHBvc1g6bnVtYmVyID0gdGhpcy5fZ2FtZUFuaS54ICsgKCh0aGlzLl9yb2xlQ29udHJvbGwucngqc3BlZWQgKyBzY2VuZVNwZWVkKSAqIGRlbHRUaW1lKS8yMCA7XG4gICAgICAgIC8vICAgICB2YXIgcG9zWDpudW1iZXIgPSB0aGlzLl9nYW1lQW5pLnggKyB0aGlzLl9yb2xlQ29udHJvbGwucngqc3BlZWQgO1xuICAgICAgICAvLyAgICAgdmFyIHBvc1k6bnVtYmVyID0gdGhpcy5fZ2FtZUFuaS55ICsgdGhpcy5fcm9sZUNvbnRyb2xsLnJ5KnNwZWVkO1xuICAgICAgICAvLyAgICAgdmFyIG1vdmVCb3VuZHM6QXJyYXkgPSB0aGlzLl9nYW1lQW5pLm1vdmVCb3VuZHNBcnI7XG4gICAgICAgIC8vICAgICBpZihwb3NYID4gbW92ZUJvdW5kc1syXSAgJiYgcG9zWCAgPCBtb3ZlQm91bmRzWzNdKVxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2dhbWVBbmkueCA9IHBvc1g7XG4gICAgICAgIC8vICAgICBpZihwb3NZICA+IG1vdmVCb3VuZHNbMF0gJiYgcG9zWSAgPCBtb3ZlQm91bmRzWzFdKVxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2dhbWVBbmkueSA9IHBvc1k7XG4gICAgICAgIC8vICAgICAvLyBsYXN0VGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIC8vICAgICBpZihfcG9zQXJyLmxlbmd0aCA8IDE1MClcbiAgICAgICAgLy8gICAgIHtcbiAgICAgICAgLy8gICAgICAgICBfcG9zQXJyLnVuc2hpZnQobmV3IFBvbnVtYmVyKHRoaXMuX2dhbWVBbmkueCx0aGlzLl9nYW1lQW5pLnkpKTtcbiAgICAgICAgLy8gICAgIH1lbHNlIHtcbiAgICAgICAgLy8gICAgICAgICBfcG9zQXJyLnBvcCgpO1xuICAgICAgICAvLyAgICAgICAgIF9wb3NBcnIudW5zaGlmdChuZXcgUG9udW1iZXIodGhpcy5fZ2FtZUFuaS54LHRoaXMuX2dhbWVBbmkueSkpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgZm9yIGVhY2godmFyIGZhQmFvOkZhQmFvIGluIHRoaXMuX2ZhQmFvQXJyKXtcbiAgICAgICAgLy8gICAgIHZhciBwb3M6UG9udW1iZXIgPSBfcG9zQXJyW2ZhQmFvLmZiQ29uZmlnVm8ucG9zTm9dO1xuICAgICAgICAvLyAgICAgICAgIGlmKHBvcyl7XG4gICAgICAgIC8vICAgICAgICAgICAgIGZhQmFvLnBvcyhwb3MueCxwb3MueSk7XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIGZhQmFvLnVwZGF0ZSgpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGlmKGhhc0J1bGxldCl7XG4gICAgICAgIC8vICAgICBkZWx0VGltZSsrO1xuICAgICAgICAvLyAgICAgaWYoZGVsdFRpbWUgPT0gYnVsbGV0Q29uZmlnVm8uZGVsdFRpbWUpe1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuZGVsdFRpbWUgPSAwO1xuICAgICAgICAvLyAgICAgICAgIHRyYW5zZm9ybVBvbnVtYmVyLnggPSBsb2NhbFBvbnVtYmVyLng7XG4gICAgICAgIC8vICAgICAgICAgdHJhbnNmb3JtUG9udW1iZXIueSA9IGxvY2FsUG9udW1iZXIueTtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLl9nYW1lQW5pLmxvY2FsVG9HbG9iYWwodHJhbnNmb3JtUG9udW1iZXIpO1xuICAgICAgICAvLyAgICAgICAgIHRoaXMuYnVsbGV0R3JvdXAuYWRkQnVsbGV0KHRyYW5zZm9ybVBvbnVtYmVyKTtcbiAgICAgICAgLy8gICAgICAgICBTb3VuZE1hbmFnZXIucGxheVNvdW5kKExvYWRNYW5hZ2VyLmdldFVybChidWxsZXRDb25maWdWby5idWxsZXRTbmQsR2FtZUdsb2JhbC5TT1VORCkpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gdGhpcy5pc01vdmUgPSB0aGlzLl9yb2xlQ29udHJvbGwuaXNNb3ZlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXQgaXNNb3ZlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIC8vICAgICBpZihfaXNEaWUpIHJldHVybjtcbiAgICAgICAgLy8gICAgIGlmKF9pc01vdmUgIT0gdmFsdWUpIHtcbiAgICAgICAgLy8gICAgICAgICBfaXNNb3ZlID0gdmFsdWU7XG4gICAgICAgIC8vICAgICAgICAgaWYodmFsdWUpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgc2V0QW5pbWF0aW9uKFwiYXR0YWNrXCIpO1xuICAgICAgICAvLyAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgc2V0QW5pbWF0aW9uKFwiYXR0YWNrXCIpO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuXG4gICAgfVxuXG59IiwiaW1wb3J0IEdhbWVBbmltYXRpb24gZnJvbSBcIi4vR2FtZUFuaW1hdGlvblwiO1xuaW1wb3J0IEFjdGlvbkNvbnRyb2xsIGZyb20gXCIuL0FjdGlvbkNvbnRyb2xsXCI7XG5pbXBvcnQgTG9hZE1hbmFnZXIgZnJvbSBcIi4uL21hbmFnZXIvTG9hZE1hbmFnZXJcIjtcbmltcG9ydCBHYW1lR2xvYmFsIGZyb20gXCIuLi9HYW1lR2xvYmFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvbGV7XG4gICAgcHJvdGVjdGVkICBfZ2FtZUFuaTpHYW1lQW5pbWF0aW9uO1xuICAgIHByb3RlY3RlZCAgc3BlZWQgOm51bWJlciA9IDg7XG4gICAgLy/lnLrmma/np7vliqjpgJ/luqbvvIzmoLnmja7mraTpgJ/luqbkv67mraPop5LoibLnmoTmmL7npLrpgJ/luqZcbiAgICBwdWJsaWMgIHNjZW5lU3BlZWQ6bnVtYmVyID0wO1xuICAgIHByb3RlY3RlZCAgX3JvbGVDb250cm9sbDpBY3Rpb25Db250cm9sbDtcbiAgICBwcm90ZWN0ZWQgIF9yb2xlSWQ6bnVtYmVyID0gLTE7XG4gICAgcHJvdGVjdGVkICBfcm9sZU5hbWU6c3RyaW5nO1xuICAgIHByb3RlY3RlZCAgX2J1bGxldEdyb3VwOmFueTtcbiAgICBwcm90ZWN0ZWQgIHRyYW5zZm9ybVBvaW50OkxheWEuUG9pbnQgPSBuZXcgTGF5YS5Qb2ludCgpO1xuICAgIHByb3RlY3RlZCAgbG9jYWxQb2ludDpMYXlhLlBvaW50ID0gbmV3IExheWEuUG9pbnQoKTtcbiAgICBwdWJsaWMgIGhhc0J1bGxldDpib29sZWFuID0gZmFsc2U7XG4gICAgcHJvdGVjdGVkICBfaXNSZWN5Y2xlOmJvb2xlYW47XG4gICAgcHJvdGVjdGVkICBfaXNEaWU6Ym9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgIF9pc0h1cnQ6Ym9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgIF9odXJ0Om51bWJlciA9IDY7XG4gICAgLy8gcHVibGljICBidWxsZXRDb25maWdWbzpCdWxsZXRDb25maWdWbyA7XG4gICAgcHJvdGVjdGVkICByb2xlU2V0dGluZ1ZvIDphbnk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvbGVOYW1lOnN0cmluZyxyb2xlSWQ6bnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3JvbGVOYW1lID0gcm9sZU5hbWU7XG4gICAgICAgIHRoaXMuX3JvbGVJZCA9IHJvbGVJZDtcbiAgICAgICAgdGhpcy5fZ2FtZUFuaSA9IG5ldyBHYW1lQW5pbWF0aW9uKCk7XG4gICAgICAgIHRoaXMuX3JvbGVDb250cm9sbCA9IG5ldyBBY3Rpb25Db250cm9sbChyb2xlSWQpO1xuICAgICAgICAvLyByb2xlU2V0dGluZ1ZvID0gSnNvbkNvbmZpZy5yb2xlU2V0dGluZ0pzb25bcm9sZU5hbWVdO1xuICAgICAgICAvLyB0aGlzLl9nYW1lQW5pLmludGVydmFsID0gcm9sZVNldHRpbmdWby5pbnRlcnZhbDtcbiAgICAgICAgLy8gdGhpcy5zcGVlZCA9IHJvbGVTZXR0aW5nVm8uc3BlZWQ7XG4gICAgICAgIC8vIGhhc0J1bGxldCA9IHJvbGVTZXR0aW5nVm8uaGFzQnVsbGV0O1xuICAgICAgICAvLyBpZihoYXNCdWxsZXQpIHtcbiAgICAgICAgLy8gICAgIHZhciBidWxsZXRQb3NWbzpCdWxsZXRQb3NWbyA9IEpzb25Db25maWcuYnVsbGV0UG9zSnNvbltyb2xlTmFtZV07XG4gICAgICAgIC8vICAgICBsb2NhbFBvaW50LnggPSBidWxsZXRQb3NWby5wb3NYQXJyWzBdO1xuICAgICAgICAvLyAgICAgbG9jYWxQb2ludC55ID0gYnVsbGV0UG9zVm8ucG9zWUFyclswXTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIHB1YmxpYyAgaW5pdCgpOnZvaWQge1xuICAgICAgICB0aGlzLl9nYW1lQW5pLnBsYXkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgIGFkZFN0YWdlKHBvcyk6dm9pZCB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgIHNldFNraW4oc2tpbjpzdHJpbmcpOnZvaWQge1xuICAgICAgICB0aGlzLl9nYW1lQW5pLmxvYWRBdGxhcyhza2luKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0QW5pbWF0aW9uKGFjdGlvbk5hbWU6c3RyaW5nKTp2b2lkIHtcbiAgICAgICAgdGhpcy5fZ2FtZUFuaS5wbGF5QWN0aW9uKGFjdGlvbk5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRCdWxsZXRTa2luKCk6dm9pZCB7XG4gICAgICAgIC8vIHZhciByb2xlU2V0dGluZ1ZvOlJvbGVTZXR0aW5nVm8gPSBKc29uQ29uZmlnLnJvbGVTZXR0aW5nSnNvbltyb2xlTmFtZV07XG4gICAgICAgIC8vIHRoaXMuYnVsbGV0R3JvdXAuc2V0QnVsbGV0U2tpbihyb2xlU2V0dGluZ1ZvLmJ1bGxldE5hbWUscm9sZVNldHRpbmdWby5idWxsZXREaXIpO1xuICAgICAgICAvLyBidWxsZXRDb25maWdWbyA9IEpzb25Db25maWcuYnVsbGV0Q29uZmlnSnNvbltyb2xlU2V0dGluZ1ZvLmJ1bGxldE5hbWVdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfaXNNb3ZlOmJvb2xlYW4gPSBmYWxzZTtcbiAgICBcbiAgICBwdWJsaWMgZ2V0IHJvbGVJZCgpOm51bWJlciBcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yb2xlSWQ7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXQgcm9sZU5hbWUoKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9sZU5hbWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBnYW1lQW5pKCk6R2FtZUFuaW1hdGlvbiBcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nYW1lQW5pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IHJvbGVDb250cm9sbCgpOkFjdGlvbkNvbnRyb2xsIFxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvbGVDb250cm9sbDtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGdldCBidWxsZXRHcm91cCgpOmFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWxsZXRHcm91cDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGJ1bGxldEdyb3VwKHZhbHVlOmFueSkge1xuICAgICAgICB0aGlzLl9idWxsZXRHcm91cCA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNEaWUoKTpib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRGllO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgaXNEaWUodmFsdWU6Ym9vbGVhbikge1xuICAgICAgICBpZih0aGlzLl9pc0RpZSA9PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICBpZih2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJkaWVcIik7XG4gICAgICAgICAgICAvLyB0aGlzLl9nYW1lQW5pLm9uY2UoRXZlbnQuQ09NUExFVEUsdGhpcyx0aGlzLmRpZUNvbXBsZXRlKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBpc0h1cnQodmFsdWU6Ym9vbGVhbikge1xuICAgICAgICBpZih0aGlzLl9pc0h1cnQgPT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgaWYodmFsdWUpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuX2dhbWVBbmkuaGFzQWN0aW9uKFwiaHVydFwiKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oXCJodXJ0XCIpO1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuX2dhbWVBbmkub25jZShMYXlhLkV2ZW50LkNPTVBMRVRFLHRoaXMsdGhpcy5odXJ0Q29tcGxldGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBMYXlhLlNvdW5kTWFuYWdlci5wbGF5U291bmQoTG9hZE1hbmFnZXIuZ2V0VXJsKFwiYmVIaXRlZF9zbmRcIixHYW1lR2xvYmFsLlNPVU5EKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgaHVydENvbXBsZXRlKCk6dm9pZCB7XG4gICAgICAgIHRoaXMuX2lzSHVydCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9nYW1lQW5pLnBsYXlBY3Rpb24oXCJtb3ZlXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaWVDb21wbGV0ZSgpOnZvaWQge1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2V0IGlzUmVjeWNsZSh2YWx1ZTpib29sZWFuKXtcbiAgICAgICAgdGhpcy5faXNSZWN5Y2xlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpc1JlY3ljbGUoKTpib29sZWFue1xuICAgICAgICByZXR1cm4gdGhpcy5faXNSZWN5Y2xlO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZGVsdFRpbWU6bnVtYmVyID0gMDtcbiAgICBwcm90ZWN0ZWQgbGFzdFRpbWU6bnVtYmVyID0gMDtcbiAgICBwdWJsaWMgdXBkYXRlKCk6dm9pZCB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVjeWNsZSgpOnZvaWQge1xuICAgICAgICB0aGlzLl9nYW1lQW5pLnJlY3ljbGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYmVIdXJ0ZWQoKTp2b2lkIHtcblxuICAgIH1cbn0iLCJpbXBvcnQgSnNvbkNvbmZpZyBmcm9tIFwiLi4vSnNvbkNvbmZpZ1wiO1xuaW1wb3J0IFZpZXdDb25maWdWbyBmcm9tIFwiLi4vdm8vVmlld0NvbmZpZ1ZvXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VWaWV3IGV4dGVuZHMgTGF5YS5EaWFsb2d7XG5cbiAgICBwcm90ZWN0ZWQgX3ZpZXdOYW1lOnN0cmluZztcbiAgICBwdWJsaWMgdmlld0RhdGE6YW55O1xuICAgIHB1YmxpYyBpc01vZGVsOmJvb2xlYW47XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZVZpZXcodmlldzpPYmplY3QpOnZvaWR7XG4gICAgICAgIHN1cGVyLmNyZWF0ZVZpZXcodmlldyk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCB2aWV3TmFtZSh2YWx1ZTpzdHJpbmcpe1xuICAgICAgICB0aGlzLl92aWV3TmFtZSA9IHZhbHVlO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2hvd1NlbGYoY2xvc2VPdGhlcjogYm9vbGVhbixpc01vZGVsOmJvb2xlYW4sdWlMYXllcjpMYXlhLlNwcml0ZSk6dm9pZHtcbiAgICAgICAgdGhpcy5pc01vZGVsID0gaXNNb2RlbDtcbiAgICAgICAgaWYoaXNNb2RlbCl7XG4gICAgICAgICAgICAvL+S7peaooeW8j+eql+WPo+W8ueWHuueVjOmdolxuICAgICAgICAgICAgdGhpcy5wb3B1cChjbG9zZU90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHRoaXMucGFyZW50ICE9IHVpTGF5ZXIpe1xuICAgICAgICAgICAgdWlMYXllci5hZGRDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVTZWxmKCk6TGF5YS5Ob2Rle1xuICAgICAgICBpZih0aGlzLmlzTW9kZWwpXG4gICAgICAgICAgICBMYXlhLkRpYWxvZy5tYW5hZ2VyLm1hc2tMYXllci5yZW1vdmVTZWxmKCk7XG4gICAgICAgIHJldHVybiBzdXBlci5yZW1vdmVTZWxmKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQoKTp2b2lke1xuXG4gICAgfVxuICAgIC8vIHB1YmxpYyByZW1vdmUoKTp2b2lke1xuICAgIC8vICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgLy8gICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIHB1YmxpYyBjbG9zZSgpOnZvaWR7XG4gICAgLy8gICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgLy8gICAgIExheWEuRGlhbG9nLm1hbmFnZXIubWFza0xheWVyLnJlbW92ZVNlbGYoKTtcbiAgICAvLyAgICAgbGV0IHZpZXdWbzpWaWV3Q29uZmlnVm8gPSBKc29uQ29uZmlnLnZpZXdDb25maWdWb0pzb25bdGhpcy5fdmlld05hbWVdO1xuICAgIC8vICAgICBpZih2aWV3Vm8uY2xvc2VBbmREZXN0cm95KVxuICAgIC8vICAgICAgICAgdGhpcy5kZXN0cm95KHRydWUpO1xuICAgIC8vIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KGRlc3Ryb3lDaGlsZDogYm9vbGVhbik6dm9pZHtcbiAgICAgICAgc3VwZXIuZGVzdHJveShkZXN0cm95Q2hpbGQpXG4gICAgfVxufSIsImltcG9ydCBCYXNlVmlldyBmcm9tIFwiLi9CYXNlVmlld1wiO1xuaW1wb3J0IENvbnN0TmFtZSBmcm9tIFwiLi4vQ29uc3ROYW1lXCI7XG5pbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSBcIi4uL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpblZpZXcgZXh0ZW5kcyBCYXNlVmlldyB7XG4gICAgcHVibGljIG1lbnVfYnRuOiBMYXlhLkJ1dHRvbjtcblxuICAgIC8qKuWIh+aNouWcuuaZr+eureWktCAqL1xuICAgIHB1YmxpYyBsZWZ0X2J0bjogTGF5YS5CdXR0b247XG4gICAgcHVibGljIHJpZ2h0X2J0bjogTGF5YS5TcHJpdGU7XG4gICAgcHVibGljIGRvd25fYnRuOiBMYXlhLlNwcml0ZTtcbiAgICBwdWJsaWMgdXBfYnRuOiBMYXlhLlNwcml0ZTtcbiAgICBwcml2YXRlIF9jaGFubmVsOiBDb21tYW5kQ2hhbm5lbDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fY2hhbm5lbCA9IENvbW1hbmRDaGFubmVsLmluc3RhbmNlO1xuICAgIH1cbiAgICBwdWJsaWMgY3JlYXRlVmlldyh2aWV3OiBPYmplY3QpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuY3JlYXRlVmlldyh2aWV3KTtcbiAgICAgICAgdGhpcy5tZW51X2J0bi5vbihMYXlhLkV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLnNob3dNZW51Vmlldyk7XG4gICAgICAgIHRoaXMubGVmdF9idG4ub24oTGF5YS5FdmVudC5DTElDSywgdGhpcywgdGhpcy5tb3ZlU2NlbmUsIFsxLCAwXSk7XG4gICAgICAgIHRoaXMucmlnaHRfYnRuLm9uKExheWEuRXZlbnQuQ0xJQ0ssIHRoaXMsIHRoaXMubW92ZVNjZW5lLCBbLTEsIDBdKTtcbiAgICAgICAgdGhpcy5kb3duX2J0bi5vbihMYXlhLkV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLm1vdmVTY2VuZSwgWzAsIC0xXSk7XG4gICAgICAgIHRoaXMudXBfYnRuLm9uKExheWEuRXZlbnQuQ0xJQ0ssIHRoaXMsIHRoaXMubW92ZVNjZW5lLCBbMCwgMV0pO1xuICAgICAgICB0aGlzLm1vdmVTY2VuZUNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93TWVudVZpZXcoKTogdm9pZCB7XG4gICAgICAgIENvbW1hbmRDaGFubmVsLmluc3RhbmNlLnBvc3RDb21tYW5kKENvbnN0TmFtZS5VSV9DT05UUk9MTEVSLCBDb25zdE5hbWUuVUlfU0hPV19WSUVXX0JZX05BTUUsIFtDb25zdE5hbWUuTUVOVV9WSUVXXSk7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdmVTY2VuZSh0b1g6IG51bWJlciwgdG9ZOiBudW1iZXIsIGV2dDogTGF5YS5FdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmxlZnRfYnRuLm1vdXNlRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJpZ2h0X2J0bi5tb3VzZUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cF9idG4ubW91c2VFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG93bl9idG4ubW91c2VFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBzY2VuZUxheWVyOiBMYXlhLlNwcml0ZSA9IHRoaXMuX2NoYW5uZWwucG9zdENvbW1hbmQoQ29uc3ROYW1lLkxBWUVSX0NPTlRST0xMRVIsIENvbnN0TmFtZS5MQVlFUl9HRVRfU0NFTkVfTEFZRVIpO1xuICAgICAgICBsZXQgdG9EaXJYOiBudW1iZXIgPSBzY2VuZUxheWVyLng7XG4gICAgICAgIGxldCB0b0Rpclk6IG51bWJlciA9IHNjZW5lTGF5ZXIueTtcbiAgICAgICAgLyoq5YW35L2T5Zy65pmv5pWw5o2u6ZyA6KaB6KGo5qC86YWN572u77yM5YWI5YaZ5q27ICovXG4gICAgICAgIGlmICh0b1ggPiAwKSB7XG4gICAgICAgICAgICBpZiAoc2NlbmVMYXllci54IDwgMi8qKuW3pui+ueeahOWcuuaZr+aVsOmHjyAqLyAqIExheWEuc3RhZ2Uud2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0b0RpclggPSBzY2VuZUxheWVyLnggKyBMYXlhLnN0YWdlLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRvWCA8IDApIHtcbiAgICAgICAgICAgIGlmIChzY2VuZUxheWVyLnggPiAtMS8qKuWPs+i+ueeahOWcuuaZr+aVsOmHjyAqLyAqIExheWEuc3RhZ2Uud2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0b0RpclggPSBzY2VuZUxheWVyLnggLSBMYXlhLnN0YWdlLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0b1kgPCAwKSB7XG4gICAgICAgICAgICBpZiAoc2NlbmVMYXllci55ID4gLTEvKirkuIvovrnnmoTlnLrmma/mlbDph48gKi8gKiBMYXlhLnN0YWdlLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHRvRGlyWSA9IHNjZW5lTGF5ZXIueSAtIExheWEuc3RhZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRvWSA+IDApIHtcbiAgICAgICAgICAgIGlmIChzY2VuZUxheWVyLnkgPCAwLyoq5LiK6L6555qE5Zy65pmv5pWw6YePICovICogTGF5YS5zdGFnZS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0b0RpclkgPSBzY2VuZUxheWVyLnkgKyBMYXlhLnN0YWdlLmhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBMYXlhLlR3ZWVuLnRvKHNjZW5lTGF5ZXIsIHsgeDogdG9EaXJYLCB5OiB0b0RpclkgfSwgMjAwLG51bGwsTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLHRoaXMubW92ZVNjZW5lQ29tcGxldGUpKTtcbiAgICB9XG5cbiAgICAvL+WcuuaZr+enu+WKqOWujOavleWQju+8jOagueaNruWcuuaZr2lk77yI5YW25a6e5bCx5piv5Z2Q5qCH77yJ5p2l6K6+572u566t5aS055qE5Y+v6KeB5oCnXG4gICAgcHVibGljIG1vdmVTY2VuZUNvbXBsZXRlKCk6dm9pZHtcbiAgICAgICAgbGV0IHNjZW5lTGF5ZXI6IExheWEuU3ByaXRlID0gdGhpcy5fY2hhbm5lbC5wb3N0Q29tbWFuZChDb25zdE5hbWUuTEFZRVJfQ09OVFJPTExFUiwgQ29uc3ROYW1lLkxBWUVSX0dFVF9TQ0VORV9MQVlFUik7XG4gICAgICAgIC8v5bem5Y+z566t5aS0XG4gICAgICAgIGlmKHNjZW5lTGF5ZXIueSA9PSAwKXtcbiAgICAgICAgICAgIHRoaXMubGVmdF9idG4udmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0X2J0bi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubGVmdF9idG4ubW91c2VFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucmlnaHRfYnRuLm1vdXNlRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc2NlbmVMYXllci54ID49IDIvKirlt6bovrnnmoTlnLrmma/mlbDph48gKi8gKiBMYXlhLnN0YWdlLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0X2J0bi52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NlbmVMYXllci54IDw9IC0xLyoq5Y+z6L6555qE5Zy65pmv5pWw6YePICovICogTGF5YS5zdGFnZS53aWR0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRfYnRuLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmxlZnRfYnRuLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmlnaHRfYnRuLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvL+S4iuS4i+eureWktFxuICAgICAgICBpZihzY2VuZUxheWVyLnggPT0gMCl7XG4gICAgICAgICAgICB0aGlzLnVwX2J0bi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZG93bl9idG4udmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnVwX2J0bi5tb3VzZUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5kb3duX2J0bi5tb3VzZUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHNjZW5lTGF5ZXIueSA8PSAtMS8qKuS4i+i+ueeahOWcuuaZr+aVsOmHjyAqLyAqIExheWEuc3RhZ2UuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb3duX2J0bi52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NlbmVMYXllci55ID49IDAvKirkuIrovrnnmoTlnLrmma/mlbDph48gKi8gKiBMYXlhLnN0YWdlLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBfYnRuLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLnVwX2J0bi52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRvd25fYnRuLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KGRlc3Ryb3lDaGlsZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBzdXBlci5kZXN0cm95KGRlc3Ryb3lDaGlsZClcbiAgICAgICAgdGhpcy5sZWZ0X2J0bi5vZmYoTGF5YS5FdmVudC5DTElDSywgdGhpcywgdGhpcy5tb3ZlU2NlbmUpO1xuICAgICAgICB0aGlzLnJpZ2h0X2J0bi5vZmYoTGF5YS5FdmVudC5DTElDSywgdGhpcywgdGhpcy5tb3ZlU2NlbmUpO1xuICAgICAgICB0aGlzLmRvd25fYnRuLm9mZihMYXlhLkV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLm1vdmVTY2VuZSk7XG4gICAgICAgIHRoaXMudXBfYnRuLm9mZihMYXlhLkV2ZW50LkNMSUNLLCB0aGlzLCB0aGlzLm1vdmVTY2VuZSk7XG4gICAgICAgIHRoaXMubGVmdF9idG4gPSBudWxsO1xuICAgICAgICB0aGlzLnJpZ2h0X2J0biA9IG51bGw7XG4gICAgICAgIHRoaXMuZG93bl9idG4gPSBudWxsO1xuICAgICAgICB0aGlzLnVwX2J0biA9IG51bGw7XG4gICAgfVxufSIsImltcG9ydCBCYXNlVmlldyBmcm9tIFwiLi4vQmFzZVZpZXdcIjtcbmltcG9ydCBJbnN0YWxsYXRpb25JdGVtVm8gZnJvbSBcIi4uLy4uL3ZvL0luc3RhbGxhdGlvbkl0ZW1Wb1wiO1xuaW1wb3J0IEluc3RhbGxhdGlvbkl0ZW0gZnJvbSBcIi4vSW5zdGFsbGF0aW9uSXRlbVwiO1xuaW1wb3J0IE1lbnVWbyBmcm9tIFwiLi4vLi4vdm8vTWVudVZvXCI7XG5pbXBvcnQgSnNvbkNvbmZpZyBmcm9tIFwiLi4vLi4vSnNvbkNvbmZpZ1wiO1xuaW1wb3J0IENvbnN0TmFtZSBmcm9tIFwiLi4vLi4vQ29uc3ROYW1lXCI7XG5pbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSBcIi4uLy4uL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWxcIjtcbmltcG9ydCBMb2FkTWFuYWdlciBmcm9tIFwiLi4vLi4vbWFuYWdlci9Mb2FkTWFuYWdlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnN0YWxsYXRpb25JbmZvIGV4dGVuZHMgQmFzZVZpZXd7XG4gICAgcHVibGljIGljb246TGF5YS5JbWFnZTtcbiAgICBwdWJsaWMgdGl0bGVfdHh0OkxheWEuTGFiZWw7XG4gICAgcHVibGljIGRlc190eHQ6TGF5YS5MYWJlbDtcbiAgICBwdWJsaWMgaXRlbV90eHRfMTpMYXlhLkxhYmVsO1xuICAgIHB1YmxpYyBpdGVtX3R4dF8yOkxheWEuTGFiZWw7XG4gICAgcHVibGljIGl0ZW1fdHh0XzM6TGF5YS5MYWJlbDtcbiAgICBwdWJsaWMgdXNlX2J0bjpMYXlhLlNwcml0ZTtcblxuICAgIHB1YmxpYyBjcmVhdGVWaWV3KHZpZXdPYmo6T2JqZWN0KTp2b2lke1xuICAgICAgICBzdXBlci5jcmVhdGVWaWV3KHZpZXdPYmopO1xuICAgICAgICB0aGlzLnVzZV9idG4ub24oTGF5YS5FdmVudC5DTElDSyx0aGlzLHRoaXMudXNlKTtcbiAgICAgICAgLy8gTGF5YS5zdGFnZS5vbihMYXlhLkV2ZW50LkNMSUNLLHRoaXMsKGU6TGF5YS5FdmVudCk9PntcbiAgICAgICAgLy8gICAgIGFsZXJ0KGUudGFyZ2V0Lm5hbWUpO1xuICAgICAgICAvLyB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXNlKCk6dm9pZCB7XG4gICAgICAgIGlmKHRoaXMudmlld0RhdGEpe1xuICAgICAgICAgICAgQ29tbWFuZENoYW5uZWwuaW5zdGFuY2UucG9zdENvbW1hbmQoQ29uc3ROYW1lLkdBTUVfQ09OVFJPTExFUixDb25zdE5hbWUuR0FNRV9BRERfSU5TVEFMTEFUSU9OLHRoaXMudmlld0RhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dTZWxmKGNsb3NlT3RoZXI6IGJvb2xlYW4saXNNb2RlbDpib29sZWFuLHVpTGF5ZXI6TGF5YS5TcHJpdGUpOnZvaWR7XG4gICAgICAgIHN1cGVyLnNob3dTZWxmKGNsb3NlT3RoZXIsaXNNb2RlbCx1aUxheWVyKTtcbiAgICAgICAgbGV0IHZpZXdEYXRhOkluc3RhbGxhdGlvbkl0ZW1WbyA9IHRoaXMudmlld0RhdGEgYXMgSW5zdGFsbGF0aW9uSXRlbVZvO1xuICAgICAgICBpZih2aWV3RGF0YSl7XG4gICAgICAgICAgICB0aGlzLmljb24uc2tpbiA9IExvYWRNYW5hZ2VyLmdldEljb25Vcmwodmlld0RhdGEudHlwZSx2aWV3RGF0YS5pZCk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlX3R4dC50ZXh0ID0gdmlld0RhdGEuaW5zdGFsbGF0aW9uSXRlbU5hbWU7XG4gICAgICAgICAgICB0aGlzLmRlc190eHQudGV4dCA9IHZpZXdEYXRhLmRlc2NyaXB0O1xuICAgICAgICAgICAgbGV0IG1lbnVWbzpNZW51Vm8gPSBKc29uQ29uZmlnLmlucy5nZXRWbyhDb25zdE5hbWUuTUVOVV9WSUVXKSBhcyBNZW51Vm87XG4gICAgICAgICAgICBsZXQgcHJvcGVydHlMaXN0OkFycmF5PHN0cmluZz4gPSB2aWV3RGF0YS5wcm9wZXJ0eUxpc3Q7XG4gICAgICAgICAgICBmb3IobGV0IGk6bnVtYmVyID0gMSxsZW46bnVtYmVyID0gcHJvcGVydHlMaXN0Lmxlbmd0aDtpPD1sZW47aSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlBcnI6QXJyYXk8c3RyaW5nPiA9IHByb3BlcnR5TGlzdFtpLTFdLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzW1wiaXRlbV90eHRfXCIgKyBpXS50ZXh0ID0gbWVudVZvLnByb3BlcnR5cGVbcHJvcGVydHlBcnJbMF1dICsgXCIgICArXCIgKyBwcm9wZXJ0eUFyclsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZSgpOnZvaWR7XG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgICAgIExheWEuRGlhbG9nLm1hbmFnZXIubWFza0xheWVyLnJlbW92ZVNlbGYoKTtcbiAgICB9XG59IiwiaW1wb3J0IEluc3RhbGxhdGlvbkl0ZW1WbyBmcm9tIFwiLi4vLi4vdm8vSW5zdGFsbGF0aW9uSXRlbVZvXCI7XG5pbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSBcIi4uLy4uL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWxcIjtcbmltcG9ydCBDb25zdE5hbWUgZnJvbSBcIi4uLy4uL0NvbnN0TmFtZVwiO1xuaW1wb3J0IExvYWRNYW5hZ2VyIGZyb20gXCIuLi8uLi9tYW5hZ2VyL0xvYWRNYW5hZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc3RhbGxhdGlvbkl0ZW0gZXh0ZW5kcyBMYXlhLkJveHtcbiAgICBwdWJsaWMgb3duZWQ6TGF5YS5TcHJpdGU7XG4gICAgcHVibGljIGljb246TGF5YS5JbWFnZTtcblxuICAgIHB1YmxpYyByZW5kZXJWaWV3KCk6dm9pZHtcbiAgICAgICAgdGhpcy5vd25lZCA9IHRoaXMuZ2V0Q2hpbGRCeU5hbWUoXCJvd25lZFwiKSBhcyBMYXlhLlNwcml0ZTtcbiAgICAgICAgdGhpcy5vd25lZC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaWNvbiA9IHRoaXMuZ2V0Q2hpbGRCeU5hbWUoXCJpY29uXCIpIGFzIExheWEuSW1hZ2U7XG4gICAgICAgIGxldCBkYXRhOkluc3RhbGxhdGlvbkl0ZW1WbyA9IHRoaXMuZGF0YVNvdXJjZTtcbiAgICAgICAgdGhpcy5pY29uLnNraW4gPSBMb2FkTWFuYWdlci5nZXRJY29uVXJsKGRhdGEudHlwZSxkYXRhLmlkKTtcbiAgICAgICAgdGhpcy5vbihMYXlhLkV2ZW50LkNMSUNLLHRoaXMsdGhpcy5zaG93SW5mbyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93SW5mbygpOnZvaWR7XG4gICAgICAgIGxldCBkYXRhOkluc3RhbGxhdGlvbkl0ZW0gPSB0aGlzLmRhdGFTb3VyY2U7XG4gICAgICAgIGlmKGRhdGEhPW51bGwpe1xuICAgICAgICAgICAgQ29tbWFuZENoYW5uZWwuaW5zdGFuY2UucG9zdENvbW1hbmQoQ29uc3ROYW1lLlVJX0NPTlRST0xMRVIsQ29uc3ROYW1lLlVJX1NIT1dfVklFV19CWV9OQU1FLFtDb25zdE5hbWUuSU5TVEFMTEFUSU9OX0lORk8sZGF0YV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGRlc3Ryb3koZGVzdHJveUNoaWxkOiBib29sZWFuKXtcbiAgICAgICAgc3VwZXIuZGVzdHJveShkZXN0cm95Q2hpbGQpO1xuICAgICAgICB0aGlzLm9mZihMYXlhLkV2ZW50LkNMSUNLLHRoaXMsdGhpcy5zaG93SW5mbyk7XG4gICAgICAgIHRoaXMub3duZWQgPSBudWxsO1xuICAgICAgICB0aGlzLmljb24gPSBudWxsO1xuICAgIH1cbn0iLCJpbXBvcnQgSW5zdGFsbGF0aW9uTGlzdEl0ZW1WbyBmcm9tIFwiLi4vLi4vdm8vSW5zdGFsbGF0aW9uTGlzdEl0ZW1Wb1wiO1xuaW1wb3J0IEluc3RhbGxhdGlvbkl0ZW0gZnJvbSBcIi4vSW5zdGFsbGF0aW9uSXRlbVwiO1xuaW1wb3J0IEJhc2VWaWV3IGZyb20gXCIuLi9CYXNlVmlld1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnN0YWxsYXRpb25MaXN0SXRlbSBleHRlbmRzIExheWEuQm94e1xuICAgIHB1YmxpYyB0aXRsZV90eHQ6TGF5YS5MYWJlbDtcbiAgICBwdWJsaWMgaW5zdGFsbGF0aW9uTGlzdDpMYXlhLkxpc3Q7XG5cbiAgICBwcml2YXRlIHJlbmRlckxpc3QoY2VsbEl0ZW06SW5zdGFsbGF0aW9uSXRlbSxpbmRleDpudW1iZXIpOnZvaWR7XG4gICAgICAgIGNlbGxJdGVtLnJlbmRlclZpZXcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyVmlldygpOnZvaWR7XG4gICAgICAgIGxldCBkYXRhU291cmNlOkluc3RhbGxhdGlvbkxpc3RJdGVtVm8gPSB0aGlzLmRhdGFTb3VyY2U7XG4gICAgICAgIHRoaXMudGl0bGVfdHh0ID0gdGhpcy5nZXRDaGlsZEJ5TmFtZShcInRpdGxlX3R4dFwiKSBhcyBMYXlhLkxhYmVsO1xuICAgICAgICB0aGlzLmluc3RhbGxhdGlvbkxpc3QgPSB0aGlzLmdldENoaWxkQnlOYW1lKFwiaW5zdGFsbGF0aW9uTGlzdFwiKSBhcyBMYXlhLkxpc3Q7XG4gICAgICAgIHRoaXMuaW5zdGFsbGF0aW9uTGlzdC5yZW5kZXJIYW5kbGVyID0gbmV3IExheWEuSGFuZGxlcih0aGlzLHRoaXMucmVuZGVyTGlzdCk7XG4gICAgICAgIHRoaXMuaW5zdGFsbGF0aW9uTGlzdC5yZXBlYXRZID0gTWF0aC5jZWlsKGRhdGFTb3VyY2UuaW5zdGFsbGF0aW9uSXRlbUxpc3QubGVuZ3RoIC8gdGhpcy5pbnN0YWxsYXRpb25MaXN0LnJlcGVhdFgpXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gKHRoaXMuaGVpZ2h0KSAqIHRoaXMuaW5zdGFsbGF0aW9uTGlzdC5yZXBlYXRZO1xuICAgICAgICB0aGlzLnRpdGxlX3R4dC50ZXh0ID0gZGF0YVNvdXJjZS5pbnN0YWxsYXRpb25OYW1lO1xuICAgICAgICB0aGlzLmluc3RhbGxhdGlvbkxpc3QuYXJyYXkgPSBkYXRhU291cmNlLmluc3RhbGxhdGlvbkl0ZW1MaXN0O1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KGRlc3Ryb3lDaGlsZDogYm9vbGVhbil7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koZGVzdHJveUNoaWxkKTtcbiAgICAgICAgdGhpcy50aXRsZV90eHQgPSBudWxsO1xuICAgICAgICB0aGlzLmluc3RhbGxhdGlvbkxpc3QgPSBudWxsO1xuICAgIH1cbn0iLCJpbXBvcnQgQmFzZVZpZXcgZnJvbSBcIi4uL0Jhc2VWaWV3XCI7XG5pbXBvcnQgSnNvbkNvbmZpZyBmcm9tIFwiLi4vLi4vSnNvbkNvbmZpZ1wiO1xuaW1wb3J0IE1lbnVWbyBmcm9tIFwiLi4vLi4vdm8vTWVudVZvXCI7XG5pbXBvcnQgQ29tbWFuZENoYW5uZWwgZnJvbSBcIi4uLy4uL2NvbnRyb2xsZXIvQ29tbWFuZENoYW5uZWxcIjtcbmltcG9ydCBDb25zdE5hbWUgZnJvbSBcIi4uLy4uL0NvbnN0TmFtZVwiO1xuaW1wb3J0IEluc3RhbGxhdGlvbkxpc3RJdGVtIGZyb20gXCIuL0luc3RhbGxhdGlvbkxpc3RJdGVtXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVWaWV3IGV4dGVuZHMgQmFzZVZpZXd7XG4gICAgcHVibGljIG1lbnVUYWI6TGF5YS5UYWI7XG4gICAgcHVibGljIGxpc3Q6TGF5YS5MaXN0O1xuICAgIHB1YmxpYyBjcmVhdGVWaWV3KHZpZXc6T2JqZWN0KTp2b2lke1xuICAgICAgICBzdXBlci5jcmVhdGVWaWV3KHZpZXcpO1xuICAgICAgICB0aGlzLmxpc3QucmVuZGVySGFuZGxlciA9IG5ldyBMYXlhLkhhbmRsZXIodGhpcyx0aGlzLnJlbmRlckxpc3QpO1xuICAgICAgICB0aGlzLmxpc3QudlNjcm9sbEJhclNraW4gPSBcIlwiO1xuICAgICAgICB0aGlzLmxpc3QuZWxhc3RpY0VuYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0KCk6dm9pZHtcbiAgICAgICAgLy/orr7nva7liJfooajmuLLmn5PpoblcbiAgICAgICAgbGV0IG1lbnVWbzpNZW51Vm8gPSBKc29uQ29uZmlnLmlucy5nZXRWbyh0aGlzLl92aWV3TmFtZSkgYXMgTWVudVZvO1xuICAgICAgICB0aGlzLmxpc3QuYXJyYXkgPSBtZW51Vm8ubWVudUxpc3Q7XG4gICAgICAgIHRoaXMubGlzdC53aWR0aCA9IHRoaXMubGlzdC5nZXRDZWxsKDApLndpZHRoICogdGhpcy5saXN0LnJlcGVhdFg7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCB2aWV3TmFtZSh2YWx1ZTpzdHJpbmcpe1xuICAgICAgICB0aGlzLl92aWV3TmFtZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyTGlzdChjZWxsSXRlbTpJbnN0YWxsYXRpb25MaXN0SXRlbSxpbmRleDpudW1iZXIpOnZvaWR7XG4gICAgICAgIGNlbGxJdGVtLnJlbmRlclZpZXcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveShkZXN0cm95Q2hpbGQ6IGJvb2xlYW4pe1xuICAgICAgICBDb21tYW5kQ2hhbm5lbC5pbnN0YW5jZS5wb3N0Q29tbWFuZChDb25zdE5hbWUuVUlfQ09OVFJPTExFUixDb25zdE5hbWUuVUlfREVTVFJPWV9WSUVXX0JZX05BTUUsdGhpcy5fdmlld05hbWUpO1xuICAgICAgICBzdXBlci5kZXN0cm95KGRlc3Ryb3lDaGlsZCk7XG4gICAgICAgIHRoaXMubGlzdCA9IG51bGw7XG4gICAgICAgIHRoaXMubWVudVRhYiA9IG51bGw7XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VWb3tcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKXtcblxuICAgIH1cblxuICAgIHB1YmxpYyBpbml0KG9iaixqc29uT2JqOk9iamVjdCA9IG51bGwpOnZvaWQge1xuXG4gICAgfVxufSAiLCJpbXBvcnQgQmFzZVZvIGZyb20gXCIuL0Jhc2VWb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnN0YWxsYXRpb25JdGVtVm8gZXh0ZW5kcyBCYXNlVm8ge1xuICAgIC8v6K6+5pa95ZCN56ewXG4gICAgcHVibGljIGluc3RhbGxhdGlvbkl0ZW1OYW1lOiBzdHJpbmc7XG4gICAgLy/orr7mlr3liJfooahcbiAgICBwdWJsaWMgaWQ6IG51bWJlcjtcbiAgICAvL+aPj+i/sFxuICAgIHB1YmxpYyBkZXNjcmlwdDpzdHJpbmc7XG4gICAgLy/lrr3lkozpq5hcbiAgICBwdWJsaWMgc2l6ZUFycjpBcnJheTxudW1iZXI+O1xuICAgIC8v6K6+5pa95bGe5oCn5YiX6KGoXG4gICAgcHVibGljIHByb3BlcnR5TGlzdDpBcnJheTxzdHJpbmc+O1xuICAgIC8v5Lul5LiL5bGe5oCn5Yqo5oCB6K6+572u77yM5YeP5bCRanNvbuaWh+S7tuS9k+enr1xuICAgIC8v6K6+5pa957G75YirXG4gICAgcHVibGljIHR5cGU6c3RyaW5nO1xuICAgIC8v6K6+5pa95L2N572u5Z2Q5qCHXG4gICAgcHVibGljIHBvc0FycjpBcnJheTxudW1iZXI+O1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdChvYmo6YW55KTogdm9pZCB7XG4gICAgICAgIHZhciBwcm9wTm86IG51bWJlciA9IDA7XG4gICAgICAgIHRoaXMuaW5zdGFsbGF0aW9uSXRlbU5hbWUgPSBvYmpbcHJvcE5vKytdO1xuICAgICAgICB0aGlzLmlkID0gb2JqW3Byb3BObysrXTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdCA9IG9ialtwcm9wTm8rK107XG4gICAgICAgIHRoaXMuc2l6ZUFyciA9IG9ialtwcm9wTm8rK107XG4gICAgICAgIHRoaXMucHJvcGVydHlMaXN0ID0gb2JqW3Byb3BObysrXTtcbiAgICB9XG59ICIsImltcG9ydCBCYXNlVm8gZnJvbSBcIi4vQmFzZVZvXCI7XG5pbXBvcnQgSW5zdGFsbGF0aW9uSXRlbVZvIGZyb20gXCIuL0luc3RhbGxhdGlvbkl0ZW1Wb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnN0YWxsYXRpb25MaXN0SXRlbVZvIGV4dGVuZHMgQmFzZVZvIHtcbiAgICAvL+iuvuaWveWQjeensFxuICAgIHB1YmxpYyBpbnN0YWxsYXRpb25OYW1lOiBzdHJpbmc7XG4gICAgLy/orr7mlr3nsbvlnovvvIznlKjmnaXliqDovb3nlKjvvIzkuZ/lj6/nlKjmnaXljLrliIZcbiAgICBwdWJsaWMgdHlwZTpzdHJpbmc7XG4gICAgLy/orr7mlr3kvY3nva7lnZDmoIdcbiAgICBwdWJsaWMgcG9zQXJyOkFycmF5PG51bWJlcj47XG4gICAgLy/orr7mlr3liJfooahcbiAgICBwdWJsaWMgaW5zdGFsbGF0aW9uSXRlbUxpc3Q6IEFycmF5PEluc3RhbGxhdGlvbkl0ZW1Wbz47XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQob2JqOmFueSk6IHZvaWQge1xuICAgICAgICB2YXIgcHJvcE5vOiBudW1iZXIgPSAwO1xuICAgICAgICB0aGlzLmluc3RhbGxhdGlvbk5hbWUgPSBvYmpbcHJvcE5vKytdO1xuICAgICAgICB0aGlzLnR5cGUgPSBvYmpbcHJvcE5vKytdO1xuICAgICAgICB0aGlzLnBvc0FyciA9IG9ialtwcm9wTm8rK107XG4gICAgICAgIHRoaXMuaW5zdGFsbGF0aW9uSXRlbUxpc3QgPSB0aGlzLmRlY29kZShvYmpbcHJvcE5vKytdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlY29kZShpdGVtTGlzdDpBcnJheTxhbnk+KTpBcnJheTxJbnN0YWxsYXRpb25JdGVtVm8+e1xuICAgICAgICBsZXQgaW5zdGFsbGF0aW9uSXRlbUxpc3Q6IEFycmF5PEluc3RhbGxhdGlvbkl0ZW1Wbz4gPSBbXTtcbiAgICAgICAgZm9yKGxldCBsZW4gPSBpdGVtTGlzdC5sZW5ndGggLGkgPSAwO2k8IGxlbjtpKyspe1xuICAgICAgICAgICAgbGV0IGluc3RhbGxhdGlvbkl0ZW1WbyA9IG5ldyBJbnN0YWxsYXRpb25JdGVtVm8oKTtcbiAgICAgICAgICAgIGluc3RhbGxhdGlvbkl0ZW1Wby50eXBlID0gdGhpcy50eXBlO1xuICAgICAgICAgICAgaW5zdGFsbGF0aW9uSXRlbVZvLnBvc0FyciA9IHRoaXMucG9zQXJyO1xuICAgICAgICAgICAgaW5zdGFsbGF0aW9uSXRlbVZvLmluaXQoaXRlbUxpc3RbaV0pO1xuICAgICAgICAgICAgaW5zdGFsbGF0aW9uSXRlbUxpc3QucHVzaChpbnN0YWxsYXRpb25JdGVtVm8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnN0YWxsYXRpb25JdGVtTGlzdDtcbiAgICB9XG59ICIsImltcG9ydCBCYXNlVm8gZnJvbSBcIi4vQmFzZVZvXCI7XG5pbXBvcnQgSW5zdGFsbGF0aW9uTGlzdEl0ZW1WbyBmcm9tIFwiLi9JbnN0YWxsYXRpb25MaXN0SXRlbVZvXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVWbyBleHRlbmRzIEJhc2VWbyB7XG4gICAgLy/orr7mlr3liJfooahcbiAgICBwdWJsaWMgbWVudUxpc3Q6IEFycmF5PEluc3RhbGxhdGlvbkxpc3RJdGVtVm8+O1xuICAgIC8v6K6+5pa95L+h5oGvXG4gICAgcHVibGljIG1lbnVJbmZvOiBPYmplY3Q7XG4gICAgLy/lsZ7mgKfphY3nva7kv6Hmga9cbiAgICBwdWJsaWMgcHJvcGVydHlwZTpPYmplY3Q7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGluaXQoanNvbk9iajogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMubWVudUxpc3QgPSB0aGlzLmRlY29kZUxpc3QoanNvbk9iai5tZW51TGlzdCk7XG4gICAgICAgIHRoaXMubWVudUluZm8gPSBqc29uT2JqLm1lbnVJbmZvO1xuICAgICAgICB0aGlzLnByb3BlcnR5cGUgPSBqc29uT2JqLnByb3BlcnR5cGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWNvZGVMaXN0KGl0ZW1MaXN0OmFueSk6QXJyYXk8SW5zdGFsbGF0aW9uTGlzdEl0ZW1Wbz57XG4gICAgICAgIGxldCBJbnN0YWxsYXRpb25Wb0xpc3Q6IEFycmF5PEluc3RhbGxhdGlvbkxpc3RJdGVtVm8+ID0gW107XG4gICAgICAgIGZvcihsZXQgbGVuID0gaXRlbUxpc3QubGVuZ3RoICxpID0gMDtpPCBsZW47aSsrKXtcbiAgICAgICAgICAgIGxldCBpbnN0YWxsYXRpb25WbyA9IG5ldyBJbnN0YWxsYXRpb25MaXN0SXRlbVZvKCk7XG4gICAgICAgICAgICBpbnN0YWxsYXRpb25Wby5pbml0KGl0ZW1MaXN0W2ldKTtcbiAgICAgICAgICAgIEluc3RhbGxhdGlvblZvTGlzdC5wdXNoKGluc3RhbGxhdGlvblZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSW5zdGFsbGF0aW9uVm9MaXN0O1xuICAgIH1cbn0gIiwiaW1wb3J0IEJhc2VWbyBmcm9tIFwiLi9CYXNlVm9cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlld0NvbmZpZ1ZvIGV4dGVuZHMgQmFzZVZvIHtcbiAgICAvL+eVjOmdouWQjeensFxuICAgIHB1YmxpYyB2aWV3TmFtZTogc3RyaW5nO1xuICAgIC8v6LWE5rqQ6Lev5b6EXG4gICAgcHVibGljIHJlc291cmNlVXJsOiBzdHJpbmc7XG4gICAgLy/mmK/lkKblhbPpl63lhbbku5bnlYzpnaJcbiAgICBwdWJsaWMgY2xvc2VPdGhlcjpib29sZWFuO1xuICAgIC8v5piv5ZCm5qih5byP56qX5Y+jXG4gICAgcHVibGljIGlzTW9kZWw6Ym9vbGVhbjtcbiAgICAvKirlhbPpl63nlYzpnaLmmK/lkKbplIDmr4EgKi9cbiAgICBwdWJsaWMgY2xvc2VBbmREZXN0cm95OmJvb2xlYW47XG4gICAgLy/nlYzpnaLphY3nva5qc29u5paH5Lu2XG4gICAgcHVibGljIGpzb25OYW1lOnN0cmluZztcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdChvYmosIGpzb25PYmo6IG9iamVjdCk6IHZvaWQge1xuICAgICAgICB2YXIgcHJvcE5vOiBudW1iZXIgPSAwO1xuICAgICAgICB0aGlzLnZpZXdOYW1lID0gb2JqW3Byb3BObysrXTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZVVybCA9IG9ialtwcm9wTm8rK107XG4gICAgICAgIHRoaXMuY2xvc2VPdGhlciA9IG9ialtwcm9wTm8rK107XG4gICAgICAgIHRoaXMuaXNNb2RlbCA9IG9ialtwcm9wTm8rK107XG4gICAgICAgIHRoaXMuY2xvc2VBbmREZXN0cm95ID0gb2JqW3Byb3BObysrXTtcbiAgICAgICAgdGhpcy5qc29uTmFtZSA9IG9ialtwcm9wTm8rK107XG4gICAgICAgIGpzb25PYmpbdGhpcy52aWV3TmFtZV0gPSB0aGlzO1xuICAgIH1cbn0gIl19
>>>>>>> origin/master
